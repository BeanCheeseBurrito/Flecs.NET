<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <OutputType>Library</OutputType>
        <TargetFramework>netstandard2.1</TargetFramework>

        <!-- This is project for holding natives only so we dont really want to generate anything else -->
        <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
        <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
        <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
        <IncludeSymbols>false</IncludeSymbols>
        <IncludeBuildFiles>false</IncludeBuildFiles>
        <IncludeBuildOutput>false</IncludeBuildOutput>
        <MSBuildEnableWorkloadResolver>false</MSBuildEnableWorkloadResolver>
        <NoWarn>$(NoWarn);CS2008;NU5128</NoWarn>
    </PropertyGroup>

    <PropertyGroup>
        <IsPackable>true</IsPackable>

        <Description>Native libraries for flecs</Description>
    </PropertyGroup>

    <!-- We want 2 separate natives packages for debug and release modes -->
    <Choose>
        <When Condition="'$(Configuration)' == 'Debug'">
            <PropertyGroup>
                <PackageId>Flecs.NET.Native.Debug</PackageId>
                <ZigConfiguration>Debug</ZigConfiguration>
            </PropertyGroup>
        </When>
        <When Condition="'$(Configuration)' == 'Release'">
            <PropertyGroup>
                <PackageId>Flecs.NET.Native.Release</PackageId>
                <ZigConfiguration>ReleaseFast</ZigConfiguration>
            </PropertyGroup>
        </When>
    </Choose>

    <!-- Fallback to host runtime when not specified -->
    <PropertyGroup>
        <RuntimeIdentifier Condition="'$(RuntimeIdentifier)' == ''">$(HostRuntime)</RuntimeIdentifier>
    </PropertyGroup>

    <!-- These files will be auto included based on platform in dependant projects -->
    <ItemGroup>
        <None Pack="true" Include="buildTransitive/Flecs.NET.Native.props" PackagePath="buildTransitive/$(PackageId).props"/>
        <None Pack="true" Include="buildTransitive/Flecs.NET.Native.targets" PackagePath="buildTransitive/$(PackageId).targets"/>
        <None Pack="true" Include="$(OutputPath)runtimes/**/*.a;$(OutputPath)runtimes/**/*.lib" PackagePath="static/" />

        <Content Include="$(OutputPath)runtimes/**/**" Exclude="$(OutputPath)runtimes/**/*.a;$(OutputPath)runtimes/**/*.lib" Link="%(Filename)%(Extension)" >
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
            <PackagePath>runtimes/</PackagePath>
        </Content>
    </ItemGroup>

    <!-- Determine mapping between dotnet RID and zig targets -->
    <Choose>
        <When Condition="$(RuntimeIdentifier) == 'win-x64'">
            <PropertyGroup>
                <ZigIdentifier>x86_64-windows-gnu</ZigIdentifier>
            </PropertyGroup>
        </When>
        <When Condition="$(RuntimeIdentifier) == 'win-x86'">
            <PropertyGroup>
                <ZigIdentifier>x86-windows-gnu</ZigIdentifier>
            </PropertyGroup>
        </When>
        <When Condition="$(RuntimeIdentifier) == 'win-arm'">
            <PropertyGroup>
                <ZigIdentifier>arm-windows-gnu</ZigIdentifier>
            </PropertyGroup>
        </When>
        <When Condition="$(RuntimeIdentifier) == 'win-arm64'">
            <PropertyGroup>
                <ZigIdentifier>aarch64-windows-gnu</ZigIdentifier>
            </PropertyGroup>
        </When>
        <When Condition="$(RuntimeIdentifier) == 'linux-x64'">
            <PropertyGroup>
                <ZigIdentifier>x86_64-linux-gnu</ZigIdentifier>
            </PropertyGroup>
        </When>
        <When Condition="$(RuntimeIdentifier) == 'linux-x86'">
            <PropertyGroup>
                <ZigIdentifier>x86-linux-gnu</ZigIdentifier>
            </PropertyGroup>
        </When>
        <When Condition="$(RuntimeIdentifier) == 'linux-arm'">
            <PropertyGroup>
                <ZigIdentifier>arm-linux-gnueabihf</ZigIdentifier>
            </PropertyGroup>
        </When>
        <When Condition="$(RuntimeIdentifier) == 'linux-arm64'">
            <PropertyGroup>
                <ZigIdentifier>aarch64-linux-gnu</ZigIdentifier>
            </PropertyGroup>
        </When>
        <When Condition="$(RuntimeIdentifier) == 'osx-x64'">
            <PropertyGroup>
                <ZigIdentifier>x86_64-macos</ZigIdentifier>
            </PropertyGroup>
        </When>
        <When Condition="$(RuntimeIdentifier) == 'osx-arm64'">
            <PropertyGroup>
                <ZigIdentifier>aarch64-macos</ZigIdentifier>
            </PropertyGroup>
            </When>
        <When Condition="$(RuntimeIdentifier) == 'iossimulator-x64'">
            <PropertyGroup>
                <ZigIdentifier>x86_64-ios-simulator</ZigIdentifier>
                <ZigArgs>--sysroot $(IOS_SIMULATOR_SDK)</ZigArgs>
            </PropertyGroup>
        </When>
        <When Condition="$(RuntimeIdentifier) == 'iossimulator-arm64'">
            <PropertyGroup>
                <ZigIdentifier>aarch64-ios-simulator</ZigIdentifier>
                <ZigArgs>--sysroot $(IOS_SIMULATOR_SDK)</ZigArgs>
            </PropertyGroup>
        </When>
        <When Condition="$(RuntimeIdentifier) == 'ios-arm64'">
            <PropertyGroup>
                <ZigIdentifier>aarch64-ios</ZigIdentifier>
                <ZigArgs>--sysroot $(IOS_SDK)</ZigArgs>
            </PropertyGroup>
        </When>
        <When Condition="$(RuntimeIdentifier) == 'browser-wasm'">
            <PropertyGroup>
                <ZigIdentifier>wasm32-emscripten</ZigIdentifier>
                <ZigArgs>--sysroot "$(EMSDK)/upstream/emscripten"</ZigArgs>
            </PropertyGroup>
        </When>
        <Otherwise>
            <PropertyGroup>
                <ZigIdentifier>$(RuntimeIdentifier)</ZigIdentifier>
            </PropertyGroup>
        </Otherwise>
    </Choose>

    <!-- Enable soft asserts if configured -->
    <PropertyGroup>
        <ZigArgs Condition="'$(FlecsSoftAssert)' == 'True'">$(ZigArgs) -Dsoft-assert=true</ZigArgs>
    </PropertyGroup>

    <!-- Here we need host not target toolset to compile/cross-compile -->
    <ItemGroup>
        <PackageReference Include="Vezel.Zig.Toolsets.$(HostRuntime)" Version="0.13.0.1">
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
            <PrivateAssets>all</PrivateAssets>
        </PackageReference>
    </ItemGroup>

    <!-- All the native code compile magic lives here -->
    <Target Name="CompileNatives" AfterTargets="Build" Condition="'$(SkipNatives)' != 'true'">
        <Message Importance="High" Text="Build Target: $(RuntimeIdentifier) $(Configuration)"/>
        <Message Importance="High" Text="Build Zig Target: $(ZigIdentifier) $(ZigConfiguration)"/>
        <Message Importance="High" Text="Build Zig Args: $(ZigArgs)"/>
        <Exec Command="$(ZigExePath) build -Doptimize=$(ZigConfiguration) --prefix $(OutputPath)runtimes --prefix-lib-dir $(RuntimeIdentifier)/native --prefix-exe-dir $(RuntimeIdentifier)/native -Dtarget=$(ZigIdentifier) $(ZigArgs)"/>
    </Target>
</Project>
