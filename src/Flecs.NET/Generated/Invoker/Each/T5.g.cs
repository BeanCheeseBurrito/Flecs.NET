// /_/src/Flecs.NET/Generated/Invoker/Each/T5.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/Invoker.cs
using System;
using Flecs.NET.Utilities;

namespace Flecs.NET.Core.Invokers;

internal unsafe struct EachRefCallbackDelegate<T0, T1, T2, T3, T4> : IEachInvoker
{
    public static void Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.EachRefCallback<T0, T1, T2, T3, T4> invoke = (Ecs.EachRefCallback<T0, T1, T2, T3, T4>)callback;
        for (int i = 0; i < count; i++)
            invoke(ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i)), ref Managed.GetTypeRef<T1>(TFieldGetter.Get<T1>(in fields, 1, i)), ref Managed.GetTypeRef<T2>(TFieldGetter.Get<T2>(in fields, 2, i)), ref Managed.GetTypeRef<T3>(TFieldGetter.Get<T3>(in fields, 3, i)), ref Managed.GetTypeRef<T4>(TFieldGetter.Get<T4>(in fields, 4, i)));
    }
    
    public static void Invoke(JobState state)
    {
        Invoker<T0, T1, T2, T3, T4, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachRefCallbackDelegate<T0, T1, T2, T3, T4>>(ref state.Worker, state.Callback);
    }
}

internal unsafe struct EachEntityRefCallbackDelegate<T0, T1, T2, T3, T4> : IEachInvoker
{
    public static void Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.EachEntityRefCallback<T0, T1, T2, T3, T4> invoke = (Ecs.EachEntityRefCallback<T0, T1, T2, T3, T4>)callback;
        for (int i = 0; i < count; i++)
            invoke(new Entity(fields.Iter->world, fields.Iter->entities[i]), ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i)), ref Managed.GetTypeRef<T1>(TFieldGetter.Get<T1>(in fields, 1, i)), ref Managed.GetTypeRef<T2>(TFieldGetter.Get<T2>(in fields, 2, i)), ref Managed.GetTypeRef<T3>(TFieldGetter.Get<T3>(in fields, 3, i)), ref Managed.GetTypeRef<T4>(TFieldGetter.Get<T4>(in fields, 4, i)));
    }
    
    public static void Invoke(JobState state)
    {
        Invoker<T0, T1, T2, T3, T4, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachEntityRefCallbackDelegate<T0, T1, T2, T3, T4>>(ref state.Worker, state.Callback);
    }
}

internal unsafe struct EachIterRefCallbackDelegate<T0, T1, T2, T3, T4> : IEachInvoker
{
    public static void Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.EachIterRefCallback<T0, T1, T2, T3, T4> invoke = (Ecs.EachIterRefCallback<T0, T1, T2, T3, T4>)callback;
        for (int i = 0; i < count; i++)
            invoke(fields.Iter, i, ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i)), ref Managed.GetTypeRef<T1>(TFieldGetter.Get<T1>(in fields, 1, i)), ref Managed.GetTypeRef<T2>(TFieldGetter.Get<T2>(in fields, 2, i)), ref Managed.GetTypeRef<T3>(TFieldGetter.Get<T3>(in fields, 3, i)), ref Managed.GetTypeRef<T4>(TFieldGetter.Get<T4>(in fields, 4, i)));
    }
    
    public static void Invoke(JobState state)
    {
        Invoker<T0, T1, T2, T3, T4, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachIterRefCallbackDelegate<T0, T1, T2, T3, T4>>(ref state.Worker, state.Callback);
    }
}

internal unsafe struct EachRefCallbackPointer<T0, T1, T2, T3, T4> : IEachInvoker
{
    public static void Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<ref T0, ref T1, ref T2, ref T3, ref T4, void> invoke = (delegate*<ref T0, ref T1, ref T2, ref T3, ref T4, void>)callback;
        for (int i = 0; i < count; i++)
            invoke(ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i)), ref Managed.GetTypeRef<T1>(TFieldGetter.Get<T1>(in fields, 1, i)), ref Managed.GetTypeRef<T2>(TFieldGetter.Get<T2>(in fields, 2, i)), ref Managed.GetTypeRef<T3>(TFieldGetter.Get<T3>(in fields, 3, i)), ref Managed.GetTypeRef<T4>(TFieldGetter.Get<T4>(in fields, 4, i)));
    }
    
    public static void Invoke(JobState state)
    {
        Invoker<T0, T1, T2, T3, T4, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachRefCallbackPointer<T0, T1, T2, T3, T4>>(ref state.Worker, state.Callback);
    }
}

internal unsafe struct EachEntityRefCallbackPointer<T0, T1, T2, T3, T4> : IEachInvoker
{
    public static void Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<Entity, ref T0, ref T1, ref T2, ref T3, ref T4, void> invoke = (delegate*<Entity, ref T0, ref T1, ref T2, ref T3, ref T4, void>)callback;
        for (int i = 0; i < count; i++)
            invoke(new Entity(fields.Iter->world, fields.Iter->entities[i]), ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i)), ref Managed.GetTypeRef<T1>(TFieldGetter.Get<T1>(in fields, 1, i)), ref Managed.GetTypeRef<T2>(TFieldGetter.Get<T2>(in fields, 2, i)), ref Managed.GetTypeRef<T3>(TFieldGetter.Get<T3>(in fields, 3, i)), ref Managed.GetTypeRef<T4>(TFieldGetter.Get<T4>(in fields, 4, i)));
    }
    
    public static void Invoke(JobState state)
    {
        Invoker<T0, T1, T2, T3, T4, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachEntityRefCallbackPointer<T0, T1, T2, T3, T4>>(ref state.Worker, state.Callback);
    }
}

internal unsafe struct EachIterRefCallbackPointer<T0, T1, T2, T3, T4> : IEachInvoker
{
    public static void Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<Iter, int, ref T0, ref T1, ref T2, ref T3, ref T4, void> invoke = (delegate*<Iter, int, ref T0, ref T1, ref T2, ref T3, ref T4, void>)callback;
        for (int i = 0; i < count; i++)
            invoke(fields.Iter, i, ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i)), ref Managed.GetTypeRef<T1>(TFieldGetter.Get<T1>(in fields, 1, i)), ref Managed.GetTypeRef<T2>(TFieldGetter.Get<T2>(in fields, 2, i)), ref Managed.GetTypeRef<T3>(TFieldGetter.Get<T3>(in fields, 3, i)), ref Managed.GetTypeRef<T4>(TFieldGetter.Get<T4>(in fields, 4, i)));
    }
    
    public static void Invoke(JobState state)
    {
        Invoker<T0, T1, T2, T3, T4, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachIterRefCallbackPointer<T0, T1, T2, T3, T4>>(ref state.Worker, state.Callback);
    }
}

internal unsafe struct EachPointerCallbackDelegate<T0, T1, T2, T3, T4> : IEachInvoker
{
    public static void Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.EachPointerCallback<T0, T1, T2, T3, T4> invoke = (Ecs.EachPointerCallback<T0, T1, T2, T3, T4>)callback;
        for (int i = 0; i < count; i++)
            invoke(TFieldGetter.Get<T0>(in fields, 0, i), TFieldGetter.Get<T1>(in fields, 1, i), TFieldGetter.Get<T2>(in fields, 2, i), TFieldGetter.Get<T3>(in fields, 3, i), TFieldGetter.Get<T4>(in fields, 4, i));
    }
    
    public static void Invoke(JobState state)
    {
        Invoker<T0, T1, T2, T3, T4, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachPointerCallbackDelegate<T0, T1, T2, T3, T4>>(ref state.Worker, state.Callback);
    }
}

internal unsafe struct EachEntityPointerCallbackDelegate<T0, T1, T2, T3, T4> : IEachInvoker
{
    public static void Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.EachEntityPointerCallback<T0, T1, T2, T3, T4> invoke = (Ecs.EachEntityPointerCallback<T0, T1, T2, T3, T4>)callback;
        for (int i = 0; i < count; i++)
            invoke(new Entity(fields.Iter->world, fields.Iter->entities[i]), TFieldGetter.Get<T0>(in fields, 0, i), TFieldGetter.Get<T1>(in fields, 1, i), TFieldGetter.Get<T2>(in fields, 2, i), TFieldGetter.Get<T3>(in fields, 3, i), TFieldGetter.Get<T4>(in fields, 4, i));
    }
    
    public static void Invoke(JobState state)
    {
        Invoker<T0, T1, T2, T3, T4, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachEntityPointerCallbackDelegate<T0, T1, T2, T3, T4>>(ref state.Worker, state.Callback);
    }
}

internal unsafe struct EachIterPointerCallbackDelegate<T0, T1, T2, T3, T4> : IEachInvoker
{
    public static void Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.EachIterPointerCallback<T0, T1, T2, T3, T4> invoke = (Ecs.EachIterPointerCallback<T0, T1, T2, T3, T4>)callback;
        for (int i = 0; i < count; i++)
            invoke(fields.Iter, i, TFieldGetter.Get<T0>(in fields, 0, i), TFieldGetter.Get<T1>(in fields, 1, i), TFieldGetter.Get<T2>(in fields, 2, i), TFieldGetter.Get<T3>(in fields, 3, i), TFieldGetter.Get<T4>(in fields, 4, i));
    }
    
    public static void Invoke(JobState state)
    {
        Invoker<T0, T1, T2, T3, T4, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachIterPointerCallbackDelegate<T0, T1, T2, T3, T4>>(ref state.Worker, state.Callback);
    }
}

internal unsafe struct EachPointerCallbackPointer<T0, T1, T2, T3, T4> : IEachInvoker
{
    public static void Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<T0*, T1*, T2*, T3*, T4*, void> invoke = (delegate*<T0*, T1*, T2*, T3*, T4*, void>)callback;
        for (int i = 0; i < count; i++)
            invoke(TFieldGetter.Get<T0>(in fields, 0, i), TFieldGetter.Get<T1>(in fields, 1, i), TFieldGetter.Get<T2>(in fields, 2, i), TFieldGetter.Get<T3>(in fields, 3, i), TFieldGetter.Get<T4>(in fields, 4, i));
    }
    
    public static void Invoke(JobState state)
    {
        Invoker<T0, T1, T2, T3, T4, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachPointerCallbackPointer<T0, T1, T2, T3, T4>>(ref state.Worker, state.Callback);
    }
}

internal unsafe struct EachEntityPointerCallbackPointer<T0, T1, T2, T3, T4> : IEachInvoker
{
    public static void Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<Entity, T0*, T1*, T2*, T3*, T4*, void> invoke = (delegate*<Entity, T0*, T1*, T2*, T3*, T4*, void>)callback;
        for (int i = 0; i < count; i++)
            invoke(new Entity(fields.Iter->world, fields.Iter->entities[i]), TFieldGetter.Get<T0>(in fields, 0, i), TFieldGetter.Get<T1>(in fields, 1, i), TFieldGetter.Get<T2>(in fields, 2, i), TFieldGetter.Get<T3>(in fields, 3, i), TFieldGetter.Get<T4>(in fields, 4, i));
    }
    
    public static void Invoke(JobState state)
    {
        Invoker<T0, T1, T2, T3, T4, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachEntityPointerCallbackPointer<T0, T1, T2, T3, T4>>(ref state.Worker, state.Callback);
    }
}

internal unsafe struct EachIterPointerCallbackPointer<T0, T1, T2, T3, T4> : IEachInvoker
{
    public static void Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<Iter, int, T0*, T1*, T2*, T3*, T4*, void> invoke = (delegate*<Iter, int, T0*, T1*, T2*, T3*, T4*, void>)callback;
        for (int i = 0; i < count; i++)
            invoke(fields.Iter, i, TFieldGetter.Get<T0>(in fields, 0, i), TFieldGetter.Get<T1>(in fields, 1, i), TFieldGetter.Get<T2>(in fields, 2, i), TFieldGetter.Get<T3>(in fields, 3, i), TFieldGetter.Get<T4>(in fields, 4, i));
    }
    
    public static void Invoke(JobState state)
    {
        Invoker<T0, T1, T2, T3, T4, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachIterPointerCallbackPointer<T0, T1, T2, T3, T4>>(ref state.Worker, state.Callback);
    }
}