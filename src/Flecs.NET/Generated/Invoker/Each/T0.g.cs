// /_/src/Flecs.NET/Generated/Invoker/Each/T0.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/Invoker.cs
using System;
using Flecs.NET.Utilities;

namespace Flecs.NET.Core.Invokers;

internal unsafe struct EachEntityCallbackDelegate : IEachInvoker
{
    public static void Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.EachEntityCallback invoke = (Ecs.EachEntityCallback)callback;
        for (int i = 0; i < count; i++)
            invoke(new Entity(fields.Iter->world, fields.Iter->entities[i]));
    }
    
    public static void Invoke(JobState state)
    {
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachEntityCallbackDelegate>(ref state.Worker, state.Callback);
    }
}

internal unsafe struct EachEntityCallbackPointer : IEachInvoker
{
    public static void Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<Entity, void> invoke = (delegate*<Entity, void>)callback;
        for (int i = 0; i < count; i++)
            invoke(new Entity(fields.Iter->world, fields.Iter->entities[i]));
    }
    
    public static void Invoke(JobState state)
    {
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachEntityCallbackPointer>(ref state.Worker, state.Callback);
    }
}

internal unsafe struct EachIterCallbackDelegate : IEachInvoker
{
    public static void Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.EachIterCallback invoke = (Ecs.EachIterCallback)callback;
        for (int i = 0; i < count; i++)
            invoke(fields.Iter, i);
    }
    
    public static void Invoke(JobState state)
    {
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachIterCallbackDelegate>(ref state.Worker, state.Callback);
    }
}

internal unsafe struct EachIterCallbackPointer : IEachInvoker
{
    public static void Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<Iter, int, void> invoke = (delegate*<Iter, int, void>)callback;
        for (int i = 0; i < count; i++)
            invoke(fields.Iter, i);
    }
    
    public static void Invoke(JobState state)
    {
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachIterCallbackPointer>(ref state.Worker, state.Callback);
    }
}