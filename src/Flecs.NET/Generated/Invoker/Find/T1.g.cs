// /_/src/Flecs.NET/Generated/Invoker/Find/T1.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/Invoker.cs
using System;
using Flecs.NET.Utilities;

namespace Flecs.NET.Core.Invokers;

internal unsafe struct FindRefCallbackDelegate<T0> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.FindRefCallback<T0> invoke = (Ecs.FindRefCallback<T0>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i))))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindEntityRefCallbackDelegate<T0> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.FindEntityRefCallback<T0> invoke = (Ecs.FindEntityRefCallback<T0>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(new Entity(fields.Iter->world, fields.Iter->entities[i]), ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i))))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindIterRefCallbackDelegate<T0> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.FindIterRefCallback<T0> invoke = (Ecs.FindIterRefCallback<T0>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(fields.Iter, i, ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i))))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindRefCallbackPointer<T0> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<ref T0, bool> invoke = (delegate*<ref T0, bool>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i))))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindEntityRefCallbackPointer<T0> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<Entity, ref T0, bool> invoke = (delegate*<Entity, ref T0, bool>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(new Entity(fields.Iter->world, fields.Iter->entities[i]), ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i))))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindIterRefCallbackPointer<T0> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<Iter, int, ref T0, bool> invoke = (delegate*<Iter, int, ref T0, bool>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(fields.Iter, i, ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i))))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindPointerCallbackDelegate<T0> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.FindPointerCallback<T0> invoke = (Ecs.FindPointerCallback<T0>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(TFieldGetter.Get<T0>(in fields, 0, i)))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindEntityPointerCallbackDelegate<T0> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.FindEntityPointerCallback<T0> invoke = (Ecs.FindEntityPointerCallback<T0>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(new Entity(fields.Iter->world, fields.Iter->entities[i]), TFieldGetter.Get<T0>(in fields, 0, i)))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindIterPointerCallbackDelegate<T0> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.FindIterPointerCallback<T0> invoke = (Ecs.FindIterPointerCallback<T0>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(fields.Iter, i, TFieldGetter.Get<T0>(in fields, 0, i)))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindPointerCallbackPointer<T0> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<T0*, bool> invoke = (delegate*<T0*, bool>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(TFieldGetter.Get<T0>(in fields, 0, i)))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindEntityPointerCallbackPointer<T0> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<Entity, T0*, bool> invoke = (delegate*<Entity, T0*, bool>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(new Entity(fields.Iter->world, fields.Iter->entities[i]), TFieldGetter.Get<T0>(in fields, 0, i)))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindIterPointerCallbackPointer<T0> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<Iter, int, T0*, bool> invoke = (delegate*<Iter, int, T0*, bool>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(fields.Iter, i, TFieldGetter.Get<T0>(in fields, 0, i)))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}