// /_/src/Flecs.NET/Generated/Invoker/Find/T4.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/Invoker.cs
using System;
using Flecs.NET.Utilities;

namespace Flecs.NET.Core.Invokers;

internal unsafe struct FindRefCallbackDelegate<T0, T1, T2, T3> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.FindRefCallback<T0, T1, T2, T3> invoke = (Ecs.FindRefCallback<T0, T1, T2, T3>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i)), ref Managed.GetTypeRef<T1>(TFieldGetter.Get<T1>(in fields, 1, i)), ref Managed.GetTypeRef<T2>(TFieldGetter.Get<T2>(in fields, 2, i)), ref Managed.GetTypeRef<T3>(TFieldGetter.Get<T3>(in fields, 3, i))))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindEntityRefCallbackDelegate<T0, T1, T2, T3> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.FindEntityRefCallback<T0, T1, T2, T3> invoke = (Ecs.FindEntityRefCallback<T0, T1, T2, T3>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(new Entity(fields.Iter->world, fields.Iter->entities[i]), ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i)), ref Managed.GetTypeRef<T1>(TFieldGetter.Get<T1>(in fields, 1, i)), ref Managed.GetTypeRef<T2>(TFieldGetter.Get<T2>(in fields, 2, i)), ref Managed.GetTypeRef<T3>(TFieldGetter.Get<T3>(in fields, 3, i))))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindIterRefCallbackDelegate<T0, T1, T2, T3> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.FindIterRefCallback<T0, T1, T2, T3> invoke = (Ecs.FindIterRefCallback<T0, T1, T2, T3>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(fields.Iter, i, ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i)), ref Managed.GetTypeRef<T1>(TFieldGetter.Get<T1>(in fields, 1, i)), ref Managed.GetTypeRef<T2>(TFieldGetter.Get<T2>(in fields, 2, i)), ref Managed.GetTypeRef<T3>(TFieldGetter.Get<T3>(in fields, 3, i))))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindRefCallbackPointer<T0, T1, T2, T3> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<ref T0, ref T1, ref T2, ref T3, bool> invoke = (delegate*<ref T0, ref T1, ref T2, ref T3, bool>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i)), ref Managed.GetTypeRef<T1>(TFieldGetter.Get<T1>(in fields, 1, i)), ref Managed.GetTypeRef<T2>(TFieldGetter.Get<T2>(in fields, 2, i)), ref Managed.GetTypeRef<T3>(TFieldGetter.Get<T3>(in fields, 3, i))))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindEntityRefCallbackPointer<T0, T1, T2, T3> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<Entity, ref T0, ref T1, ref T2, ref T3, bool> invoke = (delegate*<Entity, ref T0, ref T1, ref T2, ref T3, bool>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(new Entity(fields.Iter->world, fields.Iter->entities[i]), ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i)), ref Managed.GetTypeRef<T1>(TFieldGetter.Get<T1>(in fields, 1, i)), ref Managed.GetTypeRef<T2>(TFieldGetter.Get<T2>(in fields, 2, i)), ref Managed.GetTypeRef<T3>(TFieldGetter.Get<T3>(in fields, 3, i))))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindIterRefCallbackPointer<T0, T1, T2, T3> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<Iter, int, ref T0, ref T1, ref T2, ref T3, bool> invoke = (delegate*<Iter, int, ref T0, ref T1, ref T2, ref T3, bool>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(fields.Iter, i, ref Managed.GetTypeRef<T0>(TFieldGetter.Get<T0>(in fields, 0, i)), ref Managed.GetTypeRef<T1>(TFieldGetter.Get<T1>(in fields, 1, i)), ref Managed.GetTypeRef<T2>(TFieldGetter.Get<T2>(in fields, 2, i)), ref Managed.GetTypeRef<T3>(TFieldGetter.Get<T3>(in fields, 3, i))))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindPointerCallbackDelegate<T0, T1, T2, T3> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.FindPointerCallback<T0, T1, T2, T3> invoke = (Ecs.FindPointerCallback<T0, T1, T2, T3>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(TFieldGetter.Get<T0>(in fields, 0, i), TFieldGetter.Get<T1>(in fields, 1, i), TFieldGetter.Get<T2>(in fields, 2, i), TFieldGetter.Get<T3>(in fields, 3, i)))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindEntityPointerCallbackDelegate<T0, T1, T2, T3> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.FindEntityPointerCallback<T0, T1, T2, T3> invoke = (Ecs.FindEntityPointerCallback<T0, T1, T2, T3>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(new Entity(fields.Iter->world, fields.Iter->entities[i]), TFieldGetter.Get<T0>(in fields, 0, i), TFieldGetter.Get<T1>(in fields, 1, i), TFieldGetter.Get<T2>(in fields, 2, i), TFieldGetter.Get<T3>(in fields, 3, i)))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindIterPointerCallbackDelegate<T0, T1, T2, T3> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        Ecs.FindIterPointerCallback<T0, T1, T2, T3> invoke = (Ecs.FindIterPointerCallback<T0, T1, T2, T3>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(fields.Iter, i, TFieldGetter.Get<T0>(in fields, 0, i), TFieldGetter.Get<T1>(in fields, 1, i), TFieldGetter.Get<T2>(in fields, 2, i), TFieldGetter.Get<T3>(in fields, 3, i)))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindPointerCallbackPointer<T0, T1, T2, T3> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<T0*, T1*, T2*, T3*, bool> invoke = (delegate*<T0*, T1*, T2*, T3*, bool>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(TFieldGetter.Get<T0>(in fields, 0, i), TFieldGetter.Get<T1>(in fields, 1, i), TFieldGetter.Get<T2>(in fields, 2, i), TFieldGetter.Get<T3>(in fields, 3, i)))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindEntityPointerCallbackPointer<T0, T1, T2, T3> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<Entity, T0*, T1*, T2*, T3*, bool> invoke = (delegate*<Entity, T0*, T1*, T2*, T3*, bool>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(new Entity(fields.Iter->world, fields.Iter->entities[i]), TFieldGetter.Get<T0>(in fields, 0, i), TFieldGetter.Get<T1>(in fields, 1, i), TFieldGetter.Get<T2>(in fields, 2, i), TFieldGetter.Get<T3>(in fields, 3, i)))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}

internal unsafe struct FindIterPointerCallbackPointer<T0, T1, T2, T3> : IFindInvoker
{
    public static Entity Invoke<TFieldGetter>(in Fields fields, int count, InvokerCallback callback) where TFieldGetter : IFieldGetter
    {
        delegate*<Iter, int, T0*, T1*, T2*, T3*, bool> invoke = (delegate*<Iter, int, T0*, T1*, T2*, T3*, bool>)callback;
        
        for (int i = 0; i < count; i++)
        {
            if (invoke(fields.Iter, i, TFieldGetter.Get<T0>(in fields, 0, i), TFieldGetter.Get<T1>(in fields, 1, i), TFieldGetter.Get<T2>(in fields, 2, i), TFieldGetter.Get<T3>(in fields, 3, i)))
                return new Entity(fields.Iter->world, fields.Iter->entities[i]);
        }
        
        return default;
    }
}