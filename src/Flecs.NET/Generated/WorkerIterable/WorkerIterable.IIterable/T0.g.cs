// /_/src/Flecs.NET/Generated/WorkerIterable/WorkerIterable.IIterable/T0.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/WorkerIterable.cs
using System;
using Flecs.NET.Core.Invokers;
using Flecs.NET.Utilities;

namespace Flecs.NET.Core;

public unsafe partial struct WorkerIterable
{
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(Ecs.RunCallback callback)
    {
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Run<WorkerIterable, RunCallbackDelegate>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(Ecs.RunCallback callback)
    {
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable, RunCallbackDelegate>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(delegate*<Iter, void> callback)
    {
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Run<WorkerIterable, RunCallbackPointer>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(delegate*<Iter, void> callback)
    {
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable, RunCallbackPointer>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(Ecs.RunDelegateCallback callback)
    {
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Run<WorkerIterable, RunDelegateCallbackDelegate>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(Ecs.RunDelegateCallback callback)
    {
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable, RunDelegateCallbackDelegate>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(delegate*<Iter, Action<Iter>, void> callback)
    {
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Run<WorkerIterable, RunDelegateCallbackPointer>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(delegate*<Iter, Action<Iter>, void> callback)
    {
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable, RunDelegateCallbackPointer>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(Ecs.RunPointerCallback callback)
    {
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Run<WorkerIterable, RunPointerCallbackDelegate>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(Ecs.RunPointerCallback callback)
    {
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable, RunPointerCallbackDelegate>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(delegate*<Iter, delegate*<Iter, void>, void> callback)
    {
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Run<WorkerIterable, RunPointerCallbackPointer>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(delegate*<Iter, delegate*<Iter, void>, void> callback)
    {
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable, RunPointerCallbackPointer>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Iter(Ecs.IterCallback callback)
    {
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertSparseTypes(Ecs.GetIterableWorld(ref this), true);
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Iter<WorkerIterable, IterCallbackDelegate>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void IterJob(Ecs.IterCallback callback)
    {
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable, IterCallbackDelegate>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Iter(delegate*<Iter, void> callback)
    {
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertSparseTypes(Ecs.GetIterableWorld(ref this), true);
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Iter<WorkerIterable, IterCallbackPointer>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void IterJob(delegate*<Iter, void> callback)
    {
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable, IterCallbackPointer>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(Ecs.EachEntityCallback callback)
    {
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachEntityCallbackDelegate>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(Ecs.EachEntityCallback callback)
    {
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable, EachEntityCallbackDelegate>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(delegate*<Entity, void> callback)
    {
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachEntityCallbackPointer>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(delegate*<Entity, void> callback)
    {
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable, EachEntityCallbackPointer>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(Ecs.EachIterCallback callback)
    {
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachIterCallbackDelegate>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(Ecs.EachIterCallback callback)
    {
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable, EachIterCallbackDelegate>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(delegate*<Iter, int, void> callback)
    {
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable, EachIterCallbackPointer>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(delegate*<Iter, int, void> callback)
    {
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable, EachIterCallbackPointer>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(Ecs.FindEntityCallback callback)
    {
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        return Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Find<WorkerIterable, FindEntityCallbackDelegate>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(delegate*<Entity, bool> callback)
    {
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        return Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Find<WorkerIterable, FindEntityCallbackPointer>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(Ecs.FindIterCallback callback)
    {
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        return Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Find<WorkerIterable, FindIterCallbackDelegate>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(delegate*<Iter, int, bool> callback)
    {
        Types<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        return Invoker<_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Find<WorkerIterable, FindIterCallbackPointer>(ref this, callback);
    }
}