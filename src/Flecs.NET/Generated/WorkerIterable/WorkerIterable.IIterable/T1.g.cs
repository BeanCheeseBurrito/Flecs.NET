// /_/src/Flecs.NET/Generated/WorkerIterable/WorkerIterable.IIterable/T1.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/WorkerIterable.cs
using System;
using Flecs.NET.Core.Invokers;
using Flecs.NET.Utilities;

namespace Flecs.NET.Core;

public unsafe partial struct WorkerIterable<T0>
{
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(Ecs.RunCallback callback)
    {
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Run<WorkerIterable<T0>, RunCallbackDelegate>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(Ecs.RunCallback callback)
    {
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, RunCallbackDelegate>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(delegate*<Iter, void> callback)
    {
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Run<WorkerIterable<T0>, RunCallbackPointer>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(delegate*<Iter, void> callback)
    {
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, RunCallbackPointer>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(Ecs.RunDelegateCallback callback)
    {
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Run<WorkerIterable<T0>, RunDelegateCallbackDelegate>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(Ecs.RunDelegateCallback callback)
    {
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, RunDelegateCallbackDelegate>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(delegate*<Iter, Action<Iter>, void> callback)
    {
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Run<WorkerIterable<T0>, RunDelegateCallbackPointer>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(delegate*<Iter, Action<Iter>, void> callback)
    {
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, RunDelegateCallbackPointer>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(Ecs.RunPointerCallback callback)
    {
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Run<WorkerIterable<T0>, RunPointerCallbackDelegate>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(Ecs.RunPointerCallback callback)
    {
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, RunPointerCallbackDelegate>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(delegate*<Iter, delegate*<Iter, void>, void> callback)
    {
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Run<WorkerIterable<T0>, RunPointerCallbackPointer>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(delegate*<Iter, delegate*<Iter, void>, void> callback)
    {
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, RunPointerCallbackPointer>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Iter(Ecs.IterFieldCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertSparseTypes(Ecs.GetIterableWorld(ref this), true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Iter<WorkerIterable<T0>, IterFieldCallbackDelegate<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void IterJob(Ecs.IterFieldCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, IterFieldCallbackDelegate<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Iter(delegate*<Iter, Field<T0>, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertSparseTypes(Ecs.GetIterableWorld(ref this), true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Iter<WorkerIterable<T0>, IterFieldCallbackPointer<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void IterJob(delegate*<Iter, Field<T0>, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, IterFieldCallbackPointer<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Iter(Ecs.IterSpanCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertSparseTypes(Ecs.GetIterableWorld(ref this), true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Iter<WorkerIterable<T0>, IterSpanCallbackDelegate<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void IterJob(Ecs.IterSpanCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, IterSpanCallbackDelegate<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Iter(delegate*<Iter, Span<T0>, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertSparseTypes(Ecs.GetIterableWorld(ref this), true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Iter<WorkerIterable<T0>, IterSpanCallbackPointer<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void IterJob(delegate*<Iter, Span<T0>, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, IterSpanCallbackPointer<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Iter(Ecs.IterPointerCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertSparseTypes(Ecs.GetIterableWorld(ref this), true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Iter<WorkerIterable<T0>, IterPointerCallbackDelegate<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void IterJob(Ecs.IterPointerCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, IterPointerCallbackDelegate<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Iter(delegate*<Iter, T0*, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertSparseTypes(Ecs.GetIterableWorld(ref this), true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Iter<WorkerIterable<T0>, IterPointerCallbackPointer<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void IterJob(delegate*<Iter, T0*, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, IterPointerCallbackPointer<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(Ecs.EachRefCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable<T0>, EachRefCallbackDelegate<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(Ecs.EachRefCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, EachRefCallbackDelegate<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(Ecs.EachEntityRefCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable<T0>, EachEntityRefCallbackDelegate<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(Ecs.EachEntityRefCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, EachEntityRefCallbackDelegate<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(Ecs.EachIterRefCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable<T0>, EachIterRefCallbackDelegate<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(Ecs.EachIterRefCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, EachIterRefCallbackDelegate<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(delegate*<ref T0, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable<T0>, EachRefCallbackPointer<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(delegate*<ref T0, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, EachRefCallbackPointer<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(delegate*<Entity, ref T0, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable<T0>, EachEntityRefCallbackPointer<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(delegate*<Entity, ref T0, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, EachEntityRefCallbackPointer<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(delegate*<Iter, int, ref T0, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable<T0>, EachIterRefCallbackPointer<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(delegate*<Iter, int, ref T0, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, EachIterRefCallbackPointer<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(Ecs.EachPointerCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable<T0>, EachPointerCallbackDelegate<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(Ecs.EachPointerCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, EachPointerCallbackDelegate<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(Ecs.EachEntityPointerCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable<T0>, EachEntityPointerCallbackDelegate<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(Ecs.EachEntityPointerCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, EachEntityPointerCallbackDelegate<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(Ecs.EachIterPointerCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable<T0>, EachIterPointerCallbackDelegate<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(Ecs.EachIterPointerCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, EachIterPointerCallbackDelegate<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(delegate*<T0*, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable<T0>, EachPointerCallbackPointer<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(delegate*<T0*, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, EachPointerCallbackPointer<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(delegate*<Entity, T0*, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable<T0>, EachEntityPointerCallbackPointer<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(delegate*<Entity, T0*, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, EachEntityPointerCallbackPointer<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(delegate*<Iter, int, T0*, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Each<WorkerIterable<T0>, EachIterPointerCallbackPointer<T0>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(delegate*<Iter, int, T0*, void> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Job<WorkerIterable<T0>, EachIterPointerCallbackPointer<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(Ecs.FindRefCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        return Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Find<WorkerIterable<T0>, FindRefCallbackDelegate<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(Ecs.FindEntityRefCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        return Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Find<WorkerIterable<T0>, FindEntityRefCallbackDelegate<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(Ecs.FindIterRefCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        return Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Find<WorkerIterable<T0>, FindIterRefCallbackDelegate<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(delegate*<ref T0, bool> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        return Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Find<WorkerIterable<T0>, FindRefCallbackPointer<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(delegate*<Entity, ref T0, bool> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        return Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Find<WorkerIterable<T0>, FindEntityRefCallbackPointer<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(delegate*<Iter, int, ref T0, bool> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        return Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Find<WorkerIterable<T0>, FindIterRefCallbackPointer<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(Ecs.FindPointerCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        return Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Find<WorkerIterable<T0>, FindPointerCallbackDelegate<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(Ecs.FindEntityPointerCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        return Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Find<WorkerIterable<T0>, FindEntityPointerCallbackDelegate<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(Ecs.FindIterPointerCallback<T0> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        return Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Find<WorkerIterable<T0>, FindIterPointerCallbackDelegate<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(delegate*<T0*, bool> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        return Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Find<WorkerIterable<T0>, FindPointerCallbackPointer<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(delegate*<Entity, T0*, bool> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        return Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Find<WorkerIterable<T0>, FindEntityPointerCallbackPointer<T0>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="WorkerIterable"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(delegate*<Iter, int, T0*, bool> callback)
    {
        Types<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        return Invoker<T0, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.Find<WorkerIterable<T0>, FindIterPointerCallbackPointer<T0>>(ref this, callback);
    }
}