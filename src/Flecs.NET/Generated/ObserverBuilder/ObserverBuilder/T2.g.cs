// /_/src/Flecs.NET/Generated/ObserverBuilder/ObserverBuilder/T2.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/ObserverBuilder.cs
#nullable enable

using System;
using Flecs.NET.Utilities;

using static Flecs.NET.Bindings.flecs;

namespace Flecs.NET.Core;

/// <summary>
///     A type-safe wrapper around <see cref="ObserverBuilder"/> that takes 2 type arguments.
/// </summary>
/// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
public unsafe partial struct ObserverBuilder<T0, T1> : IDisposable, IEquatable<ObserverBuilder<T0, T1>>, IQueryBuilder<ObserverBuilder<T0, T1>, Observer<T0, T1>>
{
    private ObserverBuilder _observerBuilder;

    /// <inheritdoc cref="ObserverBuilder.World"/>
    public ref ecs_world_t* World => ref _observerBuilder.World;

    /// <inheritdoc cref="ObserverBuilder.Desc"/>
    public ref ecs_observer_desc_t Desc => ref _observerBuilder.Desc;

    /// <inheritdoc cref="ObserverBuilder.QueryBuilder"/>
    public ref QueryBuilder QueryBuilder => ref _observerBuilder.QueryBuilder;

    /// <summary>
    ///     Creates an observer builder with the provided observer builder.
    /// </summary>
    /// <param name="observerBuilder">The observer builder.</param>
    public ObserverBuilder(ObserverBuilder observerBuilder)
    {
        Types<T0, T1, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertNoTags();
        _observerBuilder = observerBuilder;
    }

    /// <inheritdoc cref="ObserverBuilder(ecs_world_t*)"/>
    public ObserverBuilder(ecs_world_t* world)
    {
        Types<T0, T1, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertNoTags();
        _observerBuilder = new ObserverBuilder(world).With<T0>().With<T1>();
    }

    /// <inheritdoc cref="ObserverBuilder(ecs_world_t*, string)"/>
    public ObserverBuilder(ecs_world_t* world, string name)
    {
        Types<T0, T1, _, _, _, _, _, _, _, _, _, _, _, _, _, _>.AssertNoTags();
        _observerBuilder = new ObserverBuilder(world, name).With<T0>().With<T1>();
    }

    /// <inheritdoc cref="ObserverBuilder.Dispose()"/>
    public void Dispose()
    {
        _observerBuilder.Dispose();
    }

    /// <inheritdoc cref="ObserverBuilder.Event(ulong)"/>
    public ref ObserverBuilder<T0, T1> Event(ulong @event)
    {
        _observerBuilder.Event(@event);
        return ref this;
    }

    /// <inheritdoc cref="ObserverBuilder.Event{T}()"/>
    public ref ObserverBuilder<T0, T1> Event<T>()
    {
        _observerBuilder.Event<T>();
        return ref this;
    }

    /// <inheritdoc cref="ObserverBuilder.YieldExisting(bool)"/>
    public ref ObserverBuilder<T0, T1> YieldExisting(bool value = true)
    {
        _observerBuilder.YieldExisting(value);
        return ref this;
    }

    /// <inheritdoc cref="ObserverBuilder.Ctx{T}(T)"/>
    public ref ObserverBuilder<T0, T1> Ctx<T>(T value)
    {
        _observerBuilder.Ctx(ref value);
        return ref this;
    }
    
    /// <inheritdoc cref="ObserverBuilder.Ctx{T}(T, Ecs.UserContextFinish{T})"/>
    public ref ObserverBuilder<T0, T1> Ctx<T>(T value, Ecs.UserContextFinish<T> callback)
    {
        _observerBuilder.Ctx(ref value, callback);
        return ref this;
    }
    
    /// <inheritdoc cref="ObserverBuilder.Ctx{T}(T, Ecs.UserContextFinish{T})"/>
    public ref ObserverBuilder<T0, T1> Ctx<T>(T value, delegate*<ref T, void> callback)
    {
        _observerBuilder.Ctx(ref value, callback);
        return ref this;
    }
    
    /// <inheritdoc cref="ObserverBuilder.Ctx{T}(ref T)"/>
    public ref ObserverBuilder<T0, T1> Ctx<T>(ref T value)
    {
        _observerBuilder.Ctx(ref value);
        return ref this;
    }
    
    /// <inheritdoc cref="ObserverBuilder.Ctx{T}(ref T, Ecs.UserContextFinish{T})"/>
    public ref ObserverBuilder<T0, T1> Ctx<T>(ref T value, Ecs.UserContextFinish<T> callback)
    {
        _observerBuilder.Ctx(ref value, callback);
        return ref this;
    }
    
    /// <inheritdoc cref="ObserverBuilder.Ctx{T}(ref T, Ecs.UserContextFinish{T})"/>
    public ref ObserverBuilder<T0, T1> Ctx<T>(ref T value, delegate*<ref T, void> callback)
    {
        _observerBuilder.Ctx(ref value, callback);
        return ref this;
    }

    private ref ObserverBuilder<T0, T1> SetCallback(InvokerCallback callback, delegate*<ecs_iter_t*, void> invoker)
    {
        _observerBuilder.SetCallback(callback, invoker);
        return ref this;
    }

    private ref ObserverBuilder<T0, T1> SetRun(InvokerCallback callback, delegate*<ecs_iter_t*, void> invoker)
    {
        _observerBuilder.SetRun(callback, invoker);
        return ref this;
    }

    private Observer<T0, T1> Build()
    {
        return new Observer<T0, T1>(_observerBuilder.Build());
    }

    Observer<T0, T1> IQueryBuilder<ObserverBuilder<T0, T1>, Observer<T0, T1>>.Build()
    {
        return Build();
    }

    /// <inheritdoc cref="ObserverBuilder.Equals(ObserverBuilder)"/>
    public bool Equals(ObserverBuilder<T0, T1> other)
    {
        return _observerBuilder == other._observerBuilder;
    }

    /// <inheritdoc cref="ObserverBuilder.Equals(object)"/>
    public override bool Equals(object? obj)
    {
        return obj is ObserverBuilder<T0, T1> other && Equals(other);
    }

    /// <inheritdoc cref="ObserverBuilder.GetHashCode()"/>
    public override int GetHashCode()
    {
        return _observerBuilder.GetHashCode();
    }

    /// <inheritdoc cref="ObserverBuilder.op_Equality"/>
    public static bool operator ==(ObserverBuilder<T0, T1> left, ObserverBuilder<T0, T1> right)
    {
        return left.Equals(right);
    }

    /// <inheritdoc cref="ObserverBuilder.op_Inequality"/>
    public static bool operator !=(ObserverBuilder<T0, T1> left, ObserverBuilder<T0, T1> right)
    {
        return !(left == right);
    }
}