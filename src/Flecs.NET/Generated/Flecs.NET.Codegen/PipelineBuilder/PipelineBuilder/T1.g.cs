// PipelineBuilder/T1.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/PipelineBuilder.cs
#nullable enable

using System;
using static Flecs.NET.Bindings.flecs;

namespace Flecs.NET.Core;

/// <summary>
///     A type-safe wrapper around <see cref="PipelineBuilder"/> that takes 1 type arguments.
/// </summary>
/// <typeparam name="T0">The T0 component type.</typeparam>
public unsafe partial struct PipelineBuilder<T0> : IEquatable<PipelineBuilder<T0>>, IQueryBuilder<PipelineBuilder<T0>, Pipeline<T0>>
{
    private PipelineBuilder _pipelineBuilder;

    /// <inheritdoc cref="PipelineBuilder.World"/>
    public ref ecs_world_t* World => ref _pipelineBuilder.World;
    
    /// <inheritdoc cref="PipelineBuilder.Desc"/>
    public ref ecs_pipeline_desc_t Desc => ref _pipelineBuilder.Desc;
    
    /// <inheritdoc cref="PipelineBuilder.QueryBuilder"/>
    public ref QueryBuilder QueryBuilder => ref _pipelineBuilder.QueryBuilder;

    /// <inheritdoc cref="PipelineBuilder(ecs_world_t*)"/>
    public PipelineBuilder(ecs_world_t* world)
    {
        _pipelineBuilder = new PipelineBuilder(world).With<T0>();
    }

    /// <inheritdoc cref="PipelineBuilder(ecs_world_t*, ulong)"/>
    public PipelineBuilder(ecs_world_t* world, ulong entity)
    {
        _pipelineBuilder = new PipelineBuilder(world, entity).With<T0>();
    }

    /// <inheritdoc cref="PipelineBuilder(ecs_world_t*, string)"/>
    public PipelineBuilder(ecs_world_t* world, string name)
    {
        _pipelineBuilder = new PipelineBuilder(world, name).With<T0>();
    }

    /// <inheritdoc cref="PipelineBuilder.Build()"/>
    public Pipeline<T0> Build()
    {
        return new Pipeline<T0>(_pipelineBuilder.Build());
    }
    
    /// <inheritdoc cref="PipelineBuilder.Equals(PipelineBuilder)"/>
    public bool Equals(PipelineBuilder<T0> other)
    {
        return _pipelineBuilder == other._pipelineBuilder;
    }

    /// <inheritdoc cref="PipelineBuilder.Equals(object)"/>
    public override bool Equals(object? obj)
    {
        return obj is PipelineBuilder<T0>  other && Equals(other);
    }

    /// <inheritdoc cref="PipelineBuilder.GetHashCode()"/>
    public override int GetHashCode()
    {
        return _pipelineBuilder.GetHashCode();
    }

    /// <inheritdoc cref="PipelineBuilder.op_Equality"/>
    public static bool operator ==(PipelineBuilder<T0> left, PipelineBuilder<T0> right)
    {
        return left.Equals(right);
    }

    /// <inheritdoc cref="PipelineBuilder.op_Inequality"/>
    public static bool operator !=(PipelineBuilder<T0> left, PipelineBuilder<T0> right)
    {
        return !(left == right);
    }
}