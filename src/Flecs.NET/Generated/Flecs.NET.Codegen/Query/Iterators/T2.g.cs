// Iterators/T2.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/Query.cs
using System;

namespace Flecs.NET.Core;

public unsafe partial struct Query
{
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Iter<T0, T1>(Ecs.IterFieldCallback<T0, T1> callback) 
    {
        Invoker.Iter<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Iter<T0, T1>(Ecs.IterSpanCallback<T0, T1> callback) where T0 : unmanaged where T1 : unmanaged
    {
        Invoker.Iter<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Iter<T0, T1>(Ecs.IterPointerCallback<T0, T1> callback) where T0 : unmanaged where T1 : unmanaged
    {
        Invoker.Iter<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Iter<T0, T1>(delegate*<Iter, Field<T0>, Field<T1>, void> callback) 
    {
        Invoker.Iter<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Iter<T0, T1>(delegate*<Iter, Span<T0>, Span<T1>, void> callback) where T0 : unmanaged where T1 : unmanaged
    {
        Invoker.Iter<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Iter<T0, T1>(delegate*<Iter, T0*, T1*, void> callback) where T0 : unmanaged where T1 : unmanaged
    {
        Invoker.Iter<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Each<T0, T1>(Ecs.EachRefCallback<T0, T1> callback) 
    {
        Invoker.Each<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Each<T0, T1>(Ecs.EachEntityRefCallback<T0, T1> callback) 
    {
        Invoker.Each<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Each<T0, T1>(Ecs.EachIterRefCallback<T0, T1> callback) 
    {
        Invoker.Each<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Each<T0, T1>(delegate*<ref T0, ref T1, void> callback) 
    {
        Invoker.Each<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Each<T0, T1>(delegate*<Entity, ref T0, ref T1, void> callback) 
    {
        Invoker.Each<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Each<T0, T1>(delegate*<Iter, int, ref T0, ref T1, void> callback) 
    {
        Invoker.Each<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Each<T0, T1>(Ecs.EachPointerCallback<T0, T1> callback) where T0 : unmanaged where T1 : unmanaged
    {
        Invoker.Each<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Each<T0, T1>(Ecs.EachEntityPointerCallback<T0, T1> callback) where T0 : unmanaged where T1 : unmanaged
    {
        Invoker.Each<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Each<T0, T1>(Ecs.EachIterPointerCallback<T0, T1> callback) where T0 : unmanaged where T1 : unmanaged
    {
        Invoker.Each<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Each<T0, T1>(delegate*<T0*, T1*, void> callback) where T0 : unmanaged where T1 : unmanaged
    {
        Invoker.Each<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Each<T0, T1>(delegate*<Entity, T0*, T1*, void> callback) where T0 : unmanaged where T1 : unmanaged
    {
        Invoker.Each<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public void Each<T0, T1>(delegate*<Iter, int, T0*, T1*, void> callback) where T0 : unmanaged where T1 : unmanaged
    {
        Invoker.Each<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public Entity Find<T0, T1>(Ecs.FindRefCallback<T0, T1> callback) 
    {
        return Invoker.Find<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public Entity Find<T0, T1>(Ecs.FindEntityRefCallback<T0, T1> callback) 
    {
        return Invoker.Find<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public Entity Find<T0, T1>(Ecs.FindIterRefCallback<T0, T1> callback) 
    {
        return Invoker.Find<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public Entity Find<T0, T1>(delegate*<ref T0, ref T1, bool> callback) 
    {
        return Invoker.Find<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public Entity Find<T0, T1>(delegate*<Entity, ref T0, ref T1, bool> callback) 
    {
        return Invoker.Find<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public Entity Find<T0, T1>(delegate*<Iter, int, ref T0, ref T1, bool> callback) 
    {
        return Invoker.Find<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public Entity Find<T0, T1>(Ecs.FindPointerCallback<T0, T1> callback) where T0 : unmanaged where T1 : unmanaged
    {
        return Invoker.Find<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public Entity Find<T0, T1>(Ecs.FindEntityPointerCallback<T0, T1> callback) where T0 : unmanaged where T1 : unmanaged
    {
        return Invoker.Find<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public Entity Find<T0, T1>(Ecs.FindIterPointerCallback<T0, T1> callback) where T0 : unmanaged where T1 : unmanaged
    {
        return Invoker.Find<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public Entity Find<T0, T1>(delegate*<T0*, T1*, bool> callback) where T0 : unmanaged where T1 : unmanaged
    {
        return Invoker.Find<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public Entity Find<T0, T1>(delegate*<Entity, T0*, T1*, bool> callback) where T0 : unmanaged where T1 : unmanaged
    {
        return Invoker.Find<Query, T0, T1>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public Entity Find<T0, T1>(delegate*<Iter, int, T0*, T1*, bool> callback) where T0 : unmanaged where T1 : unmanaged
    {
        return Invoker.Find<Query, T0, T1>(ref this, callback);
    }
}