// Each/Iterator/T2.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/Invoker.cs
using System;
using System.Runtime.CompilerServices;
using Flecs.NET.Utilities;
using static Flecs.NET.Bindings.flecs;

namespace Flecs.NET.Core;

public static unsafe partial class Invoker
{
    /// <summary>
    ///     Iterates over an Iter object using the provided .Each callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public static void Each<T0, T1>(Iter it, Ecs.EachRefCallback<T0, T1> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1);
        IterationTechnique flags = it.GetIterationTechnique(2);
            
        Ecs.TableLock(it);
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>())
        {
            if (flags == IterationTechnique.None)
                Managed(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedManaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseManaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedManaged(it, count, callback, ref field0, ref field1);
        }
        else
        {
           if (flags == IterationTechnique.None)
                Unmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedUnmanaged(it, count, callback, ref field0, ref field1);
        }
            
        Ecs.TableUnlock(it);
        
        return;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Unmanaged(Iter it, int count, Ecs.EachRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(ref field0.RefUnmanaged(i), ref field1.RefUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedUnmanaged(Iter it, int count, Ecs.EachRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(ref field0.RefSharedUnmanaged(i), ref field1.RefSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseUnmanaged(Iter it, int count, Ecs.EachRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(ref field0.RefSparseUnmanaged(i), ref field1.RefSparseUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedUnmanaged(Iter it, int count, Ecs.EachRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(ref field0.RefSparseSharedUnmanaged(i), ref field1.RefSparseSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Managed(Iter it, int count, Ecs.EachRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(ref field0.RefManaged(i), ref field1.RefManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedManaged(Iter it, int count, Ecs.EachRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(ref field0.RefSharedManaged(i), ref field1.RefSharedManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseManaged(Iter it, int count, Ecs.EachRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(ref field0.RefSparseManaged(i), ref field1.RefSparseManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedManaged(Iter it, int count, Ecs.EachRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(ref field0.RefSparseSharedManaged(i), ref field1.RefSparseSharedManaged(i));
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Each callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public static void Each<T0, T1>(Iter it, Ecs.EachEntityRefCallback<T0, T1> callback)
    {
        int count = it.Handle->count; Ecs.Assert(it.Handle->count > 0, "No entities returned, use Iter() or Each() without the entity argument instead.");
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1);
        IterationTechnique flags = it.GetIterationTechnique(2);
            
        Ecs.TableLock(it);
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>())
        {
            if (flags == IterationTechnique.None)
                Managed(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedManaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseManaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedManaged(it, count, callback, ref field0, ref field1);
        }
        else
        {
           if (flags == IterationTechnique.None)
                Unmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedUnmanaged(it, count, callback, ref field0, ref field1);
        }
            
        Ecs.TableUnlock(it);
        
        return;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Unmanaged(Iter it, int count, Ecs.EachEntityRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefUnmanaged(i), ref field1.RefUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedUnmanaged(Iter it, int count, Ecs.EachEntityRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSharedUnmanaged(i), ref field1.RefSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseUnmanaged(Iter it, int count, Ecs.EachEntityRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSparseUnmanaged(i), ref field1.RefSparseUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedUnmanaged(Iter it, int count, Ecs.EachEntityRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSparseSharedUnmanaged(i), ref field1.RefSparseSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Managed(Iter it, int count, Ecs.EachEntityRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefManaged(i), ref field1.RefManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedManaged(Iter it, int count, Ecs.EachEntityRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSharedManaged(i), ref field1.RefSharedManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseManaged(Iter it, int count, Ecs.EachEntityRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSparseManaged(i), ref field1.RefSparseManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedManaged(Iter it, int count, Ecs.EachEntityRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSparseSharedManaged(i), ref field1.RefSparseSharedManaged(i));
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Each callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public static void Each<T0, T1>(Iter it, Ecs.EachIterRefCallback<T0, T1> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1);
        IterationTechnique flags = it.GetIterationTechnique(2);
            
        Ecs.TableLock(it);
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>())
        {
            if (flags == IterationTechnique.None)
                Managed(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedManaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseManaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedManaged(it, count, callback, ref field0, ref field1);
        }
        else
        {
           if (flags == IterationTechnique.None)
                Unmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedUnmanaged(it, count, callback, ref field0, ref field1);
        }
            
        Ecs.TableUnlock(it);
        
        return;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Unmanaged(Iter it, int count, Ecs.EachIterRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, ref field0.RefUnmanaged(i), ref field1.RefUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedUnmanaged(Iter it, int count, Ecs.EachIterRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, ref field0.RefSharedUnmanaged(i), ref field1.RefSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseUnmanaged(Iter it, int count, Ecs.EachIterRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, ref field0.RefSparseUnmanaged(i), ref field1.RefSparseUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedUnmanaged(Iter it, int count, Ecs.EachIterRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, ref field0.RefSparseSharedUnmanaged(i), ref field1.RefSparseSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Managed(Iter it, int count, Ecs.EachIterRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, ref field0.RefManaged(i), ref field1.RefManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedManaged(Iter it, int count, Ecs.EachIterRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, ref field0.RefSharedManaged(i), ref field1.RefSharedManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseManaged(Iter it, int count, Ecs.EachIterRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, ref field0.RefSparseManaged(i), ref field1.RefSparseManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedManaged(Iter it, int count, Ecs.EachIterRefCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, ref field0.RefSparseSharedManaged(i), ref field1.RefSparseSharedManaged(i));
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Each callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public static void Each<T0, T1>(Iter it, delegate*<ref T0, ref T1, void> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1);
        IterationTechnique flags = it.GetIterationTechnique(2);
            
        Ecs.TableLock(it);
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>())
        {
            if (flags == IterationTechnique.None)
                Managed(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedManaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseManaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedManaged(it, count, callback, ref field0, ref field1);
        }
        else
        {
           if (flags == IterationTechnique.None)
                Unmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedUnmanaged(it, count, callback, ref field0, ref field1);
        }
            
        Ecs.TableUnlock(it);
        
        return;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Unmanaged(Iter it, int count, delegate*<ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(ref field0.RefUnmanaged(i), ref field1.RefUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedUnmanaged(Iter it, int count, delegate*<ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(ref field0.RefSharedUnmanaged(i), ref field1.RefSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseUnmanaged(Iter it, int count, delegate*<ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(ref field0.RefSparseUnmanaged(i), ref field1.RefSparseUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedUnmanaged(Iter it, int count, delegate*<ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(ref field0.RefSparseSharedUnmanaged(i), ref field1.RefSparseSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Managed(Iter it, int count, delegate*<ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(ref field0.RefManaged(i), ref field1.RefManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedManaged(Iter it, int count, delegate*<ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(ref field0.RefSharedManaged(i), ref field1.RefSharedManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseManaged(Iter it, int count, delegate*<ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(ref field0.RefSparseManaged(i), ref field1.RefSparseManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedManaged(Iter it, int count, delegate*<ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(ref field0.RefSparseSharedManaged(i), ref field1.RefSparseSharedManaged(i));
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Each callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public static void Each<T0, T1>(Iter it, delegate*<Entity, ref T0, ref T1, void> callback)
    {
        int count = it.Handle->count; Ecs.Assert(it.Handle->count > 0, "No entities returned, use Iter() or Each() without the entity argument instead.");
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1);
        IterationTechnique flags = it.GetIterationTechnique(2);
            
        Ecs.TableLock(it);
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>())
        {
            if (flags == IterationTechnique.None)
                Managed(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedManaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseManaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedManaged(it, count, callback, ref field0, ref field1);
        }
        else
        {
           if (flags == IterationTechnique.None)
                Unmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedUnmanaged(it, count, callback, ref field0, ref field1);
        }
            
        Ecs.TableUnlock(it);
        
        return;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Unmanaged(Iter it, int count, delegate*<Entity, ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefUnmanaged(i), ref field1.RefUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedUnmanaged(Iter it, int count, delegate*<Entity, ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSharedUnmanaged(i), ref field1.RefSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseUnmanaged(Iter it, int count, delegate*<Entity, ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSparseUnmanaged(i), ref field1.RefSparseUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedUnmanaged(Iter it, int count, delegate*<Entity, ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSparseSharedUnmanaged(i), ref field1.RefSparseSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Managed(Iter it, int count, delegate*<Entity, ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefManaged(i), ref field1.RefManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedManaged(Iter it, int count, delegate*<Entity, ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSharedManaged(i), ref field1.RefSharedManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseManaged(Iter it, int count, delegate*<Entity, ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSparseManaged(i), ref field1.RefSparseManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedManaged(Iter it, int count, delegate*<Entity, ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSparseSharedManaged(i), ref field1.RefSparseSharedManaged(i));
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Each callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public static void Each<T0, T1>(Iter it, delegate*<Iter, int, ref T0, ref T1, void> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1);
        IterationTechnique flags = it.GetIterationTechnique(2);
            
        Ecs.TableLock(it);
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>())
        {
            if (flags == IterationTechnique.None)
                Managed(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedManaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseManaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedManaged(it, count, callback, ref field0, ref field1);
        }
        else
        {
           if (flags == IterationTechnique.None)
                Unmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedUnmanaged(it, count, callback, ref field0, ref field1);
        }
            
        Ecs.TableUnlock(it);
        
        return;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Unmanaged(Iter it, int count, delegate*<Iter, int, ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, ref field0.RefUnmanaged(i), ref field1.RefUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedUnmanaged(Iter it, int count, delegate*<Iter, int, ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, ref field0.RefSharedUnmanaged(i), ref field1.RefSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseUnmanaged(Iter it, int count, delegate*<Iter, int, ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, ref field0.RefSparseUnmanaged(i), ref field1.RefSparseUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedUnmanaged(Iter it, int count, delegate*<Iter, int, ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, ref field0.RefSparseSharedUnmanaged(i), ref field1.RefSparseSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Managed(Iter it, int count, delegate*<Iter, int, ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, ref field0.RefManaged(i), ref field1.RefManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedManaged(Iter it, int count, delegate*<Iter, int, ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, ref field0.RefSharedManaged(i), ref field1.RefSharedManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseManaged(Iter it, int count, delegate*<Iter, int, ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, ref field0.RefSparseManaged(i), ref field1.RefSparseManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedManaged(Iter it, int count, delegate*<Iter, int, ref T0, ref T1, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, ref field0.RefSparseSharedManaged(i), ref field1.RefSparseSharedManaged(i));
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Each callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public static void Each<T0, T1>(Iter it, Ecs.EachPointerCallback<T0, T1> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1);
        IterationTechnique flags = it.GetIterationTechnique(2);
            
        Ecs.TableLock(it);
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>())
        {
            if (flags == IterationTechnique.None)
                Managed(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedManaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseManaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedManaged(it, count, callback, ref field0, ref field1);
        }
        else
        {
           if (flags == IterationTechnique.None)
                Unmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedUnmanaged(it, count, callback, ref field0, ref field1);
        }
            
        Ecs.TableUnlock(it);
        
        return;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Unmanaged(Iter it, int count, Ecs.EachPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(field0.PointerUnmanaged(i), field1.PointerUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedUnmanaged(Iter it, int count, Ecs.EachPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(field0.PointerSharedUnmanaged(i), field1.PointerSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseUnmanaged(Iter it, int count, Ecs.EachPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(field0.PointerSparseUnmanaged(i), field1.PointerSparseUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedUnmanaged(Iter it, int count, Ecs.EachPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(field0.PointerSparseSharedUnmanaged(i), field1.PointerSparseSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Managed(Iter it, int count, Ecs.EachPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(field0.PointerManaged(i), field1.PointerManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedManaged(Iter it, int count, Ecs.EachPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(field0.PointerSharedManaged(i), field1.PointerSharedManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseManaged(Iter it, int count, Ecs.EachPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(field0.PointerSparseManaged(i), field1.PointerSparseManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedManaged(Iter it, int count, Ecs.EachPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(field0.PointerSparseSharedManaged(i), field1.PointerSparseSharedManaged(i));
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Each callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public static void Each<T0, T1>(Iter it, Ecs.EachEntityPointerCallback<T0, T1> callback)
    {
        int count = it.Handle->count; Ecs.Assert(it.Handle->count > 0, "No entities returned, use Iter() or Each() without the entity argument instead.");
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1);
        IterationTechnique flags = it.GetIterationTechnique(2);
            
        Ecs.TableLock(it);
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>())
        {
            if (flags == IterationTechnique.None)
                Managed(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedManaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseManaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedManaged(it, count, callback, ref field0, ref field1);
        }
        else
        {
           if (flags == IterationTechnique.None)
                Unmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedUnmanaged(it, count, callback, ref field0, ref field1);
        }
            
        Ecs.TableUnlock(it);
        
        return;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Unmanaged(Iter it, int count, Ecs.EachEntityPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerUnmanaged(i), field1.PointerUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedUnmanaged(Iter it, int count, Ecs.EachEntityPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSharedUnmanaged(i), field1.PointerSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseUnmanaged(Iter it, int count, Ecs.EachEntityPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSparseUnmanaged(i), field1.PointerSparseUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedUnmanaged(Iter it, int count, Ecs.EachEntityPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSparseSharedUnmanaged(i), field1.PointerSparseSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Managed(Iter it, int count, Ecs.EachEntityPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerManaged(i), field1.PointerManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedManaged(Iter it, int count, Ecs.EachEntityPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSharedManaged(i), field1.PointerSharedManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseManaged(Iter it, int count, Ecs.EachEntityPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSparseManaged(i), field1.PointerSparseManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedManaged(Iter it, int count, Ecs.EachEntityPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSparseSharedManaged(i), field1.PointerSparseSharedManaged(i));
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Each callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public static void Each<T0, T1>(Iter it, Ecs.EachIterPointerCallback<T0, T1> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1);
        IterationTechnique flags = it.GetIterationTechnique(2);
            
        Ecs.TableLock(it);
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>())
        {
            if (flags == IterationTechnique.None)
                Managed(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedManaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseManaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedManaged(it, count, callback, ref field0, ref field1);
        }
        else
        {
           if (flags == IterationTechnique.None)
                Unmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedUnmanaged(it, count, callback, ref field0, ref field1);
        }
            
        Ecs.TableUnlock(it);
        
        return;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Unmanaged(Iter it, int count, Ecs.EachIterPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, field0.PointerUnmanaged(i), field1.PointerUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedUnmanaged(Iter it, int count, Ecs.EachIterPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, field0.PointerSharedUnmanaged(i), field1.PointerSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseUnmanaged(Iter it, int count, Ecs.EachIterPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, field0.PointerSparseUnmanaged(i), field1.PointerSparseUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedUnmanaged(Iter it, int count, Ecs.EachIterPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, field0.PointerSparseSharedUnmanaged(i), field1.PointerSparseSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Managed(Iter it, int count, Ecs.EachIterPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, field0.PointerManaged(i), field1.PointerManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedManaged(Iter it, int count, Ecs.EachIterPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, field0.PointerSharedManaged(i), field1.PointerSharedManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseManaged(Iter it, int count, Ecs.EachIterPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, field0.PointerSparseManaged(i), field1.PointerSparseManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedManaged(Iter it, int count, Ecs.EachIterPointerCallback<T0, T1> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, field0.PointerSparseSharedManaged(i), field1.PointerSparseSharedManaged(i));
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Each callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public static void Each<T0, T1>(Iter it, delegate*<T0*, T1*, void> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1);
        IterationTechnique flags = it.GetIterationTechnique(2);
            
        Ecs.TableLock(it);
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>())
        {
            if (flags == IterationTechnique.None)
                Managed(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedManaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseManaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedManaged(it, count, callback, ref field0, ref field1);
        }
        else
        {
           if (flags == IterationTechnique.None)
                Unmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedUnmanaged(it, count, callback, ref field0, ref field1);
        }
            
        Ecs.TableUnlock(it);
        
        return;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Unmanaged(Iter it, int count, delegate*<T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(field0.PointerUnmanaged(i), field1.PointerUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedUnmanaged(Iter it, int count, delegate*<T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(field0.PointerSharedUnmanaged(i), field1.PointerSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseUnmanaged(Iter it, int count, delegate*<T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(field0.PointerSparseUnmanaged(i), field1.PointerSparseUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedUnmanaged(Iter it, int count, delegate*<T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(field0.PointerSparseSharedUnmanaged(i), field1.PointerSparseSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Managed(Iter it, int count, delegate*<T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(field0.PointerManaged(i), field1.PointerManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedManaged(Iter it, int count, delegate*<T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(field0.PointerSharedManaged(i), field1.PointerSharedManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseManaged(Iter it, int count, delegate*<T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(field0.PointerSparseManaged(i), field1.PointerSparseManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedManaged(Iter it, int count, delegate*<T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(field0.PointerSparseSharedManaged(i), field1.PointerSparseSharedManaged(i));
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Each callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public static void Each<T0, T1>(Iter it, delegate*<Entity, T0*, T1*, void> callback)
    {
        int count = it.Handle->count; Ecs.Assert(it.Handle->count > 0, "No entities returned, use Iter() or Each() without the entity argument instead.");
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1);
        IterationTechnique flags = it.GetIterationTechnique(2);
            
        Ecs.TableLock(it);
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>())
        {
            if (flags == IterationTechnique.None)
                Managed(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedManaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseManaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedManaged(it, count, callback, ref field0, ref field1);
        }
        else
        {
           if (flags == IterationTechnique.None)
                Unmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedUnmanaged(it, count, callback, ref field0, ref field1);
        }
            
        Ecs.TableUnlock(it);
        
        return;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Unmanaged(Iter it, int count, delegate*<Entity, T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerUnmanaged(i), field1.PointerUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedUnmanaged(Iter it, int count, delegate*<Entity, T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSharedUnmanaged(i), field1.PointerSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseUnmanaged(Iter it, int count, delegate*<Entity, T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSparseUnmanaged(i), field1.PointerSparseUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedUnmanaged(Iter it, int count, delegate*<Entity, T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSparseSharedUnmanaged(i), field1.PointerSparseSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Managed(Iter it, int count, delegate*<Entity, T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerManaged(i), field1.PointerManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedManaged(Iter it, int count, delegate*<Entity, T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSharedManaged(i), field1.PointerSharedManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseManaged(Iter it, int count, delegate*<Entity, T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSparseManaged(i), field1.PointerSparseManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedManaged(Iter it, int count, delegate*<Entity, T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSparseSharedManaged(i), field1.PointerSparseSharedManaged(i));
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Each callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam>
    public static void Each<T0, T1>(Iter it, delegate*<Iter, int, T0*, T1*, void> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1);
        IterationTechnique flags = it.GetIterationTechnique(2);
            
        Ecs.TableLock(it);
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>())
        {
            if (flags == IterationTechnique.None)
                Managed(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedManaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseManaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedManaged(it, count, callback, ref field0, ref field1);
        }
        else
        {
           if (flags == IterationTechnique.None)
                Unmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Shared)
                SharedUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == IterationTechnique.Sparse)
                SparseUnmanaged(it, count, callback, ref field0, ref field1);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                SparseSharedUnmanaged(it, count, callback, ref field0, ref field1);
        }
            
        Ecs.TableUnlock(it);
        
        return;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Unmanaged(Iter it, int count, delegate*<Iter, int, T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, field0.PointerUnmanaged(i), field1.PointerUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedUnmanaged(Iter it, int count, delegate*<Iter, int, T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, field0.PointerSharedUnmanaged(i), field1.PointerSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseUnmanaged(Iter it, int count, delegate*<Iter, int, T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, field0.PointerSparseUnmanaged(i), field1.PointerSparseUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedUnmanaged(Iter it, int count, delegate*<Iter, int, T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, field0.PointerSparseSharedUnmanaged(i), field1.PointerSparseSharedUnmanaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void Managed(Iter it, int count, delegate*<Iter, int, T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, field0.PointerManaged(i), field1.PointerManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SharedManaged(Iter it, int count, delegate*<Iter, int, T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, field0.PointerSharedManaged(i), field1.PointerSharedManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseManaged(Iter it, int count, delegate*<Iter, int, T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, field0.PointerSparseManaged(i), field1.PointerSparseManaged(i));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static void SparseSharedManaged(Iter it, int count, delegate*<Iter, int, T0*, T1*, void> callback, ref FieldData<T0> field0, ref FieldData<T1> field1)
        {
            for (int i = 0; i < count; i++)
                callback(it, i, field0.PointerSparseSharedManaged(i), field1.PointerSparseSharedManaged(i));
        }
    }
}