// Find/Iterator/T3.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/Invoker.cs
using Flecs.NET.Utilities;
using static Flecs.NET.Bindings.flecs;

namespace Flecs.NET.Core;

public static unsafe partial class Invoker
{
    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam>
    public static Entity Find<T0, T1, T2>(Iter it, Ecs.FindRefCallback<T0, T1, T2> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        T0* pointer0 = it.GetPointer<T0>(0); T1* pointer1 = it.GetPointer<T1>(1); T2* pointer2 = it.GetPointer<T2>(2);
            
        Ecs.TableLock(it);
        
        Entity result = default;
            
        if (it.IsLinear())
        {
            for (int i = 0; i < count; i++)
            {
                if (!callback(ref Managed.GetTypeRef<T0>(&pointer0[i]), ref Managed.GetTypeRef<T1>(&pointer1[i]), ref Managed.GetTypeRef<T2>(&pointer2[i])))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
        else
        {
            int step0 = it.Step<T0>(0); int step1 = it.Step<T1>(1); int step2 = it.Step<T2>(2);
            for (int i = 0; i < count; i++)
            {
                if (!callback(ref Managed.GetTypeRef<T0>(&pointer0[i * step0]), ref Managed.GetTypeRef<T1>(&pointer1[i * step1]), ref Managed.GetTypeRef<T2>(&pointer2[i * step2])))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
            
        Ecs.TableUnlock(it);
        
        return result;
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam>
    public static Entity Find<T0, T1, T2>(Iter it, Ecs.FindEntityRefCallback<T0, T1, T2> callback)
    {
        int count = it.Handle->count; Ecs.Assert(it.Handle->count > 0, "No entities returned, use Iter() or Each() without the entity argument instead.");
        
        T0* pointer0 = it.GetPointer<T0>(0); T1* pointer1 = it.GetPointer<T1>(1); T2* pointer2 = it.GetPointer<T2>(2);
            
        Ecs.TableLock(it);
        
        Entity result = default;
            
        if (it.IsLinear())
        {
            for (int i = 0; i < count; i++)
            {
                if (!callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref Managed.GetTypeRef<T0>(&pointer0[i]), ref Managed.GetTypeRef<T1>(&pointer1[i]), ref Managed.GetTypeRef<T2>(&pointer2[i])))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
        else
        {
            int step0 = it.Step<T0>(0); int step1 = it.Step<T1>(1); int step2 = it.Step<T2>(2);
            for (int i = 0; i < count; i++)
            {
                if (!callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref Managed.GetTypeRef<T0>(&pointer0[i * step0]), ref Managed.GetTypeRef<T1>(&pointer1[i * step1]), ref Managed.GetTypeRef<T2>(&pointer2[i * step2])))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
            
        Ecs.TableUnlock(it);
        
        return result;
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam>
    public static Entity Find<T0, T1, T2>(Iter it, Ecs.FindIterRefCallback<T0, T1, T2> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        T0* pointer0 = it.GetPointer<T0>(0); T1* pointer1 = it.GetPointer<T1>(1); T2* pointer2 = it.GetPointer<T2>(2);
            
        Ecs.TableLock(it);
        
        Entity result = default;
            
        if (it.IsLinear())
        {
            for (int i = 0; i < count; i++)
            {
                if (!callback(it, i, ref Managed.GetTypeRef<T0>(&pointer0[i]), ref Managed.GetTypeRef<T1>(&pointer1[i]), ref Managed.GetTypeRef<T2>(&pointer2[i])))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
        else
        {
            int step0 = it.Step<T0>(0); int step1 = it.Step<T1>(1); int step2 = it.Step<T2>(2);
            for (int i = 0; i < count; i++)
            {
                if (!callback(it, i, ref Managed.GetTypeRef<T0>(&pointer0[i * step0]), ref Managed.GetTypeRef<T1>(&pointer1[i * step1]), ref Managed.GetTypeRef<T2>(&pointer2[i * step2])))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
            
        Ecs.TableUnlock(it);
        
        return result;
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam>
    public static Entity Find<T0, T1, T2>(Iter it, delegate*<ref T0, ref T1, ref T2, bool> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        T0* pointer0 = it.GetPointer<T0>(0); T1* pointer1 = it.GetPointer<T1>(1); T2* pointer2 = it.GetPointer<T2>(2);
            
        Ecs.TableLock(it);
        
        Entity result = default;
            
        if (it.IsLinear())
        {
            for (int i = 0; i < count; i++)
            {
                if (!callback(ref Managed.GetTypeRef<T0>(&pointer0[i]), ref Managed.GetTypeRef<T1>(&pointer1[i]), ref Managed.GetTypeRef<T2>(&pointer2[i])))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
        else
        {
            int step0 = it.Step<T0>(0); int step1 = it.Step<T1>(1); int step2 = it.Step<T2>(2);
            for (int i = 0; i < count; i++)
            {
                if (!callback(ref Managed.GetTypeRef<T0>(&pointer0[i * step0]), ref Managed.GetTypeRef<T1>(&pointer1[i * step1]), ref Managed.GetTypeRef<T2>(&pointer2[i * step2])))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
            
        Ecs.TableUnlock(it);
        
        return result;
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam>
    public static Entity Find<T0, T1, T2>(Iter it, delegate*<Entity, ref T0, ref T1, ref T2, bool> callback)
    {
        int count = it.Handle->count; Ecs.Assert(it.Handle->count > 0, "No entities returned, use Iter() or Each() without the entity argument instead.");
        
        T0* pointer0 = it.GetPointer<T0>(0); T1* pointer1 = it.GetPointer<T1>(1); T2* pointer2 = it.GetPointer<T2>(2);
            
        Ecs.TableLock(it);
        
        Entity result = default;
            
        if (it.IsLinear())
        {
            for (int i = 0; i < count; i++)
            {
                if (!callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref Managed.GetTypeRef<T0>(&pointer0[i]), ref Managed.GetTypeRef<T1>(&pointer1[i]), ref Managed.GetTypeRef<T2>(&pointer2[i])))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
        else
        {
            int step0 = it.Step<T0>(0); int step1 = it.Step<T1>(1); int step2 = it.Step<T2>(2);
            for (int i = 0; i < count; i++)
            {
                if (!callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref Managed.GetTypeRef<T0>(&pointer0[i * step0]), ref Managed.GetTypeRef<T1>(&pointer1[i * step1]), ref Managed.GetTypeRef<T2>(&pointer2[i * step2])))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
            
        Ecs.TableUnlock(it);
        
        return result;
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam>
    public static Entity Find<T0, T1, T2>(Iter it, delegate*<Iter, int, ref T0, ref T1, ref T2, bool> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        T0* pointer0 = it.GetPointer<T0>(0); T1* pointer1 = it.GetPointer<T1>(1); T2* pointer2 = it.GetPointer<T2>(2);
            
        Ecs.TableLock(it);
        
        Entity result = default;
            
        if (it.IsLinear())
        {
            for (int i = 0; i < count; i++)
            {
                if (!callback(it, i, ref Managed.GetTypeRef<T0>(&pointer0[i]), ref Managed.GetTypeRef<T1>(&pointer1[i]), ref Managed.GetTypeRef<T2>(&pointer2[i])))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
        else
        {
            int step0 = it.Step<T0>(0); int step1 = it.Step<T1>(1); int step2 = it.Step<T2>(2);
            for (int i = 0; i < count; i++)
            {
                if (!callback(it, i, ref Managed.GetTypeRef<T0>(&pointer0[i * step0]), ref Managed.GetTypeRef<T1>(&pointer1[i * step1]), ref Managed.GetTypeRef<T2>(&pointer2[i * step2])))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
            
        Ecs.TableUnlock(it);
        
        return result;
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam>
    public static Entity Find<T0, T1, T2>(Iter it, Ecs.FindPointerCallback<T0, T1, T2> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        T0* pointer0 = it.GetPointer<T0>(0); T1* pointer1 = it.GetPointer<T1>(1); T2* pointer2 = it.GetPointer<T2>(2);
            
        Ecs.TableLock(it);
        
        Entity result = default;
            
        if (it.IsLinear())
        {
            for (int i = 0; i < count; i++)
            {
                if (!callback(&pointer0[i], &pointer1[i], &pointer2[i]))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
        else
        {
            int step0 = it.Step<T0>(0); int step1 = it.Step<T1>(1); int step2 = it.Step<T2>(2);
            for (int i = 0; i < count; i++)
            {
                if (!callback(&pointer0[i * step0], &pointer1[i * step1], &pointer2[i * step2]))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
            
        Ecs.TableUnlock(it);
        
        return result;
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam>
    public static Entity Find<T0, T1, T2>(Iter it, Ecs.FindEntityPointerCallback<T0, T1, T2> callback)
    {
        int count = it.Handle->count; Ecs.Assert(it.Handle->count > 0, "No entities returned, use Iter() or Each() without the entity argument instead.");
        
        T0* pointer0 = it.GetPointer<T0>(0); T1* pointer1 = it.GetPointer<T1>(1); T2* pointer2 = it.GetPointer<T2>(2);
            
        Ecs.TableLock(it);
        
        Entity result = default;
            
        if (it.IsLinear())
        {
            for (int i = 0; i < count; i++)
            {
                if (!callback(new Entity(it.Handle->world, it.Handle->entities[i]), &pointer0[i], &pointer1[i], &pointer2[i]))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
        else
        {
            int step0 = it.Step<T0>(0); int step1 = it.Step<T1>(1); int step2 = it.Step<T2>(2);
            for (int i = 0; i < count; i++)
            {
                if (!callback(new Entity(it.Handle->world, it.Handle->entities[i]), &pointer0[i * step0], &pointer1[i * step1], &pointer2[i * step2]))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
            
        Ecs.TableUnlock(it);
        
        return result;
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam>
    public static Entity Find<T0, T1, T2>(Iter it, Ecs.FindIterPointerCallback<T0, T1, T2> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        T0* pointer0 = it.GetPointer<T0>(0); T1* pointer1 = it.GetPointer<T1>(1); T2* pointer2 = it.GetPointer<T2>(2);
            
        Ecs.TableLock(it);
        
        Entity result = default;
            
        if (it.IsLinear())
        {
            for (int i = 0; i < count; i++)
            {
                if (!callback(it, i, &pointer0[i], &pointer1[i], &pointer2[i]))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
        else
        {
            int step0 = it.Step<T0>(0); int step1 = it.Step<T1>(1); int step2 = it.Step<T2>(2);
            for (int i = 0; i < count; i++)
            {
                if (!callback(it, i, &pointer0[i * step0], &pointer1[i * step1], &pointer2[i * step2]))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
            
        Ecs.TableUnlock(it);
        
        return result;
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam>
    public static Entity Find<T0, T1, T2>(Iter it, delegate*<T0*, T1*, T2*, bool> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        T0* pointer0 = it.GetPointer<T0>(0); T1* pointer1 = it.GetPointer<T1>(1); T2* pointer2 = it.GetPointer<T2>(2);
            
        Ecs.TableLock(it);
        
        Entity result = default;
            
        if (it.IsLinear())
        {
            for (int i = 0; i < count; i++)
            {
                if (!callback(&pointer0[i], &pointer1[i], &pointer2[i]))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
        else
        {
            int step0 = it.Step<T0>(0); int step1 = it.Step<T1>(1); int step2 = it.Step<T2>(2);
            for (int i = 0; i < count; i++)
            {
                if (!callback(&pointer0[i * step0], &pointer1[i * step1], &pointer2[i * step2]))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
            
        Ecs.TableUnlock(it);
        
        return result;
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam>
    public static Entity Find<T0, T1, T2>(Iter it, delegate*<Entity, T0*, T1*, T2*, bool> callback)
    {
        int count = it.Handle->count; Ecs.Assert(it.Handle->count > 0, "No entities returned, use Iter() or Each() without the entity argument instead.");
        
        T0* pointer0 = it.GetPointer<T0>(0); T1* pointer1 = it.GetPointer<T1>(1); T2* pointer2 = it.GetPointer<T2>(2);
            
        Ecs.TableLock(it);
        
        Entity result = default;
            
        if (it.IsLinear())
        {
            for (int i = 0; i < count; i++)
            {
                if (!callback(new Entity(it.Handle->world, it.Handle->entities[i]), &pointer0[i], &pointer1[i], &pointer2[i]))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
        else
        {
            int step0 = it.Step<T0>(0); int step1 = it.Step<T1>(1); int step2 = it.Step<T2>(2);
            for (int i = 0; i < count; i++)
            {
                if (!callback(new Entity(it.Handle->world, it.Handle->entities[i]), &pointer0[i * step0], &pointer1[i * step1], &pointer2[i * step2]))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
            
        Ecs.TableUnlock(it);
        
        return result;
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam>
    public static Entity Find<T0, T1, T2>(Iter it, delegate*<Iter, int, T0*, T1*, T2*, bool> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        T0* pointer0 = it.GetPointer<T0>(0); T1* pointer1 = it.GetPointer<T1>(1); T2* pointer2 = it.GetPointer<T2>(2);
            
        Ecs.TableLock(it);
        
        Entity result = default;
            
        if (it.IsLinear())
        {
            for (int i = 0; i < count; i++)
            {
                if (!callback(it, i, &pointer0[i], &pointer1[i], &pointer2[i]))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
        else
        {
            int step0 = it.Step<T0>(0); int step1 = it.Step<T1>(1); int step2 = it.Step<T2>(2);
            for (int i = 0; i < count; i++)
            {
                if (!callback(it, i, &pointer0[i * step0], &pointer1[i * step1], &pointer2[i * step2]))
                    continue;
                    
                result = new Entity(it.Handle->world, it.Handle->entities[i]);
                break;
            }
        }
            
        Ecs.TableUnlock(it);
        
        return result;
    }
}