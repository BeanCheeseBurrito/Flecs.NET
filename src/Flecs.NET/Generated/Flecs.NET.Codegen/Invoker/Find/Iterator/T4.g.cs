// Find/Iterator/T4.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/Invoker.cs
using System;
using System.Runtime.CompilerServices;
using Flecs.NET.Utilities;
using static Flecs.NET.Bindings.flecs;

namespace Flecs.NET.Core;

public static unsafe partial class Invoker
{
    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam> <typeparam name="T3">The T3 component type.</typeparam>
    public static Entity Find<T0, T1, T2, T3>(Iter it, Ecs.FindRefCallback<T0, T1, T2, T3> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1); FieldData<T2> field2 = it.GetFieldData<T2>(2); FieldData<T3> field3 = it.GetFieldData<T3>(3);
        IterationTechnique flags = it.GetIterationTechnique(4);
            
        Ecs.TableLock(it);
        
        Entity result = default;
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>() || RuntimeHelpers.IsReferenceOrContainsReferences<T2>() || RuntimeHelpers.IsReferenceOrContainsReferences<T3>())
        {
            if (flags == IterationTechnique.None)
                result = Managed(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
        else
        {
           if (flags == IterationTechnique.None)
                result = Unmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
            
        Ecs.TableUnlock(it);
        
        return result;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Unmanaged(Iter it, int count, Ecs.FindRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(ref field0.RefUnmanaged(i), ref field1.RefUnmanaged(i), ref field2.RefUnmanaged(i), ref field3.RefUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedUnmanaged(Iter it, int count, Ecs.FindRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(ref field0.RefSharedUnmanaged(i), ref field1.RefSharedUnmanaged(i), ref field2.RefSharedUnmanaged(i), ref field3.RefSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseUnmanaged(Iter it, int count, Ecs.FindRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(ref field0.RefSparseUnmanaged(i), ref field1.RefSparseUnmanaged(i), ref field2.RefSparseUnmanaged(i), ref field3.RefSparseUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedUnmanaged(Iter it, int count, Ecs.FindRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(ref field0.RefSparseSharedUnmanaged(i), ref field1.RefSparseSharedUnmanaged(i), ref field2.RefSparseSharedUnmanaged(i), ref field3.RefSparseSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Managed(Iter it, int count, Ecs.FindRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(ref field0.RefManaged(i), ref field1.RefManaged(i), ref field2.RefManaged(i), ref field3.RefManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedManaged(Iter it, int count, Ecs.FindRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(ref field0.RefSharedManaged(i), ref field1.RefSharedManaged(i), ref field2.RefSharedManaged(i), ref field3.RefSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseManaged(Iter it, int count, Ecs.FindRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(ref field0.RefSparseManaged(i), ref field1.RefSparseManaged(i), ref field2.RefSparseManaged(i), ref field3.RefSparseManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedManaged(Iter it, int count, Ecs.FindRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(ref field0.RefSparseSharedManaged(i), ref field1.RefSparseSharedManaged(i), ref field2.RefSparseSharedManaged(i), ref field3.RefSparseSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam> <typeparam name="T3">The T3 component type.</typeparam>
    public static Entity Find<T0, T1, T2, T3>(Iter it, Ecs.FindEntityRefCallback<T0, T1, T2, T3> callback)
    {
        int count = it.Handle->count; Ecs.Assert(it.Handle->count > 0, "No entities returned, use Iter() or Each() without the entity argument instead.");
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1); FieldData<T2> field2 = it.GetFieldData<T2>(2); FieldData<T3> field3 = it.GetFieldData<T3>(3);
        IterationTechnique flags = it.GetIterationTechnique(4);
            
        Ecs.TableLock(it);
        
        Entity result = default;
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>() || RuntimeHelpers.IsReferenceOrContainsReferences<T2>() || RuntimeHelpers.IsReferenceOrContainsReferences<T3>())
        {
            if (flags == IterationTechnique.None)
                result = Managed(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
        else
        {
           if (flags == IterationTechnique.None)
                result = Unmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
            
        Ecs.TableUnlock(it);
        
        return result;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Unmanaged(Iter it, int count, Ecs.FindEntityRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefUnmanaged(i), ref field1.RefUnmanaged(i), ref field2.RefUnmanaged(i), ref field3.RefUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedUnmanaged(Iter it, int count, Ecs.FindEntityRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSharedUnmanaged(i), ref field1.RefSharedUnmanaged(i), ref field2.RefSharedUnmanaged(i), ref field3.RefSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseUnmanaged(Iter it, int count, Ecs.FindEntityRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSparseUnmanaged(i), ref field1.RefSparseUnmanaged(i), ref field2.RefSparseUnmanaged(i), ref field3.RefSparseUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedUnmanaged(Iter it, int count, Ecs.FindEntityRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSparseSharedUnmanaged(i), ref field1.RefSparseSharedUnmanaged(i), ref field2.RefSparseSharedUnmanaged(i), ref field3.RefSparseSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Managed(Iter it, int count, Ecs.FindEntityRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefManaged(i), ref field1.RefManaged(i), ref field2.RefManaged(i), ref field3.RefManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedManaged(Iter it, int count, Ecs.FindEntityRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSharedManaged(i), ref field1.RefSharedManaged(i), ref field2.RefSharedManaged(i), ref field3.RefSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseManaged(Iter it, int count, Ecs.FindEntityRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSparseManaged(i), ref field1.RefSparseManaged(i), ref field2.RefSparseManaged(i), ref field3.RefSparseManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedManaged(Iter it, int count, Ecs.FindEntityRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSparseSharedManaged(i), ref field1.RefSparseSharedManaged(i), ref field2.RefSparseSharedManaged(i), ref field3.RefSparseSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam> <typeparam name="T3">The T3 component type.</typeparam>
    public static Entity Find<T0, T1, T2, T3>(Iter it, Ecs.FindIterRefCallback<T0, T1, T2, T3> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1); FieldData<T2> field2 = it.GetFieldData<T2>(2); FieldData<T3> field3 = it.GetFieldData<T3>(3);
        IterationTechnique flags = it.GetIterationTechnique(4);
            
        Ecs.TableLock(it);
        
        Entity result = default;
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>() || RuntimeHelpers.IsReferenceOrContainsReferences<T2>() || RuntimeHelpers.IsReferenceOrContainsReferences<T3>())
        {
            if (flags == IterationTechnique.None)
                result = Managed(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
        else
        {
           if (flags == IterationTechnique.None)
                result = Unmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
            
        Ecs.TableUnlock(it);
        
        return result;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Unmanaged(Iter it, int count, Ecs.FindIterRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, ref field0.RefUnmanaged(i), ref field1.RefUnmanaged(i), ref field2.RefUnmanaged(i), ref field3.RefUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedUnmanaged(Iter it, int count, Ecs.FindIterRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, ref field0.RefSharedUnmanaged(i), ref field1.RefSharedUnmanaged(i), ref field2.RefSharedUnmanaged(i), ref field3.RefSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseUnmanaged(Iter it, int count, Ecs.FindIterRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, ref field0.RefSparseUnmanaged(i), ref field1.RefSparseUnmanaged(i), ref field2.RefSparseUnmanaged(i), ref field3.RefSparseUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedUnmanaged(Iter it, int count, Ecs.FindIterRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, ref field0.RefSparseSharedUnmanaged(i), ref field1.RefSparseSharedUnmanaged(i), ref field2.RefSparseSharedUnmanaged(i), ref field3.RefSparseSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Managed(Iter it, int count, Ecs.FindIterRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, ref field0.RefManaged(i), ref field1.RefManaged(i), ref field2.RefManaged(i), ref field3.RefManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedManaged(Iter it, int count, Ecs.FindIterRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, ref field0.RefSharedManaged(i), ref field1.RefSharedManaged(i), ref field2.RefSharedManaged(i), ref field3.RefSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseManaged(Iter it, int count, Ecs.FindIterRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, ref field0.RefSparseManaged(i), ref field1.RefSparseManaged(i), ref field2.RefSparseManaged(i), ref field3.RefSparseManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedManaged(Iter it, int count, Ecs.FindIterRefCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, ref field0.RefSparseSharedManaged(i), ref field1.RefSparseSharedManaged(i), ref field2.RefSparseSharedManaged(i), ref field3.RefSparseSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam> <typeparam name="T3">The T3 component type.</typeparam>
    public static Entity Find<T0, T1, T2, T3>(Iter it, delegate*<ref T0, ref T1, ref T2, ref T3, bool> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1); FieldData<T2> field2 = it.GetFieldData<T2>(2); FieldData<T3> field3 = it.GetFieldData<T3>(3);
        IterationTechnique flags = it.GetIterationTechnique(4);
            
        Ecs.TableLock(it);
        
        Entity result = default;
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>() || RuntimeHelpers.IsReferenceOrContainsReferences<T2>() || RuntimeHelpers.IsReferenceOrContainsReferences<T3>())
        {
            if (flags == IterationTechnique.None)
                result = Managed(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
        else
        {
           if (flags == IterationTechnique.None)
                result = Unmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
            
        Ecs.TableUnlock(it);
        
        return result;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Unmanaged(Iter it, int count, delegate*<ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(ref field0.RefUnmanaged(i), ref field1.RefUnmanaged(i), ref field2.RefUnmanaged(i), ref field3.RefUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedUnmanaged(Iter it, int count, delegate*<ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(ref field0.RefSharedUnmanaged(i), ref field1.RefSharedUnmanaged(i), ref field2.RefSharedUnmanaged(i), ref field3.RefSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseUnmanaged(Iter it, int count, delegate*<ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(ref field0.RefSparseUnmanaged(i), ref field1.RefSparseUnmanaged(i), ref field2.RefSparseUnmanaged(i), ref field3.RefSparseUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedUnmanaged(Iter it, int count, delegate*<ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(ref field0.RefSparseSharedUnmanaged(i), ref field1.RefSparseSharedUnmanaged(i), ref field2.RefSparseSharedUnmanaged(i), ref field3.RefSparseSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Managed(Iter it, int count, delegate*<ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(ref field0.RefManaged(i), ref field1.RefManaged(i), ref field2.RefManaged(i), ref field3.RefManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedManaged(Iter it, int count, delegate*<ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(ref field0.RefSharedManaged(i), ref field1.RefSharedManaged(i), ref field2.RefSharedManaged(i), ref field3.RefSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseManaged(Iter it, int count, delegate*<ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(ref field0.RefSparseManaged(i), ref field1.RefSparseManaged(i), ref field2.RefSparseManaged(i), ref field3.RefSparseManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedManaged(Iter it, int count, delegate*<ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(ref field0.RefSparseSharedManaged(i), ref field1.RefSparseSharedManaged(i), ref field2.RefSparseSharedManaged(i), ref field3.RefSparseSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam> <typeparam name="T3">The T3 component type.</typeparam>
    public static Entity Find<T0, T1, T2, T3>(Iter it, delegate*<Entity, ref T0, ref T1, ref T2, ref T3, bool> callback)
    {
        int count = it.Handle->count; Ecs.Assert(it.Handle->count > 0, "No entities returned, use Iter() or Each() without the entity argument instead.");
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1); FieldData<T2> field2 = it.GetFieldData<T2>(2); FieldData<T3> field3 = it.GetFieldData<T3>(3);
        IterationTechnique flags = it.GetIterationTechnique(4);
            
        Ecs.TableLock(it);
        
        Entity result = default;
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>() || RuntimeHelpers.IsReferenceOrContainsReferences<T2>() || RuntimeHelpers.IsReferenceOrContainsReferences<T3>())
        {
            if (flags == IterationTechnique.None)
                result = Managed(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
        else
        {
           if (flags == IterationTechnique.None)
                result = Unmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
            
        Ecs.TableUnlock(it);
        
        return result;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Unmanaged(Iter it, int count, delegate*<Entity, ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefUnmanaged(i), ref field1.RefUnmanaged(i), ref field2.RefUnmanaged(i), ref field3.RefUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedUnmanaged(Iter it, int count, delegate*<Entity, ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSharedUnmanaged(i), ref field1.RefSharedUnmanaged(i), ref field2.RefSharedUnmanaged(i), ref field3.RefSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseUnmanaged(Iter it, int count, delegate*<Entity, ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSparseUnmanaged(i), ref field1.RefSparseUnmanaged(i), ref field2.RefSparseUnmanaged(i), ref field3.RefSparseUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedUnmanaged(Iter it, int count, delegate*<Entity, ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSparseSharedUnmanaged(i), ref field1.RefSparseSharedUnmanaged(i), ref field2.RefSparseSharedUnmanaged(i), ref field3.RefSparseSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Managed(Iter it, int count, delegate*<Entity, ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefManaged(i), ref field1.RefManaged(i), ref field2.RefManaged(i), ref field3.RefManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedManaged(Iter it, int count, delegate*<Entity, ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSharedManaged(i), ref field1.RefSharedManaged(i), ref field2.RefSharedManaged(i), ref field3.RefSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseManaged(Iter it, int count, delegate*<Entity, ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSparseManaged(i), ref field1.RefSparseManaged(i), ref field2.RefSparseManaged(i), ref field3.RefSparseManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedManaged(Iter it, int count, delegate*<Entity, ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), ref field0.RefSparseSharedManaged(i), ref field1.RefSparseSharedManaged(i), ref field2.RefSparseSharedManaged(i), ref field3.RefSparseSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam> <typeparam name="T3">The T3 component type.</typeparam>
    public static Entity Find<T0, T1, T2, T3>(Iter it, delegate*<Iter, int, ref T0, ref T1, ref T2, ref T3, bool> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1); FieldData<T2> field2 = it.GetFieldData<T2>(2); FieldData<T3> field3 = it.GetFieldData<T3>(3);
        IterationTechnique flags = it.GetIterationTechnique(4);
            
        Ecs.TableLock(it);
        
        Entity result = default;
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>() || RuntimeHelpers.IsReferenceOrContainsReferences<T2>() || RuntimeHelpers.IsReferenceOrContainsReferences<T3>())
        {
            if (flags == IterationTechnique.None)
                result = Managed(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
        else
        {
           if (flags == IterationTechnique.None)
                result = Unmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
            
        Ecs.TableUnlock(it);
        
        return result;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Unmanaged(Iter it, int count, delegate*<Iter, int, ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, ref field0.RefUnmanaged(i), ref field1.RefUnmanaged(i), ref field2.RefUnmanaged(i), ref field3.RefUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedUnmanaged(Iter it, int count, delegate*<Iter, int, ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, ref field0.RefSharedUnmanaged(i), ref field1.RefSharedUnmanaged(i), ref field2.RefSharedUnmanaged(i), ref field3.RefSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseUnmanaged(Iter it, int count, delegate*<Iter, int, ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, ref field0.RefSparseUnmanaged(i), ref field1.RefSparseUnmanaged(i), ref field2.RefSparseUnmanaged(i), ref field3.RefSparseUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedUnmanaged(Iter it, int count, delegate*<Iter, int, ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, ref field0.RefSparseSharedUnmanaged(i), ref field1.RefSparseSharedUnmanaged(i), ref field2.RefSparseSharedUnmanaged(i), ref field3.RefSparseSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Managed(Iter it, int count, delegate*<Iter, int, ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, ref field0.RefManaged(i), ref field1.RefManaged(i), ref field2.RefManaged(i), ref field3.RefManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedManaged(Iter it, int count, delegate*<Iter, int, ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, ref field0.RefSharedManaged(i), ref field1.RefSharedManaged(i), ref field2.RefSharedManaged(i), ref field3.RefSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseManaged(Iter it, int count, delegate*<Iter, int, ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, ref field0.RefSparseManaged(i), ref field1.RefSparseManaged(i), ref field2.RefSparseManaged(i), ref field3.RefSparseManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedManaged(Iter it, int count, delegate*<Iter, int, ref T0, ref T1, ref T2, ref T3, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, ref field0.RefSparseSharedManaged(i), ref field1.RefSparseSharedManaged(i), ref field2.RefSparseSharedManaged(i), ref field3.RefSparseSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam> <typeparam name="T3">The T3 component type.</typeparam>
    public static Entity Find<T0, T1, T2, T3>(Iter it, Ecs.FindPointerCallback<T0, T1, T2, T3> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1); FieldData<T2> field2 = it.GetFieldData<T2>(2); FieldData<T3> field3 = it.GetFieldData<T3>(3);
        IterationTechnique flags = it.GetIterationTechnique(4);
            
        Ecs.TableLock(it);
        
        Entity result = default;
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>() || RuntimeHelpers.IsReferenceOrContainsReferences<T2>() || RuntimeHelpers.IsReferenceOrContainsReferences<T3>())
        {
            if (flags == IterationTechnique.None)
                result = Managed(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
        else
        {
           if (flags == IterationTechnique.None)
                result = Unmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
            
        Ecs.TableUnlock(it);
        
        return result;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Unmanaged(Iter it, int count, Ecs.FindPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(field0.PointerUnmanaged(i), field1.PointerUnmanaged(i), field2.PointerUnmanaged(i), field3.PointerUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedUnmanaged(Iter it, int count, Ecs.FindPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(field0.PointerSharedUnmanaged(i), field1.PointerSharedUnmanaged(i), field2.PointerSharedUnmanaged(i), field3.PointerSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseUnmanaged(Iter it, int count, Ecs.FindPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(field0.PointerSparseUnmanaged(i), field1.PointerSparseUnmanaged(i), field2.PointerSparseUnmanaged(i), field3.PointerSparseUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedUnmanaged(Iter it, int count, Ecs.FindPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(field0.PointerSparseSharedUnmanaged(i), field1.PointerSparseSharedUnmanaged(i), field2.PointerSparseSharedUnmanaged(i), field3.PointerSparseSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Managed(Iter it, int count, Ecs.FindPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(field0.PointerManaged(i), field1.PointerManaged(i), field2.PointerManaged(i), field3.PointerManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedManaged(Iter it, int count, Ecs.FindPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(field0.PointerSharedManaged(i), field1.PointerSharedManaged(i), field2.PointerSharedManaged(i), field3.PointerSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseManaged(Iter it, int count, Ecs.FindPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(field0.PointerSparseManaged(i), field1.PointerSparseManaged(i), field2.PointerSparseManaged(i), field3.PointerSparseManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedManaged(Iter it, int count, Ecs.FindPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(field0.PointerSparseSharedManaged(i), field1.PointerSparseSharedManaged(i), field2.PointerSparseSharedManaged(i), field3.PointerSparseSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam> <typeparam name="T3">The T3 component type.</typeparam>
    public static Entity Find<T0, T1, T2, T3>(Iter it, Ecs.FindEntityPointerCallback<T0, T1, T2, T3> callback)
    {
        int count = it.Handle->count; Ecs.Assert(it.Handle->count > 0, "No entities returned, use Iter() or Each() without the entity argument instead.");
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1); FieldData<T2> field2 = it.GetFieldData<T2>(2); FieldData<T3> field3 = it.GetFieldData<T3>(3);
        IterationTechnique flags = it.GetIterationTechnique(4);
            
        Ecs.TableLock(it);
        
        Entity result = default;
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>() || RuntimeHelpers.IsReferenceOrContainsReferences<T2>() || RuntimeHelpers.IsReferenceOrContainsReferences<T3>())
        {
            if (flags == IterationTechnique.None)
                result = Managed(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
        else
        {
           if (flags == IterationTechnique.None)
                result = Unmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
            
        Ecs.TableUnlock(it);
        
        return result;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Unmanaged(Iter it, int count, Ecs.FindEntityPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerUnmanaged(i), field1.PointerUnmanaged(i), field2.PointerUnmanaged(i), field3.PointerUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedUnmanaged(Iter it, int count, Ecs.FindEntityPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSharedUnmanaged(i), field1.PointerSharedUnmanaged(i), field2.PointerSharedUnmanaged(i), field3.PointerSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseUnmanaged(Iter it, int count, Ecs.FindEntityPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSparseUnmanaged(i), field1.PointerSparseUnmanaged(i), field2.PointerSparseUnmanaged(i), field3.PointerSparseUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedUnmanaged(Iter it, int count, Ecs.FindEntityPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSparseSharedUnmanaged(i), field1.PointerSparseSharedUnmanaged(i), field2.PointerSparseSharedUnmanaged(i), field3.PointerSparseSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Managed(Iter it, int count, Ecs.FindEntityPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerManaged(i), field1.PointerManaged(i), field2.PointerManaged(i), field3.PointerManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedManaged(Iter it, int count, Ecs.FindEntityPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSharedManaged(i), field1.PointerSharedManaged(i), field2.PointerSharedManaged(i), field3.PointerSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseManaged(Iter it, int count, Ecs.FindEntityPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSparseManaged(i), field1.PointerSparseManaged(i), field2.PointerSparseManaged(i), field3.PointerSparseManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedManaged(Iter it, int count, Ecs.FindEntityPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSparseSharedManaged(i), field1.PointerSparseSharedManaged(i), field2.PointerSparseSharedManaged(i), field3.PointerSparseSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam> <typeparam name="T3">The T3 component type.</typeparam>
    public static Entity Find<T0, T1, T2, T3>(Iter it, Ecs.FindIterPointerCallback<T0, T1, T2, T3> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1); FieldData<T2> field2 = it.GetFieldData<T2>(2); FieldData<T3> field3 = it.GetFieldData<T3>(3);
        IterationTechnique flags = it.GetIterationTechnique(4);
            
        Ecs.TableLock(it);
        
        Entity result = default;
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>() || RuntimeHelpers.IsReferenceOrContainsReferences<T2>() || RuntimeHelpers.IsReferenceOrContainsReferences<T3>())
        {
            if (flags == IterationTechnique.None)
                result = Managed(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
        else
        {
           if (flags == IterationTechnique.None)
                result = Unmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
            
        Ecs.TableUnlock(it);
        
        return result;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Unmanaged(Iter it, int count, Ecs.FindIterPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, field0.PointerUnmanaged(i), field1.PointerUnmanaged(i), field2.PointerUnmanaged(i), field3.PointerUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedUnmanaged(Iter it, int count, Ecs.FindIterPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, field0.PointerSharedUnmanaged(i), field1.PointerSharedUnmanaged(i), field2.PointerSharedUnmanaged(i), field3.PointerSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseUnmanaged(Iter it, int count, Ecs.FindIterPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, field0.PointerSparseUnmanaged(i), field1.PointerSparseUnmanaged(i), field2.PointerSparseUnmanaged(i), field3.PointerSparseUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedUnmanaged(Iter it, int count, Ecs.FindIterPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, field0.PointerSparseSharedUnmanaged(i), field1.PointerSparseSharedUnmanaged(i), field2.PointerSparseSharedUnmanaged(i), field3.PointerSparseSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Managed(Iter it, int count, Ecs.FindIterPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, field0.PointerManaged(i), field1.PointerManaged(i), field2.PointerManaged(i), field3.PointerManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedManaged(Iter it, int count, Ecs.FindIterPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, field0.PointerSharedManaged(i), field1.PointerSharedManaged(i), field2.PointerSharedManaged(i), field3.PointerSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseManaged(Iter it, int count, Ecs.FindIterPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, field0.PointerSparseManaged(i), field1.PointerSparseManaged(i), field2.PointerSparseManaged(i), field3.PointerSparseManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedManaged(Iter it, int count, Ecs.FindIterPointerCallback<T0, T1, T2, T3> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, field0.PointerSparseSharedManaged(i), field1.PointerSparseSharedManaged(i), field2.PointerSparseSharedManaged(i), field3.PointerSparseSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam> <typeparam name="T3">The T3 component type.</typeparam>
    public static Entity Find<T0, T1, T2, T3>(Iter it, delegate*<T0*, T1*, T2*, T3*, bool> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1); FieldData<T2> field2 = it.GetFieldData<T2>(2); FieldData<T3> field3 = it.GetFieldData<T3>(3);
        IterationTechnique flags = it.GetIterationTechnique(4);
            
        Ecs.TableLock(it);
        
        Entity result = default;
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>() || RuntimeHelpers.IsReferenceOrContainsReferences<T2>() || RuntimeHelpers.IsReferenceOrContainsReferences<T3>())
        {
            if (flags == IterationTechnique.None)
                result = Managed(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
        else
        {
           if (flags == IterationTechnique.None)
                result = Unmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
            
        Ecs.TableUnlock(it);
        
        return result;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Unmanaged(Iter it, int count, delegate*<T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(field0.PointerUnmanaged(i), field1.PointerUnmanaged(i), field2.PointerUnmanaged(i), field3.PointerUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedUnmanaged(Iter it, int count, delegate*<T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(field0.PointerSharedUnmanaged(i), field1.PointerSharedUnmanaged(i), field2.PointerSharedUnmanaged(i), field3.PointerSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseUnmanaged(Iter it, int count, delegate*<T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(field0.PointerSparseUnmanaged(i), field1.PointerSparseUnmanaged(i), field2.PointerSparseUnmanaged(i), field3.PointerSparseUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedUnmanaged(Iter it, int count, delegate*<T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(field0.PointerSparseSharedUnmanaged(i), field1.PointerSparseSharedUnmanaged(i), field2.PointerSparseSharedUnmanaged(i), field3.PointerSparseSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Managed(Iter it, int count, delegate*<T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(field0.PointerManaged(i), field1.PointerManaged(i), field2.PointerManaged(i), field3.PointerManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedManaged(Iter it, int count, delegate*<T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(field0.PointerSharedManaged(i), field1.PointerSharedManaged(i), field2.PointerSharedManaged(i), field3.PointerSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseManaged(Iter it, int count, delegate*<T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(field0.PointerSparseManaged(i), field1.PointerSparseManaged(i), field2.PointerSparseManaged(i), field3.PointerSparseManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedManaged(Iter it, int count, delegate*<T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(field0.PointerSparseSharedManaged(i), field1.PointerSparseSharedManaged(i), field2.PointerSparseSharedManaged(i), field3.PointerSparseSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam> <typeparam name="T3">The T3 component type.</typeparam>
    public static Entity Find<T0, T1, T2, T3>(Iter it, delegate*<Entity, T0*, T1*, T2*, T3*, bool> callback)
    {
        int count = it.Handle->count; Ecs.Assert(it.Handle->count > 0, "No entities returned, use Iter() or Each() without the entity argument instead.");
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1); FieldData<T2> field2 = it.GetFieldData<T2>(2); FieldData<T3> field3 = it.GetFieldData<T3>(3);
        IterationTechnique flags = it.GetIterationTechnique(4);
            
        Ecs.TableLock(it);
        
        Entity result = default;
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>() || RuntimeHelpers.IsReferenceOrContainsReferences<T2>() || RuntimeHelpers.IsReferenceOrContainsReferences<T3>())
        {
            if (flags == IterationTechnique.None)
                result = Managed(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
        else
        {
           if (flags == IterationTechnique.None)
                result = Unmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
            
        Ecs.TableUnlock(it);
        
        return result;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Unmanaged(Iter it, int count, delegate*<Entity, T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerUnmanaged(i), field1.PointerUnmanaged(i), field2.PointerUnmanaged(i), field3.PointerUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedUnmanaged(Iter it, int count, delegate*<Entity, T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSharedUnmanaged(i), field1.PointerSharedUnmanaged(i), field2.PointerSharedUnmanaged(i), field3.PointerSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseUnmanaged(Iter it, int count, delegate*<Entity, T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSparseUnmanaged(i), field1.PointerSparseUnmanaged(i), field2.PointerSparseUnmanaged(i), field3.PointerSparseUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedUnmanaged(Iter it, int count, delegate*<Entity, T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSparseSharedUnmanaged(i), field1.PointerSparseSharedUnmanaged(i), field2.PointerSparseSharedUnmanaged(i), field3.PointerSparseSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Managed(Iter it, int count, delegate*<Entity, T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerManaged(i), field1.PointerManaged(i), field2.PointerManaged(i), field3.PointerManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedManaged(Iter it, int count, delegate*<Entity, T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSharedManaged(i), field1.PointerSharedManaged(i), field2.PointerSharedManaged(i), field3.PointerSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseManaged(Iter it, int count, delegate*<Entity, T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSparseManaged(i), field1.PointerSparseManaged(i), field2.PointerSparseManaged(i), field3.PointerSparseManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedManaged(Iter it, int count, delegate*<Entity, T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(new Entity(it.Handle->world, it.Handle->entities[i]), field0.PointerSparseSharedManaged(i), field1.PointerSparseSharedManaged(i), field2.PointerSparseSharedManaged(i), field3.PointerSparseSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }
    }

    /// <summary>
    ///     Iterates over an Iter object using the provided .Find callback.
    /// </summary>
    /// <param name="it">The iter object.</param>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam> <typeparam name="T3">The T3 component type.</typeparam>
    public static Entity Find<T0, T1, T2, T3>(Iter it, delegate*<Iter, int, T0*, T1*, T2*, T3*, bool> callback)
    {
        int count = it.Handle->count == 0 && it.Handle->table == null ? 1 : it.Handle->count;
        
        FieldData<T0> field0 = it.GetFieldData<T0>(0); FieldData<T1> field1 = it.GetFieldData<T1>(1); FieldData<T2> field2 = it.GetFieldData<T2>(2); FieldData<T3> field3 = it.GetFieldData<T3>(3);
        IterationTechnique flags = it.GetIterationTechnique(4);
            
        Ecs.TableLock(it);
        
        Entity result = default;
        
        if (RuntimeHelpers.IsReferenceOrContainsReferences<T0>() || RuntimeHelpers.IsReferenceOrContainsReferences<T1>() || RuntimeHelpers.IsReferenceOrContainsReferences<T2>() || RuntimeHelpers.IsReferenceOrContainsReferences<T3>())
        {
            if (flags == IterationTechnique.None)
                result = Managed(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedManaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
        else
        {
           if (flags == IterationTechnique.None)
                result = Unmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Shared)
                result = SharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == IterationTechnique.Sparse)
                result = SparseUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
            else if (flags == (IterationTechnique.Sparse | IterationTechnique.Shared))
                result = SparseSharedUnmanaged(it, count, callback, ref field0, ref field1, ref field2, ref field3);
        }
            
        Ecs.TableUnlock(it);
        
        return result;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Unmanaged(Iter it, int count, delegate*<Iter, int, T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, field0.PointerUnmanaged(i), field1.PointerUnmanaged(i), field2.PointerUnmanaged(i), field3.PointerUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedUnmanaged(Iter it, int count, delegate*<Iter, int, T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, field0.PointerSharedUnmanaged(i), field1.PointerSharedUnmanaged(i), field2.PointerSharedUnmanaged(i), field3.PointerSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseUnmanaged(Iter it, int count, delegate*<Iter, int, T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, field0.PointerSparseUnmanaged(i), field1.PointerSparseUnmanaged(i), field2.PointerSparseUnmanaged(i), field3.PointerSparseUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedUnmanaged(Iter it, int count, delegate*<Iter, int, T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, field0.PointerSparseSharedUnmanaged(i), field1.PointerSparseSharedUnmanaged(i), field2.PointerSparseSharedUnmanaged(i), field3.PointerSparseSharedUnmanaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity Managed(Iter it, int count, delegate*<Iter, int, T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, field0.PointerManaged(i), field1.PointerManaged(i), field2.PointerManaged(i), field3.PointerManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SharedManaged(Iter it, int count, delegate*<Iter, int, T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, field0.PointerSharedManaged(i), field1.PointerSharedManaged(i), field2.PointerSharedManaged(i), field3.PointerSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseManaged(Iter it, int count, delegate*<Iter, int, T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, field0.PointerSparseManaged(i), field1.PointerSparseManaged(i), field2.PointerSparseManaged(i), field3.PointerSparseManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static Entity SparseSharedManaged(Iter it, int count, delegate*<Iter, int, T0*, T1*, T2*, T3*, bool> callback, ref FieldData<T0> field0, ref FieldData<T1> field1, ref FieldData<T2> field2, ref FieldData<T3> field3)
        {
            for (int i = 0; i < count; i++)
            {
                if (callback(it, i, field0.PointerSparseSharedManaged(i), field1.PointerSparseSharedManaged(i), field2.PointerSparseSharedManaged(i), field3.PointerSparseSharedManaged(i)))
                    return new Entity(it.Handle->world, it.Handle->entities[i]);
            }
                
            return default;
        }
    }
}