// RoutineBuilder.NodeBuilder/T3.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/RoutineBuilder.cs
using System;
using Flecs.NET.Core.BindingContext;

namespace Flecs.NET.Core;

public unsafe partial struct RoutineBuilder<T0, T1, T2>
{
    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Run(Ecs.RunCallback callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(true);
        return SetRun(callback, Pointers<T0, T1, T2>.RunCallbackDelegate).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Run(delegate*<Iter, void> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(true);
        return SetRun((IntPtr)callback, Pointers<T0, T1, T2>.RunCallbackPointer).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Iter(Ecs.IterFieldCallback<T0, T1, T2> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(true);
        return SetCallback(callback, Pointers<T0, T1, T2>.IterFieldCallbackDelegate).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Iter(Ecs.IterSpanCallback<T0, T1, T2> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(false);
        return SetCallback(callback, Pointers<T0, T1, T2>.IterSpanCallbackDelegate).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Iter(Ecs.IterPointerCallback<T0, T1, T2> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(false);
        return SetCallback(callback, Pointers<T0, T1, T2>.IterPointerCallbackDelegate).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Iter(delegate*<Iter, Field<T0>, Field<T1>, Field<T2>, void> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(true);
        return SetCallback((IntPtr)callback, Pointers<T0, T1, T2>.IterFieldCallbackPointer).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Iter(delegate*<Iter, Span<T0>, Span<T1>, Span<T2>, void> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(false);
        return SetCallback((IntPtr)callback, Pointers<T0, T1, T2>.IterSpanCallbackPointer).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Iter(delegate*<Iter, T0*, T1*, T2*, void> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(false);
        return SetCallback((IntPtr)callback, Pointers<T0, T1, T2>.IterPointerCallbackPointer).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Each(Ecs.EachRefCallback<T0, T1, T2> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(true);
        return SetCallback(callback, Pointers<T0, T1, T2>.EachRefCallbackDelegate).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Each(Ecs.EachEntityRefCallback<T0, T1, T2> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(true);
        return SetCallback(callback, Pointers<T0, T1, T2>.EachEntityRefCallbackDelegate).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Each(Ecs.EachIterRefCallback<T0, T1, T2> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(true);
        return SetCallback(callback, Pointers<T0, T1, T2>.EachIterRefCallbackDelegate).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Each(delegate*<ref T0, ref T1, ref T2, void> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(true);
        return SetCallback((IntPtr)callback, Pointers<T0, T1, T2>.EachRefCallbackPointer).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Each(delegate*<Entity, ref T0, ref T1, ref T2, void> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(true);
        return SetCallback((IntPtr)callback, Pointers<T0, T1, T2>.EachEntityRefCallbackPointer).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Each(delegate*<Iter, int, ref T0, ref T1, ref T2, void> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(true);
        return SetCallback((IntPtr)callback, Pointers<T0, T1, T2>.EachIterRefCallbackPointer).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Each(Ecs.EachPointerCallback<T0, T1, T2> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(false);
        return SetCallback(callback, Pointers<T0, T1, T2>.EachPointerCallbackDelegate).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Each(Ecs.EachEntityPointerCallback<T0, T1, T2> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(false);
        return SetCallback(callback, Pointers<T0, T1, T2>.EachEntityPointerCallbackDelegate).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Each(Ecs.EachIterPointerCallback<T0, T1, T2> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(false);
        return SetCallback(callback, Pointers<T0, T1, T2>.EachIterPointerCallbackDelegate).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Each(delegate*<T0*, T1*, T2*, void> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(false);
        return SetCallback((IntPtr)callback, Pointers<T0, T1, T2>.EachPointerCallbackPointer).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Each(delegate*<Entity, T0*, T1*, T2*, void> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(false);
        return SetCallback((IntPtr)callback, Pointers<T0, T1, T2>.EachEntityPointerCallbackPointer).Build();
    }

    /// <summary>
    ///     Creates <see cref="Routine"/> with the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Routine<T0, T1, T2> Each(delegate*<Iter, int, T0*, T1*, T2*, void> callback)
    {
        TypeHelper<T0, T1, T2>.AssertReferenceTypes(false);
        return SetCallback((IntPtr)callback, Pointers<T0, T1, T2>.EachIterPointerCallbackPointer).Build();
    }
}