// RoutineBuilder/T7.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/RoutineBuilder.cs
#nullable enable

using System;
using static Flecs.NET.Bindings.flecs;

namespace Flecs.NET.Core;

/// <summary>
///     A type-safe wrapper over <see cref="RoutineBuilder"/> that takes 7 type arguments.
/// </summary>
/// <typeparam name="T0">The T0 component type.</typeparam> <typeparam name="T1">The T1 component type.</typeparam> <typeparam name="T2">The T2 component type.</typeparam> <typeparam name="T3">The T3 component type.</typeparam> <typeparam name="T4">The T4 component type.</typeparam> <typeparam name="T5">The T5 component type.</typeparam> <typeparam name="T6">The T6 component type.</typeparam>
public unsafe partial struct RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> : IDisposable, IEquatable<RoutineBuilder<T0, T1, T2, T3, T4, T5, T6>>, IQueryBuilder<RoutineBuilder<T0, T1, T2, T3, T4, T5, T6>, Routine<T0, T1, T2, T3, T4, T5, T6>>
{
    private RoutineBuilder _routineBuilder;

    /// <inheritdoc cref="RoutineBuilder.World"/>
    public ref ecs_world_t* World => ref _routineBuilder.World;

    /// <inheritdoc cref="RoutineBuilder.Desc"/>
    public ref ecs_system_desc_t Desc => ref _routineBuilder.Desc;

    /// <inheritdoc cref="RoutineBuilder.QueryBuilder"/>
    public ref QueryBuilder QueryBuilder => ref _routineBuilder.QueryBuilder;

    /// <summary>
    ///     Creates a routine builder with the provided routine builder.
    /// </summary>
    /// <param name="routineBuilder">The routine builder.</param>
    public RoutineBuilder(RoutineBuilder routineBuilder)
    {
        TypeHelper<T0, T1, T2, T3, T4, T5, T6>.AssertNoTags();
        _routineBuilder = routineBuilder;
    }

    /// <inheritdoc cref="RoutineBuilder(ecs_world_t*)"/>
    public RoutineBuilder(ecs_world_t* world)
    {
        TypeHelper<T0, T1, T2, T3, T4, T5, T6>.AssertNoTags();
        _routineBuilder = new RoutineBuilder(world).With<T0>().With<T1>().With<T2>().With<T3>().With<T4>().With<T5>().With<T6>();
    }

    /// <inheritdoc cref="RoutineBuilder(ecs_world_t*, string)"/>
    public RoutineBuilder(ecs_world_t* world, string name)
    {
        TypeHelper<T0, T1, T2, T3, T4, T5, T6>.AssertNoTags();
        _routineBuilder = new RoutineBuilder(world, name).With<T0>().With<T1>().With<T2>().With<T3>().With<T4>().With<T5>().With<T6>();
    }

    /// <inheritdoc cref="RoutineBuilder.Dispose()"/>
    public void Dispose()
    {
        _routineBuilder.Dispose();
    }

    /// <inheritdoc cref="RoutineBuilder.Kind(ulong)"/>
    public ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> Kind(ulong phase)
    {
        _routineBuilder.Kind(phase);
        return ref this;
    }

    /// <inheritdoc cref="RoutineBuilder.Kind{T}()"/>
    public ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> Kind<T>()
    {
        _routineBuilder.Kind<T>();
        return ref this;
    }

    /// <inheritdoc cref="RoutineBuilder.Kind{T}(T)"/>
    public ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> Kind<T>(T value) where T : Enum
    {
        _routineBuilder.Kind(value);
        return ref this;
    }

    /// <inheritdoc cref="RoutineBuilder.MultiThreaded(bool)"/>
    public ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> MultiThreaded(bool value = true)
    {
        _routineBuilder.MultiThreaded();
        return ref this;
    }

    /// <inheritdoc cref="RoutineBuilder.Immediate(bool)"/>
    public ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> Immediate(bool value = true)
    {
        _routineBuilder.Immediate(value);
        return ref this;
    }
    
    /// <inheritdoc cref="RoutineBuilder.Interval(float)"/>
    public ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> Interval(float interval)
    {
        _routineBuilder.Interval(interval);
        return ref this;
    }

    /// <inheritdoc cref="RoutineBuilder.Rate(ulong, int)"/>
    public ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> Rate(ulong tickSource, int rate)
    {
        _routineBuilder.Rate(tickSource, rate);
        return ref this;
    }

    /// <inheritdoc cref="RoutineBuilder.Rate(int)"/>
    public ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> Rate(int rate)
    {
        _routineBuilder.Rate(rate);
        return ref this;
    }

    /// <inheritdoc cref="RoutineBuilder.TickSource(ulong)"/>
    public ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> TickSource(ulong tickSource)
    {
        _routineBuilder.TickSource(tickSource);
        return ref this;
    }

    /// <inheritdoc cref="RoutineBuilder.TickSource{T}()"/>
    public ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> TickSource<T>()
    {
        _routineBuilder.TickSource<T>();
        return ref this;
    }

    /// <inheritdoc cref="RoutineBuilder.Ctx"/>
    public ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> Ctx(void* ctx)
    {
        _routineBuilder.Ctx(ctx);
        return ref this;
    }
    
    /// <inheritdoc cref="RoutineBuilder.Run(System.Action)"/>
    public Routine<T0, T1, T2, T3, T4, T5, T6> Run(Action callback)
    {
        return new Routine<T0, T1, T2, T3, T4, T5, T6>(_routineBuilder.Run(callback));
    }
    
    /// <inheritdoc cref="RoutineBuilder.Run(System.Action)"/>
    public Routine<T0, T1, T2, T3, T4, T5, T6> Run(delegate*<void> callback)
    {
        return new Routine<T0, T1, T2, T3, T4, T5, T6>(_routineBuilder.Run(callback));
    }

    /// <inheritdoc cref="RoutineBuilder.Run(Ecs.RunDelegateCallback)"/>
    public ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> Run(Ecs.RunDelegateCallback callback)
    {
        _routineBuilder.Run(callback);
        return ref this;
    }

    /// <inheritdoc cref="RoutineBuilder.Run(Ecs.RunDelegateCallback)"/>
    public ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> Run(delegate*<Iter, Action<Iter>, void> callback)
    {
        _routineBuilder.Run(callback);
        return ref this;
    }

    /// <inheritdoc cref="RoutineBuilder.Run(Ecs.RunPointerCallback)"/>
    public ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> Run(Ecs.RunPointerCallback callback)
    {
        _routineBuilder.Run(callback);
        return ref this;
    }

    /// <inheritdoc cref="RoutineBuilder.Run(Ecs.RunPointerCallback)"/>
    public ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> Run(delegate*<Iter, delegate*<Iter, void>, void> callback)
    {
        _routineBuilder.Run(callback);
        return ref this;
    }

    internal ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> SetCallback<T>(T callback, IntPtr invoker) where T : Delegate
    {
        _routineBuilder.SetCallback(callback, invoker);
        return ref this;
    }

    internal ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> SetCallback(IntPtr callback, IntPtr invoker)
    {
        _routineBuilder.SetCallback(callback, invoker);
        return ref this;
    }

    internal ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> SetRun<T>(T callback, IntPtr invoker) where T : Delegate
    {
        _routineBuilder.SetRun(callback, invoker);
        return ref this;
    }

    internal ref RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> SetRun(IntPtr callback, IntPtr invoker)
    {
        _routineBuilder.SetRun(callback, invoker);
        return ref this;
    }

    internal Routine<T0, T1, T2, T3, T4, T5, T6> Build()
    {
        return new Routine<T0, T1, T2, T3, T4, T5, T6>(_routineBuilder.Build());
    }
    
    Routine<T0, T1, T2, T3, T4, T5, T6> IQueryBuilder<RoutineBuilder<T0, T1, T2, T3, T4, T5, T6>, Routine<T0, T1, T2, T3, T4, T5, T6>>.Build()
    {
        return Build();
    }

    /// <inheritdoc cref="RoutineBuilder.Equals(RoutineBuilder)"/>
    public bool Equals(RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> other)
    {
        return _routineBuilder == other._routineBuilder;
    }

    /// <inheritdoc cref="RoutineBuilder.Equals(object)"/>
    public override bool Equals(object? obj)
    {
        return obj is RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> other && Equals(other);
    }

    /// <inheritdoc cref="RoutineBuilder.GetHashCode()"/>
    public override int GetHashCode()
    {
        return HashCode.Combine(Desc.GetHashCode(), QueryBuilder.GetHashCode());
    }

    /// <inheritdoc cref="RoutineBuilder.op_Equality"/>
    public static bool operator ==(RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> left, RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> right)
    {
        return left.Equals(right);
    }

    /// <inheritdoc cref="RoutineBuilder.op_Inequality"/>
    public static bool operator !=(RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> left, RoutineBuilder<T0, T1, T2, T3, T4, T5, T6> right)
    {
        return !(left == right);
    }
}