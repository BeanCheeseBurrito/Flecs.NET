// Each/T1.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/World.cs
namespace Flecs.NET.Core;
             
public unsafe partial struct World
{
    /// <summary>
    ///     Iterates over the world using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam>
    public void Each<T0>(Ecs.EachRefCallback<T0> callback) 
    {
        using Query query = Query<T0>();
        query.Each(callback);   
    }

    /// <summary>
    ///     Iterates over the world using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam>
    public void Each<T0>(Ecs.EachEntityRefCallback<T0> callback) 
    {
        using Query query = Query<T0>();
        query.Each(callback);   
    }

    /// <summary>
    ///     Iterates over the world using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam>
    public void Each<T0>(Ecs.EachIterRefCallback<T0> callback) 
    {
        using Query query = Query<T0>();
        query.Each(callback);   
    }

    /// <summary>
    ///     Iterates over the world using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam>
    public void Each<T0>(delegate*<ref T0, void> callback) 
    {
        using Query query = Query<T0>();
        query.Each(callback);   
    }

    /// <summary>
    ///     Iterates over the world using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam>
    public void Each<T0>(delegate*<Entity, ref T0, void> callback) 
    {
        using Query query = Query<T0>();
        query.Each(callback);   
    }

    /// <summary>
    ///     Iterates over the world using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam>
    public void Each<T0>(delegate*<Iter, int, ref T0, void> callback) 
    {
        using Query query = Query<T0>();
        query.Each(callback);   
    }

    /// <summary>
    ///     Iterates over the world using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam>
    public void Each<T0>(Ecs.EachPointerCallback<T0> callback) where T0 : unmanaged
    {
        using Query query = Query<T0>();
        query.Each(callback);   
    }

    /// <summary>
    ///     Iterates over the world using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam>
    public void Each<T0>(Ecs.EachEntityPointerCallback<T0> callback) where T0 : unmanaged
    {
        using Query query = Query<T0>();
        query.Each(callback);   
    }

    /// <summary>
    ///     Iterates over the world using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam>
    public void Each<T0>(Ecs.EachIterPointerCallback<T0> callback) where T0 : unmanaged
    {
        using Query query = Query<T0>();
        query.Each(callback);   
    }

    /// <summary>
    ///     Iterates over the world using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam>
    public void Each<T0>(delegate*<T0*, void> callback) where T0 : unmanaged
    {
        using Query query = Query<T0>();
        query.Each(callback);   
    }

    /// <summary>
    ///     Iterates over the world using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam>
    public void Each<T0>(delegate*<Entity, T0*, void> callback) where T0 : unmanaged
    {
        using Query query = Query<T0>();
        query.Each(callback);   
    }

    /// <summary>
    ///     Iterates over the world using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The T0 component type.</typeparam>
    public void Each<T0>(delegate*<Iter, int, T0*, void> callback) where T0 : unmanaged
    {
        using Query query = Query<T0>();
        query.Each(callback);   
    }
}