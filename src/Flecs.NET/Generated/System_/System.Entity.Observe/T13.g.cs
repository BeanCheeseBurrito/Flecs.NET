// /_/src/Flecs.NET/Generated/System_/System.Entity.Observe/T13.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/System_.cs
#pragma warning disable CS0693 // Type parameter has the same name as the type parameter from outer type

using System;

namespace Flecs.NET.Core;

public unsafe partial struct System<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
{
    /// <inheritdoc cref="IEntity{TEntity}.Observe(ulong, Ecs.ObserveEntityCallback)"/>
    public void Observe(ulong id, Ecs.ObserveCallback callback)
    {
        Ecs.Observe(this, id, callback, &Functions.ObserveCallbackDelegate);
    }
    
    /// <inheritdoc cref="IEntity{TEntity}.Observe{T}(Ecs.ObserveEntityCallback)"/>
    public void Observe<T0>(Ecs.ObserveCallback callback)
    {
        Ecs.Observe(this, Type<T0>.Id(World), callback, &Functions.ObserveCallbackDelegate);
    }

    /// <inheritdoc cref="IEntity{TEntity}.Observe(ulong, Ecs.ObserveEntityCallback)"/>
    public void Observe(ulong id, delegate*<void> callback)
    {
        Ecs.Observe(this, id, callback, &Functions.ObserveCallbackPointer);
    }
    
    /// <inheritdoc cref="IEntity{TEntity}.Observe{T}(Ecs.ObserveEntityCallback)"/>
    public void Observe<T0>(delegate*<void> callback)
    {
        Ecs.Observe(this, Type<T0>.Id(World), callback, &Functions.ObserveCallbackPointer);
    }

    /// <inheritdoc cref="IEntity{TEntity}.Observe(ulong, Ecs.ObserveEntityCallback)"/>
    public void Observe(ulong id, Ecs.ObserveEntityCallback callback)
    {
        Ecs.Observe(this, id, callback, &Functions.ObserveEntityCallbackDelegate);
    }
    
    /// <inheritdoc cref="IEntity{TEntity}.Observe{T}(Ecs.ObserveEntityCallback)"/>
    public void Observe<T0>(Ecs.ObserveEntityCallback callback)
    {
        Ecs.Observe(this, Type<T0>.Id(World), callback, &Functions.ObserveEntityCallbackDelegate);
    }

    /// <inheritdoc cref="IEntity{TEntity}.Observe(ulong, Ecs.ObserveEntityCallback)"/>
    public void Observe(ulong id, delegate*<Entity, void> callback)
    {
        Ecs.Observe(this, id, callback, &Functions.ObserveEntityCallbackPointer);
    }
    
    /// <inheritdoc cref="IEntity{TEntity}.Observe{T}(Ecs.ObserveEntityCallback)"/>
    public void Observe<T0>(delegate*<Entity, void> callback)
    {
        Ecs.Observe(this, Type<T0>.Id(World), callback, &Functions.ObserveEntityCallbackPointer);
    }

    /// <inheritdoc cref="IEntity{TEntity}.Observe{T}(Ecs.ObserveEntityCallback)"/>
    public void Observe<T0>(Ecs.ObserveRefCallback<T0> callback)
    {
        Ecs.Observe(this, Type<T0>.Id(World), callback, &Functions.ObserveRefCallbackDelegate<T0>);
    }

    /// <inheritdoc cref="IEntity{TEntity}.Observe{T}(Ecs.ObserveEntityCallback)"/>
    public void Observe<T0>(delegate*<ref T0, void> callback)
    {
        Ecs.Observe(this, Type<T0>.Id(World), callback, &Functions.ObserveRefCallbackPointer<T0>);
    }

    /// <inheritdoc cref="IEntity{TEntity}.Observe{T}(Ecs.ObserveEntityCallback)"/>
    public void Observe<T0>(Ecs.ObservePointerCallback<T0> callback)
    {
        Ecs.Observe(this, Type<T0>.Id(World), callback, &Functions.ObservePointerCallbackDelegate<T0>);
    }

    /// <inheritdoc cref="IEntity{TEntity}.Observe{T}(Ecs.ObserveEntityCallback)"/>
    public void Observe<T0>(delegate*<T0*, void> callback)
    {
        Ecs.Observe(this, Type<T0>.Id(World), callback, &Functions.ObservePointerCallbackPointer<T0>);
    }

    /// <inheritdoc cref="IEntity{TEntity}.Observe{T}(Ecs.ObserveEntityCallback)"/>
    public void Observe<T0>(Ecs.ObserveEntityRefCallback<T0> callback)
    {
        Ecs.Observe(this, Type<T0>.Id(World), callback, &Functions.ObserveEntityRefCallbackDelegate<T0>);
    }

    /// <inheritdoc cref="IEntity{TEntity}.Observe{T}(Ecs.ObserveEntityCallback)"/>
    public void Observe<T0>(delegate*<Entity, ref T0, void> callback)
    {
        Ecs.Observe(this, Type<T0>.Id(World), callback, &Functions.ObserveEntityRefCallbackPointer<T0>);
    }

    /// <inheritdoc cref="IEntity{TEntity}.Observe{T}(Ecs.ObserveEntityCallback)"/>
    public void Observe<T0>(Ecs.ObserveEntityPointerCallback<T0> callback)
    {
        Ecs.Observe(this, Type<T0>.Id(World), callback, &Functions.ObserveEntityPointerCallbackDelegate<T0>);
    }

    /// <inheritdoc cref="IEntity{TEntity}.Observe{T}(Ecs.ObserveEntityCallback)"/>
    public void Observe<T0>(delegate*<Entity, T0*, void> callback)
    {
        Ecs.Observe(this, Type<T0>.Id(World), callback, &Functions.ObserveEntityPointerCallbackPointer<T0>);
    }
}