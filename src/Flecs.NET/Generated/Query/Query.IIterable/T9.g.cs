// /_/src/Flecs.NET/Generated/Query/Query.IIterable/T9.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/Query.cs
using System;
using Flecs.NET.Core.Invokers;
using Flecs.NET.Utilities;

namespace Flecs.NET.Core;

public unsafe partial struct Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>
{
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(Ecs.RunCallback callback)
    {
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Run<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, RunCallbackDelegate>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(Ecs.RunCallback callback)
    {
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, RunCallbackDelegate>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(delegate*<Iter, void> callback)
    {
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Run<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, RunCallbackPointer>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(delegate*<Iter, void> callback)
    {
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, RunCallbackPointer>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(Ecs.RunDelegateCallback callback)
    {
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Run<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, RunDelegateCallbackDelegate>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(Ecs.RunDelegateCallback callback)
    {
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, RunDelegateCallbackDelegate>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(delegate*<Iter, Action<Iter>, void> callback)
    {
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Run<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, RunDelegateCallbackPointer>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(delegate*<Iter, Action<Iter>, void> callback)
    {
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, RunDelegateCallbackPointer>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(Ecs.RunPointerCallback callback)
    {
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Run<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, RunPointerCallbackDelegate>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(Ecs.RunPointerCallback callback)
    {
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, RunPointerCallbackDelegate>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Run(delegate*<Iter, delegate*<Iter, void>, void> callback)
    {
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Run<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, RunPointerCallbackPointer>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Run callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void RunJob(delegate*<Iter, delegate*<Iter, void>, void> callback)
    {
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, RunPointerCallbackPointer>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Iter(Ecs.IterFieldCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertSparseTypes(Ecs.GetIterableWorld(ref this), true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Iter<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, IterFieldCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void IterJob(Ecs.IterFieldCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, IterFieldCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Iter(delegate*<Iter, Field<T0>, Field<T1>, Field<T2>, Field<T3>, Field<T4>, Field<T5>, Field<T6>, Field<T7>, Field<T8>, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertSparseTypes(Ecs.GetIterableWorld(ref this), true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Iter<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, IterFieldCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void IterJob(delegate*<Iter, Field<T0>, Field<T1>, Field<T2>, Field<T3>, Field<T4>, Field<T5>, Field<T6>, Field<T7>, Field<T8>, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, IterFieldCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Iter(Ecs.IterSpanCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertSparseTypes(Ecs.GetIterableWorld(ref this), true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Iter<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, IterSpanCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void IterJob(Ecs.IterSpanCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, IterSpanCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Iter(delegate*<Iter, Span<T0>, Span<T1>, Span<T2>, Span<T3>, Span<T4>, Span<T5>, Span<T6>, Span<T7>, Span<T8>, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertSparseTypes(Ecs.GetIterableWorld(ref this), true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Iter<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, IterSpanCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void IterJob(delegate*<Iter, Span<T0>, Span<T1>, Span<T2>, Span<T3>, Span<T4>, Span<T5>, Span<T6>, Span<T7>, Span<T8>, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, IterSpanCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Iter(Ecs.IterPointerCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertSparseTypes(Ecs.GetIterableWorld(ref this), true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Iter<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, IterPointerCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void IterJob(Ecs.IterPointerCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, IterPointerCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Iter(delegate*<Iter, T0*, T1*, T2*, T3*, T4*, T5*, T6*, T7*, T8*, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertSparseTypes(Ecs.GetIterableWorld(ref this), true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Iter<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, IterPointerCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Iter callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void IterJob(delegate*<Iter, T0*, T1*, T2*, T3*, T4*, T5*, T6*, T7*, T8*, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, IterPointerCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(Ecs.EachRefCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Each<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachRefCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(Ecs.EachRefCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachRefCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(Ecs.EachEntityRefCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Each<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachEntityRefCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(Ecs.EachEntityRefCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachEntityRefCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(Ecs.EachIterRefCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Each<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachIterRefCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(Ecs.EachIterRefCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachIterRefCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(delegate*<ref T0, ref T1, ref T2, ref T3, ref T4, ref T5, ref T6, ref T7, ref T8, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Each<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachRefCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(delegate*<ref T0, ref T1, ref T2, ref T3, ref T4, ref T5, ref T6, ref T7, ref T8, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachRefCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(delegate*<Entity, ref T0, ref T1, ref T2, ref T3, ref T4, ref T5, ref T6, ref T7, ref T8, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Each<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachEntityRefCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(delegate*<Entity, ref T0, ref T1, ref T2, ref T3, ref T4, ref T5, ref T6, ref T7, ref T8, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachEntityRefCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(delegate*<Iter, int, ref T0, ref T1, ref T2, ref T3, ref T4, ref T5, ref T6, ref T7, ref T8, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Each<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachIterRefCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(delegate*<Iter, int, ref T0, ref T1, ref T2, ref T3, ref T4, ref T5, ref T6, ref T7, ref T8, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachIterRefCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(Ecs.EachPointerCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Each<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachPointerCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(Ecs.EachPointerCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachPointerCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(Ecs.EachEntityPointerCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Each<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachEntityPointerCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(Ecs.EachEntityPointerCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachEntityPointerCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(Ecs.EachIterPointerCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Each<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachIterPointerCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(Ecs.EachIterPointerCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachIterPointerCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(delegate*<T0*, T1*, T2*, T3*, T4*, T5*, T6*, T7*, T8*, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Each<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachPointerCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(delegate*<T0*, T1*, T2*, T3*, T4*, T5*, T6*, T7*, T8*, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachPointerCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(delegate*<Entity, T0*, T1*, T2*, T3*, T4*, T5*, T6*, T7*, T8*, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Each<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachEntityPointerCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(delegate*<Entity, T0*, T1*, T2*, T3*, T4*, T5*, T6*, T7*, T8*, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachEntityPointerCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void Each(delegate*<Iter, int, T0*, T1*, T2*, T3*, T4*, T5*, T6*, T7*, T8*, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Each<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachIterPointerCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
    
    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Each callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public void EachJob(delegate*<Iter, int, T0*, T1*, T2*, T3*, T4*, T5*, T6*, T7*, T8*, void> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Job<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, EachIterPointerCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(Ecs.FindRefCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        return Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Find<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, FindRefCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(Ecs.FindEntityRefCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        return Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Find<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, FindEntityRefCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(Ecs.FindIterRefCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        return Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Find<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, FindIterRefCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(delegate*<ref T0, ref T1, ref T2, ref T3, ref T4, ref T5, ref T6, ref T7, ref T8, bool> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        return Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Find<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, FindRefCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(delegate*<Entity, ref T0, ref T1, ref T2, ref T3, ref T4, ref T5, ref T6, ref T7, ref T8, bool> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        return Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Find<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, FindEntityRefCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(delegate*<Iter, int, ref T0, ref T1, ref T2, ref T3, ref T4, ref T5, ref T6, ref T7, ref T8, bool> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(true);
        return Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Find<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, FindIterRefCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(Ecs.FindPointerCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        return Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Find<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, FindPointerCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(Ecs.FindEntityPointerCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        return Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Find<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, FindEntityPointerCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(Ecs.FindIterPointerCallback<T0, T1, T2, T3, T4, T5, T6, T7, T8> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        return Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Find<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, FindIterPointerCallbackDelegate<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(delegate*<T0*, T1*, T2*, T3*, T4*, T5*, T6*, T7*, T8*, bool> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        return Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Find<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, FindPointerCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(delegate*<Entity, T0*, T1*, T2*, T3*, T4*, T5*, T6*, T7*, T8*, bool> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        return Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Find<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, FindEntityPointerCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }

    /// <summary>
    ///     Iterates the <see cref="Query"/> using the provided .Find callback.
    /// </summary>
    /// <param name="callback">The callback.</param>
    public Entity Find(delegate*<Iter, int, T0*, T1*, T2*, T3*, T4*, T5*, T6*, T7*, T8*, bool> callback)
    {
        Types<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.AssertReferenceTypes(false);
        return Invoker<T0, T1, T2, T3, T4, T5, T6, T7, T8, _, _, _, _, _, _, _>.Find<Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>, FindIterPointerCallbackPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(ref this, callback);
    }
}