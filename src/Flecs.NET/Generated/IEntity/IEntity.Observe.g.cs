// /_/src/Flecs.NET/Generated/IEntity/IEntity.Observe.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/IEntity.cs
namespace Flecs.NET.Core;

public unsafe partial interface IEntity<TEntity>
{
    /// <summary>
    ///     Registers a callback to be called when the provided event is signaled.
    /// </summary>
    /// <param name="id">The event id.</param>
    /// <param name="callback">The callback.</param>
    /// <returns>Reference to self.</returns>
    public void Observe(ulong id, Ecs.ObserveCallback callback);
    
    /// <summary>
    ///     Registers a callback to be called when the provided event is signaled.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The event type.</typeparam>
    /// <returns>Reference to self.</returns>
    public void Observe<T0>(Ecs.ObserveCallback callback);

    /// <summary>
    ///     Registers a callback to be called when the provided event is signaled.
    /// </summary>
    /// <param name="id">The event id.</param>
    /// <param name="callback">The callback.</param>
    /// <returns>Reference to self.</returns>
    public void Observe(ulong id, delegate*<void> callback);
    
    /// <summary>
    ///     Registers a callback to be called when the provided event is signaled.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The event type.</typeparam>
    /// <returns>Reference to self.</returns>
    public void Observe<T0>(delegate*<void> callback);

    /// <summary>
    ///     Registers a callback to be called when the provided event is signaled.
    /// </summary>
    /// <param name="id">The event id.</param>
    /// <param name="callback">The callback.</param>
    /// <returns>Reference to self.</returns>
    public void Observe(ulong id, Ecs.ObserveEntityCallback callback);
    
    /// <summary>
    ///     Registers a callback to be called when the provided event is signaled.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The event type.</typeparam>
    /// <returns>Reference to self.</returns>
    public void Observe<T0>(Ecs.ObserveEntityCallback callback);

    /// <summary>
    ///     Registers a callback to be called when the provided event is signaled.
    /// </summary>
    /// <param name="id">The event id.</param>
    /// <param name="callback">The callback.</param>
    /// <returns>Reference to self.</returns>
    public void Observe(ulong id, delegate*<Entity, void> callback);
    
    /// <summary>
    ///     Registers a callback to be called when the provided event is signaled.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The event type.</typeparam>
    /// <returns>Reference to self.</returns>
    public void Observe<T0>(delegate*<Entity, void> callback);

    /// <summary>
    ///     Registers a callback to be called when the provided event is signaled.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The event type.</typeparam>
    /// <returns>Reference to self.</returns>
    public void Observe<T0>(Ecs.ObserveRefCallback<T0> callback);

    /// <summary>
    ///     Registers a callback to be called when the provided event is signaled.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The event type.</typeparam>
    /// <returns>Reference to self.</returns>
    public void Observe<T0>(delegate*<ref T0, void> callback);

    /// <summary>
    ///     Registers a callback to be called when the provided event is signaled.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The event type.</typeparam>
    /// <returns>Reference to self.</returns>
    public void Observe<T0>(Ecs.ObservePointerCallback<T0> callback);

    /// <summary>
    ///     Registers a callback to be called when the provided event is signaled.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The event type.</typeparam>
    /// <returns>Reference to self.</returns>
    public void Observe<T0>(delegate*<T0*, void> callback);

    /// <summary>
    ///     Registers a callback to be called when the provided event is signaled.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The event type.</typeparam>
    /// <returns>Reference to self.</returns>
    public void Observe<T0>(Ecs.ObserveEntityRefCallback<T0> callback);

    /// <summary>
    ///     Registers a callback to be called when the provided event is signaled.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The event type.</typeparam>
    /// <returns>Reference to self.</returns>
    public void Observe<T0>(delegate*<Entity, ref T0, void> callback);

    /// <summary>
    ///     Registers a callback to be called when the provided event is signaled.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The event type.</typeparam>
    /// <returns>Reference to self.</returns>
    public void Observe<T0>(Ecs.ObserveEntityPointerCallback<T0> callback);

    /// <summary>
    ///     Registers a callback to be called when the provided event is signaled.
    /// </summary>
    /// <param name="callback">The callback.</param>
    /// <typeparam name="T0">The event type.</typeparam>
    /// <returns>Reference to self.</returns>
    public void Observe<T0>(delegate*<Entity, T0*, void> callback);
}