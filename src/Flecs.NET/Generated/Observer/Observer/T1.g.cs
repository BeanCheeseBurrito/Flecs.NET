// /_/src/Flecs.NET/Generated/Observer/Observer/T1.g.cs
// File was auto-generated by /_/src/Flecs.NET.Codegen/Generators/Observer.cs
#nullable enable

using System;
using static Flecs.NET.Bindings.flecs;

namespace Flecs.NET.Core;

/// <summary>
///     A type-safe wrapper around <see cref="Observer"/> that takes 16 type arguments.
/// </summary>
/// <typeparam name="T0">The T0 component type.</typeparam>
public unsafe partial struct Observer<T0> : IEquatable<Observer<T0>>, IDisposable
{
    private Observer _observer;

    /// <inheritdoc cref="Observer.Entity"/>
    public ref Entity Entity => ref _observer.Entity;

    /// <inheritdoc cref="Observer.Id"/>
    public ref Id Id => ref _observer.Id;

    /// <inheritdoc cref="Observer.World"/>
    public ref ecs_world_t* World => ref _observer.World;
    
    /// <summary>
    ///     Creates an observer with the provided observer.
    /// </summary>
    /// <param name="observer">The observer.</param>
    public Observer(Observer observer)
    {
        TypeHelper<T0>.AssertNoTags();
        _observer = observer;
    }

    /// <inheritdoc cref="Observer(ecs_world_t*, ulong)"/>
    public Observer(ecs_world_t* world, ulong entity)
    {
        TypeHelper<T0>.AssertNoTags();
        _observer = new Observer(world, entity);
    }

    /// <inheritdoc cref="Observer(Core.Entity)"/>
    public Observer(Entity entity)
    {
        TypeHelper<T0>.AssertNoTags();
        _observer = new Observer(entity);
    }

    /// <inheritdoc cref="Observer.Dispose"/>
    public void Dispose()
    {
        _observer.Dispose();
    }

    ///
    public void Ctx(void* ctx)
    {
        _observer.Ctx(ctx);
    }

    /// <inheritdoc cref="Observer.Ctx()"/>
    public void* Ctx()
    {
        return _observer.Ctx();
    }

    /// <inheritdoc cref="Observer.Ctx{T}()"/>
    public T* Ctx<T>() where T : unmanaged
    {
        return _observer.Ctx<T>();
    }

    /// <inheritdoc cref="Observer.Query()"/>
    public Query<T0> Query()
    {
        return new Query<T0>(_observer.Query());
    }

    /// <inheritdoc cref="Observer.ToUInt64"/>
    public static implicit operator ulong(Observer<T0> observer)
    {
        return ToUInt64(observer);
    }

    /// <inheritdoc cref="Observer.ToId"/>
    public static implicit operator Id(Observer<T0> observer)
    {
        return ToId(observer);
    }

    /// <inheritdoc cref="Observer.ToEntity(Observer)"/>
    public static implicit operator Entity(Observer<T0> observer)
    {
        return ToEntity(observer);
    }

    /// <inheritdoc cref="Observer.ToUInt64"/>
    public static ulong ToUInt64(Observer<T0> observer)
    {
        return observer.Entity;
    }

    /// <inheritdoc cref="Observer.ToId"/>
    public static Id ToId(Observer<T0> observer)
    {
        return observer.Id;
    }

    /// <inheritdoc cref="Observer.ToEntity(Observer)"/>
    public static Entity ToEntity(Observer<T0> observer)
    {
        return observer.Entity;
    }

    /// <inheritdoc cref="Observer.Equals(Observer)"/>
    public bool Equals(Observer<T0> other)
    {
        return _observer == other._observer;
    }

    /// <inheritdoc cref="Observer.Equals(object)"/>
    public override bool Equals(object? obj)
    {
        return obj is Observer<T0> other && Equals(other);
    }

    /// <inheritdoc cref="Observer.GetHashCode()"/>
    public override int GetHashCode()
    {
        return _observer.GetHashCode();
    }

    /// <inheritdoc cref="Observer.op_Equality"/>
    public static bool operator ==(Observer<T0> left, Observer<T0> right)
    {
        return left.Equals(right);
    }

    /// <inheritdoc cref="Observer.op_Inequality"/>
    public static bool operator !=(Observer<T0> left, Observer<T0> right)
    {
        return !(left == right);
    }

    /// <inheritdoc cref="Observer.ToString"/>
    public override string ToString()
    {
        return _observer.ToString();
    }
}