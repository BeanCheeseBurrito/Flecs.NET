<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Flecs.NET</name>
    </assembly>
    <members>
        <member name="T:Flecs.NET.Collections.NativeArray`1">
            <summary>
                A unmanaged alternative to arrays.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Flecs.NET.Collections.NativeArray`1.Data">
            <summary>
                Data storage for the <see cref="T:Flecs.NET.Collections.NativeArray`1"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Collections.NativeArray`1.Length">
            <summary>
                The length of the <see cref="T:Flecs.NET.Collections.NativeArray`1"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Collections.NativeArray`1.IsNull">
            <summary>
                Represents whether or not the <see cref="T:Flecs.NET.Collections.NativeArray`1"/> is null.
            </summary>
        </member>
        <member name="P:Flecs.NET.Collections.NativeArray`1.Span">
            <summary>
                Returns a span of the <see cref="T:Flecs.NET.Collections.NativeArray`1"/>.
            </summary>
        </member>
        <member name="M:Flecs.NET.Collections.NativeArray`1.#ctor(System.Int32)">
            <summary>
                Creates an <see cref="T:Flecs.NET.Collections.NativeArray`1"/> with the provided length.
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:Flecs.NET.Collections.NativeArray`1.#ctor(`0*,System.Int32)">
            <summary>
                Creates an <see cref="T:Flecs.NET.Collections.NativeArray`1"/> from the provided pointer and length.
            </summary>
            <param name="data"></param>
            <param name="length"></param>
        </member>
        <member name="M:Flecs.NET.Collections.NativeArray`1.Dispose">
            <summary>
                Disposes the <see cref="T:Flecs.NET.Collections.NativeArray`1"/> and cleans up resources.
            </summary>
        </member>
        <member name="P:Flecs.NET.Collections.NativeArray`1.Item(System.Int32)">
            <summary>
                Grabs a managed reference to the object at the specified index.
            </summary>
            <param name="index"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Flecs.NET.Collections.NativeArray`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the <see cref="T:Flecs.NET.Collections.NativeArray`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Collections.NativeArray`1.Enumerator">
            <summary>
                Enumerates the elements of a <see cref="T:Flecs.NET.Collections.NativeArray`1"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Collections.NativeArray`1.Enumerator.Current">
            <summary>
                Current item.
            </summary>
        </member>
        <member name="M:Flecs.NET.Collections.NativeArray`1.Enumerator.MoveNext">
            <summary>
                Moves to the next index of the <see cref="T:Flecs.NET.Collections.NativeArray`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Collections.NativeArray`1.Enumerator.Reset">
            <summary>
                Resets the index of the enumerator.
            </summary>
        </member>
        <member name="M:Flecs.NET.Collections.NativeArray`1.Enumerator.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Flecs.NET.Collections.NativeArray`1.Equals(Flecs.NET.Collections.NativeArray{`0})">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Collections.NativeArray`1.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Collections.NativeArray`1.op_Equality(Flecs.NET.Collections.NativeArray{`0},Flecs.NET.Collections.NativeArray{`0})">
            <summary>
                Tests whether two objects are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Collections.NativeArray`1.op_Inequality(Flecs.NET.Collections.NativeArray{`0},Flecs.NET.Collections.NativeArray{`0})">
            <summary>
                Tests whether two objects are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Collections.NativeArray`1.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Flecs.NET.Collections.NativeList`1">
            <summary>
                An unmanaged alternative to <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Flecs.NET.Collections.NativeList`1.Data">
            <summary>
                Data storage for the <see cref="T:Flecs.NET.Collections.NativeList`1"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Collections.NativeList`1.Capacity">
            <summary>
                The capacity of the <see cref="T:Flecs.NET.Collections.NativeList`1"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Collections.NativeList`1.Count">
            <summary>
                The current count of the <see cref="T:Flecs.NET.Collections.NativeList`1"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Collections.NativeList`1.IsNull">
            <summary>
                Represents whether or not the <see cref="T:Flecs.NET.Collections.NativeList`1"/> is null.
            </summary>
        </member>
        <member name="P:Flecs.NET.Collections.NativeList`1.Span">
            <summary>
                Returns a span of the <see cref="T:Flecs.NET.Collections.NativeList`1"/>.
            </summary>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.#ctor(System.Int32)">
            <summary>
                Creates an <see cref="T:Flecs.NET.Collections.NativeList`1"/> with the specified capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="P:Flecs.NET.Collections.NativeList`1.Item(System.Int32)">
            <summary>
                Gets a managed reference to the object at the specified index.
            </summary>
            <param name="index"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.Dispose">
            <summary>
                Disposes the <see cref="T:Flecs.NET.Collections.NativeList`1"/> and frees resources.
            </summary>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.Add(`0)">
            <summary>
                Adds an item to the <see cref="T:Flecs.NET.Collections.NativeList`1"/>.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.AddRange(System.Span{`0})">
            <summary>
                Adds the elements of the specified span to the end of the <see cref="T:Flecs.NET.Collections.NativeList`1"/>
            </summary>
            <param name="span"></param>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.AddRange(`0[])">
            <summary>
                Adds the elements of the specified array to the end of the <see cref="T:Flecs.NET.Collections.NativeList`1"/>
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Adds the elements of the specified enumerable to the end of the <see cref="T:Flecs.NET.Collections.NativeList`1"/>.
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.Clear">
            <summary>
                Sets the count of the list to 0.
            </summary>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.Contains(`0)">
            <summary>
                Determines whether an element is in the <see cref="T:Flecs.NET.Collections.NativeList`1"/>.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.EnsureCapacity(System.Int32)">
            <summary>
                Ensures that the list has the specified capacity.
            </summary>
            <param name="newCapacity"></param>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.IndexOf(`0)">
            <summary>
                Returns the zero-based index of the first occurrence of a value in the <see cref="T:Flecs.NET.Collections.NativeList`1"/>.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.Equals(Flecs.NET.Collections.NativeList{`0})">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.op_Equality(Flecs.NET.Collections.NativeList{`0},Flecs.NET.Collections.NativeList{`0})">
            <summary>
                Tests whether two objects are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.op_Inequality(Flecs.NET.Collections.NativeList{`0},Flecs.NET.Collections.NativeList{`0})">
            <summary>
                Tests whether two objects are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the <see cref="T:Flecs.NET.Collections.NativeList`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Collections.NativeList`1.Enumerator">
            <summary>
                Enumerates the elements of a <see cref="T:Flecs.NET.Collections.NativeList`1"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Collections.NativeList`1.Enumerator.Current">
            <summary>
                Current item.
            </summary>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.Enumerator.MoveNext">
            <summary>
                Moves to the next index of the <see cref="T:Flecs.NET.Collections.NativeList`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.Enumerator.Reset">
            <summary>
                Resets the index of the enumerator.
            </summary>
        </member>
        <member name="M:Flecs.NET.Collections.NativeList`1.Enumerator.Dispose">
            <summary>
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Alert">
            <summary>
                A wrapper for an alert.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Alert.Entity">
            <summary>
                Reference to entity.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Alert.World">
            <summary>
                Reference to world.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Alert.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.String,Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.AlertBuilder)">
            <summary>
                Creates an alert.
            </summary>
            <param name="world"></param>
            <param name="name"></param>
            <param name="filterBuilder"></param>
            <param name="alertBuilder"></param>
        </member>
        <member name="M:Flecs.NET.Core.Alert.ToString">
            <summary>
                Returns the entity's name if it has one, otherwise return its id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Alert.Equals(Flecs.NET.Core.Alert)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Alert"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Alert.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Alert"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Alert.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Alert"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Alert.op_Equality(Flecs.NET.Core.Alert,Flecs.NET.Core.Alert)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Alert"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Alert.op_Inequality(Flecs.NET.Core.Alert,Flecs.NET.Core.Alert)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Alert"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.AlertBuilder">
            <summary>
                A wrapper around ecs_alert_desc_t.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.AlertBuilder.World">
            <summary>
                Reference to world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.AlertBuilder.Desc">
            <summary>
                Reference to alert description.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Creates an alert builder for world.
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.Dispose">
            <summary>
                Cleans up the alert builder's resources.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.Message(System.String)">
            <summary>
                Sets the message of the alert.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.Brief(System.String)">
            <summary>
                Sets the brief of the alert.
            </summary>
            <param name="brief"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.DocName(System.String)">
            <summary>
                Sets the doc name of the alert.
            </summary>
            <param name="docName"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.RetainPeriod(System.Single)">
            <summary>
                Sets the retain period of the alert
            </summary>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.Severity(System.UInt64)">
            <summary>
                Sets the severity of the alert.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.Severity``1">
            <summary>
                Sets the severity of the alert.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.SeverityFilter(System.UInt64,System.UInt64,System.String)">
            <summary>
                Adds a severity filter to the alert.
            </summary>
            <param name="kind"></param>
            <param name="with"></param>
            <param name="var"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.SeverityFilter``1(System.UInt64,System.String)">
            <summary>
                Adds a severity filter to the alert.
            </summary>
            <param name="with"></param>
            <param name="var"></param>
            <typeparam name="TSeverity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.SeverityFilter``2(System.String)">
            <summary>
                Adds a severity filter to the alert.
            </summary>
            <param name="var"></param>
            <typeparam name="TSeverity"></typeparam>
            <typeparam name="TWith"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.SeverityFilter``2(``1,System.String)">
            <summary>
                Adds a severity filter to the alert.
            </summary>
            <param name="withEnum"></param>
            <param name="var"></param>
            <typeparam name="TSeverity"></typeparam>
            <typeparam name="TWithEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.Member(System.UInt64)">
            <summary>
                Set the member to create an alert for out of range values.
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.Member``1(System.String,System.String)">
            <summary>
                Set member to create an alert for out of range of values.
            </summary>
            <param name="member"></param>
            <param name="var"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.Id(System.UInt64)">
            <summary>
                Set (component) id for member (optional). If Member() is set and id
                is not set, the id will default to the member parent.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.Var(System.String)">
            <summary>
                Set source variable for member.
            </summary>
            <param name="var"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.Equals(Flecs.NET.Core.AlertBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.AlertBuilder"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.AlertBuilder"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.GetHashCode">
            <summary>
                Gets the hash code of the <see cref="T:Flecs.NET.Core.AlertBuilder"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.op_Equality(Flecs.NET.Core.AlertBuilder,Flecs.NET.Core.AlertBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.AlertBuilder"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AlertBuilder.op_Inequality(Flecs.NET.Core.AlertBuilder,Flecs.NET.Core.AlertBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.AlertBuilder"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.AppBuilder">
            <summary>
                A wrapper around ecs_app_desc_t.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.AppBuilder.World">
            <summary>
                Reference to world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.AppBuilder.Desc">
            <summary>
                Reference to app description.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.AppBuilder.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Creates an app builder for world.
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Flecs.NET.Core.AppBuilder.Dispose">
            <summary>
                Cleans up resources.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.AppBuilder.TargetFps(System.Single)">
            <summary>
                Sets the target fps.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AppBuilder.DeltaTime(System.Single)">
            <summary>
                Sets the delta time.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AppBuilder.Threads(System.Int32)">
            <summary>
                Sets the number of threads to use.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AppBuilder.Frames(System.Int32)">
            <summary>
                Sets the number of frames to run.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AppBuilder.EnableRest(System.UInt16)">
            <summary>
                Enable ecs access over http for the explorer.
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AppBuilder.EnableMonitor(System.Boolean)">
            <summary>
                Periodically collect statistics.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AppBuilder.Init(Flecs.NET.Core.Ecs.AppInitAction)">
            <summary>
                Sets a callback to be run before starting the main loop.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AppBuilder.Ctx(System.Void*)">
            <summary>
                Context for storing custom data.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AppBuilder.Run">
            <summary>
                Runs the app.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AppBuilder.Equals(Flecs.NET.Core.AppBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.AppBuilder"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AppBuilder.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.AppBuilder"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AppBuilder.GetHashCode">
            <summary>
                Gets the hash code of the <see cref="T:Flecs.NET.Core.AppBuilder"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AppBuilder.op_Equality(Flecs.NET.Core.AppBuilder,Flecs.NET.Core.AppBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.AppBuilder"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.AppBuilder.op_Inequality(Flecs.NET.Core.AppBuilder,Flecs.NET.Core.AppBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.AlertBuilder"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.BindingContext">
            <summary>
                A static class holding methods and types for binding contexts.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Column`1">
            <summary>
                A wrapper around table columns.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Flecs.NET.Core.Column`1.Data">
            <summary>
                Pointer to column.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Column`1.Length">
            <summary>
                Length of the column.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Column`1.IsShared">
            <summary>
                Specifies if the column is shared.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Column`1.IsNull">
            <summary>
                Specifies if the column pointer is null.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Column`1.#ctor(System.Void*,System.Int32,System.Boolean)">
            <summary>
                Creates column.
            </summary>
            <param name="data"></param>
            <param name="length"></param>
            <param name="isShared"></param>
        </member>
        <member name="P:Flecs.NET.Core.Column`1.Item(System.Int32)">
            <summary>
                Gets a managed reference to the component at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Flecs.NET.Core.Column`1.Equals(Flecs.NET.Core.Column{`0})">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Column`1"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Column`1.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Column`1"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Column`1.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Entity"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Column`1.op_Equality(Flecs.NET.Core.Column{`0},Flecs.NET.Core.Column{`0})">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Entity"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Column`1.op_Inequality(Flecs.NET.Core.Column{`0},Flecs.NET.Core.Column{`0})">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Entity"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Component`1">
            <summary>
                Struct used to register components and component metadata.
            </summary>
            <typeparam name="TComponent"></typeparam>
        </member>
        <member name="P:Flecs.NET.Core.Component`1.UntypedComponent">
            <summary>
                Reference to untyped component.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Component`1.World">
            <summary>
                Reference to world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Component`1.Entity">
            <summary>
                Reference to entity.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Component`1.Id">
            <summary>
                Reference to id.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.String,System.Boolean,System.UInt64)">
            <summary>
                Registers a component.
                If the component was already registered, this operation will return a handle to the existing component.
            </summary>
            <param name="world"></param>
            <param name="name"></param>
            <param name="allowTag"></param>
            <param name="id"></param>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.Member(System.UInt64,System.UInt64,System.String,System.Int32,System.Int32)">
            <summary>
                Add member with unit.
            </summary>
            <param name="typeId"></param>
            <param name="unit"></param>
            <param name="name"></param>
            <param name="count"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.Member(System.UInt64,System.String,System.Int32,System.Int32)">
            <summary>
                Add member.
            </summary>
            <param name="typeId"></param>
            <param name="name"></param>
            <param name="count"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.Member``1(System.String,System.Int32,System.Int32)">
            <summary>
                Add member.
            </summary>
            <param name="name"></param>
            <param name="count"></param>
            <param name="offset"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.Member``1(System.UInt64,System.String,System.Int32,System.Int32)">
            <summary>
                Add member with unit.
            </summary>
            <param name="unit"></param>
            <param name="name"></param>
            <param name="count"></param>
            <param name="offset"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.Member``2(System.String,System.Int32,System.Int32)">
            <summary>
                Add member with unit.
            </summary>
            <param name="name"></param>
            <param name="count"></param>
            <param name="offset"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TUnit"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.Constant(System.String,System.Int32)">
            <summary>
                Add constant.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.Bit(System.String,System.UInt32)">
            <summary>
                Add bitmask constant.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.Range(System.Double,System.Double)">
            <summary>
                Add member value range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.WarningRange(System.Double,System.Double)">
            <summary>
                Add member warning range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.ErrorRange(System.Double,System.Double)">
            <summary>
                Add member error range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.Metric``1(System.UInt64,System.String,System.String)">
            <summary>
                Register member as metric.
            </summary>
            <param name="parent"></param>
            <param name="brief"></param>
            <param name="name"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.op_Implicit(Flecs.NET.Core.Component{`0})~System.UInt64">
            <summary>
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.ToUInt64(Flecs.NET.Core.Component{`0})">
            <summary>
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.Equals(Flecs.NET.Core.Component{`0})">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Component`1"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.Equals(System.UInt64)">
            <summary>
                Checks if the <see cref="T:Flecs.NET.Core.Component`1"/> instances is equal to an entity id.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.Equals(System.Object)">
            <summary>
                Checks if the <see cref="T:Flecs.NET.Core.Component`1"/> instance is equal to a <see cref="T:Flecs.NET.Core.Component`1"/> or
                entity id.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.op_Equality(Flecs.NET.Core.Component{`0},Flecs.NET.Core.Component{`0})">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Component`1"/> instances are equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.op_Inequality(Flecs.NET.Core.Component{`0},Flecs.NET.Core.Component{`0})">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Component`1"/> instances are not equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.op_Equality(Flecs.NET.Core.Component{`0},System.UInt64)">
            <summary>
                Checks if the <see cref="T:Flecs.NET.Core.Component`1"/> is equal to an entity id.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.op_Inequality(Flecs.NET.Core.Component{`0},System.UInt64)">
            <summary>
                Checks if the <see cref="T:Flecs.NET.Core.Component`1"/> instance does not equal an entity id.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.op_Equality(System.UInt64,Flecs.NET.Core.Component{`0})">
            <summary>
                Checks if an entity id is equal to a <see cref="T:Flecs.NET.Core.Component`1"/> instance.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.op_Inequality(System.UInt64,Flecs.NET.Core.Component{`0})">
            <summary>
                Checks if an entity id is not equal to a <see cref="T:Flecs.NET.Core.Component`1"/> instance.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Component`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Component`1.SetHooks(Flecs.NET.Core.TypeHooks{`0})">
            <summary>
                Sets the component's type hooks.
            </summary>
            <param name="typeHooks"></param>
        </member>
        <member name="T:Flecs.NET.Core.Cursor">
            <summary>
                Class for reading/writing dynamic values.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.UInt64,System.Void*)">
            <summary>
            </summary>
            <param name="world"></param>
            <param name="typeId"></param>
            <param name="data"></param>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.Push">
            <summary>
                Push value scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.Pop">
            <summary>
                Pop value Scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.Next">
            <summary>
                Move to the next member/element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.Member(System.String)">
            <summary>
                Move to member by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.Elem(System.Int32)">
            <summary>
                Move to element by index.
            </summary>
            <param name="elem"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.IsCollection">
            <summary>
                Test if current scope is a collection type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.GetMember">
            <summary>
                Get member name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.GetType">
            <summary>
                Get type of value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.GetUnit">
            <summary>
                Get unit of value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.GetPtr">
            <summary>
                Get untyped pointer to value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.SetBool(System.Boolean)">
            <summary>
                Set boolean value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.SetChar(System.Char)">
            <summary>
                Set char value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.SetInt(System.Int64)">
            <summary>
                Set signed int value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.SetUInt(System.UInt64)">
            <summary>
                Set unsigned int value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.SetFloat(System.Double)">
            <summary>
                Set float value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.SetString(System.String)">
            <summary>
                Set string value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.SetLiteralString(System.String)">
            <summary>
                Set string literal value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.SetEntity(System.UInt64)">
            <summary>
                Set entity value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.SetNull">
            <summary>
                Set null value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.GetBool">
            <summary>
                Get boolean value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.GetChar">
            <summary>
                Get char value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.GetInt">
            <summary>
                Get signed int value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.GetUInt">
            <summary>
                Get unsigned int value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.GetFloat">
            <summary>
                Get float value.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.GetString">
            <summary>
                Get string value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.GetEntity">
            <summary>
                Get entity value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.Equals(Flecs.NET.Core.Cursor)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Cursor"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Cursor"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.GetHashCode">
            <summary>
                Gets the hash code of the <see cref="T:Flecs.NET.Core.Cursor"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.op_Equality(Flecs.NET.Core.Cursor,Flecs.NET.Core.Cursor)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Cursor"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Cursor.op_Inequality(Flecs.NET.Core.Cursor,Flecs.NET.Core.Cursor)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Cursor"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Ecs">
            <summary>
                A static class for storing ECS related globals.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Log">
            <summary>
                Static class for flecs logging functions.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Log.SetLevel(System.Int32)">
            <summary>
                Set log level.
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Log.GetLevel">
            <summary>
                Get log level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Log.EnableColors(System.Boolean)">
            <summary>
                Enable colors in logging.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Log.EnableTimestamp(System.Boolean)">
            <summary>
                Enable timestamps in logging.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Log.EnableTimeDelta(System.Boolean)">
            <summary>
                Enable time delta in logging.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Log.Dbg(System.String,System.String,System.Int32)">
            <summary>
                Debug trace (Level 1)
            </summary>
            <param name="message"></param>
            <param name="file"></param>
            <param name="line"></param>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Log.Trace(System.String,System.String,System.Int32)">
            <summary>
                Trace (Level 0)
            </summary>
            <param name="message"></param>
            <param name="file"></param>
            <param name="line"></param>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Log.Warn(System.String,System.String,System.Int32)">
            <summary>
                Trace (Level -2)
            </summary>
            <param name="message"></param>
            <param name="file"></param>
            <param name="line"></param>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Log.Err(System.String,System.String,System.Int32)">
            <summary>
                Trace (Level -3)
            </summary>
            <param name="message"></param>
            <param name="file"></param>
            <param name="line"></param>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Log.Push(System.String,System.String,System.Int32)">
            <summary>
                Trace (Level 0)
            </summary>
            <param name="message"></param>
            <param name="file"></param>
            <param name="line"></param>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Log.Push">
            <summary>
                Increase log indentation.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Log.Pop">
            <summary>
                Decrease log indentation.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.AppInitAction">
            <summary>
                App init action.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.ContextFree">
            <summary>
                Context free.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.CopyCallback">
            <summary>
                Copy type hook callback.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.CopyCallback`1">
            <summary>
                Copy type hook callback.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.CtorCallback">
            <summary>
                Ctor type hook callback.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.CtorCallback`1">
            <summary>
                Ctor type hook callback.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.DtorCallback">
            <summary>
                Dtor type hook callback.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.DtorCallback`1">
            <summary>
                Dtor type hook callback.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.EachEntityCallback">
            <summary>
                Each entity callback.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.EachIdCallback">
            <summary>
                Each id callback.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.EachIndexCallback">
            <summary>
                Each index callback.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.FiniAction">
            <summary>
                Finish action.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Free">
            <summary>
                Free.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.GroupByAction">
            <summary>
                GroupBy action.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.GroupCreateAction">
            <summary>
                Group create action.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.GroupDeleteAction">
            <summary>
                Group delete action.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.IterAction">
            <summary>
                Iter action.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.IterCallback">
            <summary>
                Iter callback.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.IterNextAction">
            <summary>
                Iter next action.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.MoveCallback">
            <summary>
                Move type hook callback.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.MoveCallback`1">
            <summary>
                Move type hook callback.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.OrderByAction">
            <summary>
                OrderBy action.
            </summary>
        </member>
        <member name="F:Flecs.NET.Core.Ecs.Self">
            <summary>
                Equivalent to <see cref="F:Flecs.NET.Bindings.Native.EcsSelf"/>
            </summary>
        </member>
        <member name="F:Flecs.NET.Core.Ecs.Up">
            <summary>
                Equivalent to <see cref="F:Flecs.NET.Bindings.Native.EcsUp"/>
            </summary>
        </member>
        <member name="F:Flecs.NET.Core.Ecs.Down">
            <summary>
                Equivalent to <see cref="F:Flecs.NET.Bindings.Native.EcsDown"/>
            </summary>
        </member>
        <member name="F:Flecs.NET.Core.Ecs.Cascade">
            <summary>
                Equivalent to <see cref="F:Flecs.NET.Bindings.Native.EcsCascade"/>
            </summary>
        </member>
        <member name="F:Flecs.NET.Core.Ecs.Desc">
            <summary>
                Equivalent to <see cref="F:Flecs.NET.Bindings.Native.EcsDesc"/>
            </summary>
        </member>
        <member name="F:Flecs.NET.Core.Ecs.Parent">
            <summary>
                Equivalent to <see cref="F:Flecs.NET.Bindings.Native.EcsParent"/>
            </summary>
        </member>
        <member name="F:Flecs.NET.Core.Ecs.IsVariable">
            <summary>
                Equivalent to <see cref="F:Flecs.NET.Bindings.Native.EcsIsVariable"/>
            </summary>
        </member>
        <member name="F:Flecs.NET.Core.Ecs.IsEntity">
            <summary>
                Equivalent to <see cref="F:Flecs.NET.Bindings.Native.EcsIsEntity"/>
            </summary>
        </member>
        <member name="F:Flecs.NET.Core.Ecs.Filter">
            <summary>
                Equivalent to <see cref="F:Flecs.NET.Bindings.Native.EcsFilter"/>
            </summary>
        </member>
        <member name="F:Flecs.NET.Core.Ecs.TraverseFlags">
            <summary>
                Equivalent to <see cref="F:Flecs.NET.Bindings.Native.EcsTraverseFlags"/>
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Pair">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.ECS_PAIR"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Override">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.ECS_OVERRIDE"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Toggle">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.ECS_TOGGLE"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Query">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsQuery"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Observer">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsObserver"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Private">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsPrivate"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Module">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsModule"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Prefab">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsPrefab"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Disabled">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsDisabled"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Empty">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsEmpty"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.MonitorId">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsMonitor"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.System">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsSystem"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Routine">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsSystem"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Pipeline">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.FLECS_IDEcsPipelineID_"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Phase">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsPhase"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.OnAdd">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsOnAdd"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.OnRemove">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsOnRemove"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.OnSet">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsOnSet"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.UnSet">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsUnSet"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.OnTableCreate">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsOnTableCreate"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.OnTableDelete">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsOnTableDelete"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Flecs">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsFlecs"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.FlecsCore">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsFlecsCore"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.World">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsWorld"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Wildcard">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsWildcard"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Any">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsAny"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.This">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsThis"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Transitive">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsTransitive"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Reflexive">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsReflexive"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Final">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsFinal"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.DontInherit">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsDontInherit"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.AlwaysOverride">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsAlwaysOverride"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Tag">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsTag"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Union">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsUnion"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Exclusive">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsExclusive"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Acyclic">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsAcyclic"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Traversable">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsTraversable"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Symmetric">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsSymmetric"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.With">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsWith"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.OneOf">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsOneOf"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.IsA">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsIsA"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.ChildOf">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsChildOf"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.DependsOn">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsDependsOn"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.SlotOf">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsSlotOf"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Name">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsName"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Symbol">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsSymbol"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.OnDelete">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsOnDelete"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.OnDeleteTarget">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsOnDeleteTarget"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Remove">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsRemove"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Delete">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsDelete"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Panic">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsPanic"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Flatten">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsFlatten"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.DefaultChildComponent">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsDefaultChildComponent"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.PredEq">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsPredEq"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.PredMatch">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsPredMatch"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.PredLookup">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsPredLookup"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.ScopeOpen">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsScopeOpen"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.ScopeClose">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsScopeClose"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.OnStart">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsOnStart"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.PreFrame">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsPreFrame"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.OnLoad">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsOnLoad"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.PostLoad">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsPostLoad"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.PreUpdate">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsPreUpdate"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.OnUpdate">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsOnUpdate"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.OnValidate">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsOnValidate"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.PostUpdate">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsPostUpdate"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.PreStore">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsPreStore"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.OnStore">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsOnStore"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.PostFrame">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsPostFrame"/>.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Doc">
            <summary>
                Utilities for documenting entities, components and systems.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Doc.Brief">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsDocBrief"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Doc.Detail">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsDocDetail"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Doc.Link">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsDocLink"/>.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Ecs.Doc.Color">
            <summary>
                Reference to <see cref="P:Flecs.NET.Bindings.Native.EcsDocColor"/>.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Alerts">
            <summary>
                Alerts module
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Alerts.InitModule(Flecs.NET.Core.World@)">
            <summary>
                Initializes the alerts module.
            </summary>
            <param name="world"></param>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Alerts.Alert">
            <summary>
                Alert tag.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Alerts.Info">
            <summary>
                Info tag.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Alerts.Warning">
            <summary>
                Warning tag.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Alerts.Err">
            <summary>
                Error tag.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Alerts.Equals(Flecs.NET.Core.Ecs.Alerts)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Alerts"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Alerts.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Alerts"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Alerts.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Ecs.Alerts"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Alerts.op_Equality(Flecs.NET.Core.Ecs.Alerts,Flecs.NET.Core.Ecs.Alerts)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Alerts"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Alerts.op_Inequality(Flecs.NET.Core.Ecs.Alerts,Flecs.NET.Core.Ecs.Alerts)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Alerts"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Meta">
            <summary>
                Meta module.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Meta.InitModule(Flecs.NET.Core.World@)">
            <summary>
                Initializes meta module.
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Meta.Equals(Flecs.NET.Core.Ecs.Meta)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Meta"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Meta.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Meta"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Meta.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Ecs.Meta"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Meta.op_Equality(Flecs.NET.Core.Ecs.Meta,Flecs.NET.Core.Ecs.Meta)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Meta"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Meta.op_Inequality(Flecs.NET.Core.Ecs.Meta,Flecs.NET.Core.Ecs.Meta)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Meta"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Metrics">
            <summary>
                Metrics module.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Metrics.InitModule(Flecs.NET.Core.World@)">
            <summary>
                Initializes metrics module.
            </summary>
            <param name="world"></param>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Metrics.Instance">
            <summary>
                Instance tag.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Metrics.Metric">
            <summary>
                Metric tag.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Metrics.Counter">
            <summary>
                Counter tag.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Metrics.CounterIncrement">
            <summary>
                CounterIncrement tag.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Metrics.CounterId">
            <summary>
                CounterId tag.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Metrics.Gauge">
            <summary>
                Gauge tag.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Metrics.Equals(Flecs.NET.Core.Ecs.Metrics)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Metrics"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Metrics.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Metrics"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Metrics.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Ecs.Metrics"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Metrics.op_Equality(Flecs.NET.Core.Ecs.Metrics,Flecs.NET.Core.Ecs.Metrics)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Metrics"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Metrics.op_Inequality(Flecs.NET.Core.Ecs.Metrics,Flecs.NET.Core.Ecs.Metrics)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Metrics"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Monitor">
            <summary>
                Monitor module.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Monitor.InitModule(Flecs.NET.Core.World@)">
            <summary>
                Initializes monitor module.
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Monitor.Equals(Flecs.NET.Core.Ecs.Monitor)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Monitor"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Monitor.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Monitor"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Monitor.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Ecs.Monitor"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Monitor.op_Equality(Flecs.NET.Core.Ecs.Monitor,Flecs.NET.Core.Ecs.Monitor)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Monitor"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Monitor.op_Inequality(Flecs.NET.Core.Ecs.Monitor,Flecs.NET.Core.Ecs.Monitor)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Monitor"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units">
            <summary>
                Units module.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Units.InitModule(Flecs.NET.Core.World@)">
            <summary>
                Initializes units module.
            </summary>
            <param name="world"></param>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Prefixes">
            <summary>
                Prefixes.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Yocto">
            <summary>
                Yocto unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Zepto">
            <summary>
                Zepto unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Atto">
            <summary>
                Atto unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Femto">
            <summary>
                Femto unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Pico">
            <summary>
                Pico unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Nano">
            <summary>
                Nano unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Micro">
            <summary>
                Micro unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Milli">
            <summary>
                Milli unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Centi">
            <summary>
                Centi unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Deci">
            <summary>
                Deci unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Deca">
            <summary>
                Deca unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Hecto">
            <summary>
                Hecto unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Kilo">
            <summary>
                Kilo unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Mega">
            <summary>
                Mega unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Giga">
            <summary>
                Giga unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Tera">
            <summary>
                Tera unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Peta">
            <summary>
                Peta unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Exa">
            <summary>
                Exa unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Zetta">
            <summary>
                Zetta unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Yotta">
            <summary>
                Yotta unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Kibi">
            <summary>
                Kibi unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Mebi">
            <summary>
                Mebi unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Gibi">
            <summary>
                Gibi unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Tebi">
            <summary>
                Tebi unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Pebi">
            <summary>
                Pebi unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Exbi">
            <summary>
                Exbi unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Zebi">
            <summary>
                Zebi unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Yobi">
            <summary>
                Yobi unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Duration">
            <summary>
                Duration unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Time">
            <summary>
                Time unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Mass">
            <summary>
                Mass unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.ElectricCurrent">
            <summary>
                Electric current unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.LuminousIntensity">
            <summary>
                Luminous intensity unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Force">
            <summary>
                Force unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Amount">
            <summary>
                Amount unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Length">
            <summary>
                Length unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Pressure">
            <summary>
                Pressure unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Speed">
            <summary>
                Speed unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Temperature">
            <summary>
                Temperature unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Data">
            <summary>
                Data unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.DataRate">
            <summary>
                Data rate unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Angle">
            <summary>
                Angle unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Frequency">
            <summary>
                Frequency unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Uri">
            <summary>
                Uri unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Durations">
            <summary>
                Durations.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Durations.PicoSeconds">
            <summary>
                Picoseconds unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Durations.NanoSeconds">
            <summary>
                Nanoseconds unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Durations.MicroSeconds">
            <summary>
                Microseconds unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Durations.MilliSeconds">
            <summary>
                Milliseconds unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Durations.Seconds">
            <summary>
                Seconds unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Durations.Minutes">
            <summary>
                Minutes unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Durations.Hours">
            <summary>
                Hours unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Durations.Days">
            <summary>
                Days unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Angles">
            <summary>
                Angles.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Angles.Radians">
            <summary>
                Radians unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Angles.Degrees">
            <summary>
                Degrees unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Times">
            <summary>
                Times.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Times.CalenderDate">
            <summary>
                Date unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Masses">
            <summary>
                Masses.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Masses.Grams">
            <summary>
                Grams unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Masses.KiloGrams">
            <summary>
                Kilograms unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.ElectricCurrents">
            <summary>
                Electric currents.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.ElectricCurrents.Ampere">
            <summary>
                Ampere unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Amounts">
            <summary>
                Amounts.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Amounts.Mole">
            <summary>
                Mole unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.LuminousIntensities">
            <summary>
                Luminous intensities.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.LuminousIntensities.Candela">
            <summary>
                Candela unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Forces">
            <summary>
                Forces.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Forces.Newton">
            <summary>
                Newton unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Lengths">
            <summary>
                Lengths.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Lengths.Meters">
            <summary>
                Meters unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Lengths.PicoMeters">
            <summary>
                Picometers unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Lengths.NanoMeters">
            <summary>
                Nanometers unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Lengths.MicroMeters">
            <summary>
                Micrometers unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Lengths.MilliMeters">
            <summary>
                Millimeters unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Lengths.CentiMeters">
            <summary>
                Centimeters unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Lengths.KiloMeters">
            <summary>
                Kilometers unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Lengths.Miles">
            <summary>
                Miles unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Lengths.Pixels">
            <summary>
                Pixels unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Pressures">
            <summary>
                Pressures.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Pressures.Pascal">
            <summary>
                Pascal unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Pressures.Bar">
            <summary>
                Bar unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Speeds">
            <summary>
                Speeds.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Speeds.MetersPerSecond">
            <summary>
                Meters per second unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Speeds.KiloMetersPerSecond">
            <summary>
                Kilometers per second unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Speeds.KiloMetersPerHour">
            <summary>
                Kilometers per hour unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Speeds.MilesPerHour">
            <summary>
                Miles per hour unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Temperatures">
            <summary>
                Temperatures.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Temperatures.Kelvin">
            <summary>
                Kelvin unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Temperatures.Celsius">
            <summary>
                Celsius unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Temperatures.Fahrenheit">
            <summary>
                Fahrenheit unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Datas">
            <summary>
                Datas.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Datas.Bits">
            <summary>
                Bits unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Datas.KiloBits">
            <summary>
                Kilobits unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Datas.MegaBits">
            <summary>
                Megabits unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Datas.GigaBits">
            <summary>
                Gigabits unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Datas.Bytes">
            <summary>
                Bytes unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Datas.KiloBytes">
            <summary>
                Kilobytes unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Datas.MegaBytes">
            <summary>
                Megabytes unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Datas.GigaBytes">
            <summary>
                Gigabytes unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Datas.KibiBytes">
            <summary>
                Kibibytes unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Datas.MebiBytes">
            <summary>
                Mebibytes unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Datas.GibiBytes">
            <summary>
                Gibibytes unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.DataRates">
            <summary>
                Data rates.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.DataRates.BitsPerSecond">
            <summary>
                Bits per second unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.DataRates.KiloBitsPerSecond">
            <summary>
                Kilobits per second unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.DataRates.MegaBitsPerSecond">
            <summary>
                Megabits per second unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.DataRates.GigaBitsPerSecond">
            <summary>
                Gigabits per second unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.DataRates.BytesPerSecond">
            <summary>
                Bytes per second unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.DataRates.KiloBytesPerSecond">
            <summary>
                Kilobytes per second unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.DataRates.MegaBytesPerSecond">
            <summary>
                Megabytes per second unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.DataRates.GigaBytesPerSecond">
            <summary>
                Gigabytes per second unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Frequencies">
            <summary>
                Frequencies,
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Frequencies.Hertz">
            <summary>
                Hertz unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Frequencies.KiloHertz">
            <summary>
                Kilohertz unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Frequencies.MegaHertz">
            <summary>
                Megahertz unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Frequencies.GigaHertz">
            <summary>
                Gigahertz unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Uris">
            <summary>
                Uris.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Uris.Hyperlink">
            <summary>
                Hyper link unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Uris.Image">
            <summary>
                Image unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Uris.File">
            <summary>
                File unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Percentage">
            <summary>
                Percentage unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.Bel">
            <summary>
                Bel unit.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Ecs.Units.DeciBel">
            <summary>
                Decibel unit.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Units.Equals(Flecs.NET.Core.Ecs.Units)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Units"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Units.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Units"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Units.GetHashCode">
            <summary>
                Returns the hash code of teh <see cref="T:Flecs.NET.Core.Ecs.Units"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Units.op_Equality(Flecs.NET.Core.Ecs.Units,Flecs.NET.Core.Ecs.Units)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Units"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ecs.Units.op_Inequality(Flecs.NET.Core.Ecs.Units,Flecs.NET.Core.Ecs.Units)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ecs.Units"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Entity">
            <summary>
                A wrapper for working with entities.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Entity.Id">
            <summary>
                Reference to id.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Entity.World">
            <summary>
                Reference to world.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Null">
            <summary>
                Returns a null entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Null(Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Returns a null entity for the provided world.
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.#ctor(System.UInt64)">
            <summary>
                Creates an entity with the provided id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Flecs.NET.Core.Entity.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Creates an entity for the provided world.
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Flecs.NET.Core.Entity.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.UInt64)">
            <summary>
                Creates an entity from the provided world and id.
            </summary>
            <param name="world"></param>
            <param name="id"></param>
        </member>
        <member name="M:Flecs.NET.Core.Entity.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.String)">
            <summary>
                Creates an entity from the provided world and name.
            </summary>
            <param name="world"></param>
            <param name="name"></param>
        </member>
        <member name="M:Flecs.NET.Core.Entity.CsWorld">
            <summary>
                Returns the C# world for this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.IsValid">
            <summary>
                Check if entity is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.IsAlive">
            <summary>
                Check if entity is alive.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Name">
            <summary>
                Return the entity name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Symbol">
            <summary>
                Return the entity symbol.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Path(System.String,System.String)">
            <summary>
                Return the entity path.
            </summary>
            <param name="sep"></param>
            <param name="initSep"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.PathFrom(System.UInt64,System.String,System.String)">
            <summary>
                Return the entity path relative to a parent.
            </summary>
            <param name="parent"></param>
            <param name="sep"></param>
            <param name="initSep"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.PathFrom``1(System.String,System.String)">
            <summary>
                Return the entity path relative to a parent.
            </summary>
            <param name="sep"></param>
            <param name="initSep"></param>
            <typeparam name="TParent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Enabled">
            <summary>
                Check if entity is enabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Enabled(System.UInt64)">
            <summary>
                Checks if id is enabled.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Enabled(System.UInt64,System.UInt64)">
            <summary>
                Checks if pair is enabled.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Enabled``1">
            <summary>
                Checks if type is enabled.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Enabled``1(System.UInt64)">
            <summary>
                Checks if pair is enabled.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Enabled``2">
            <summary>
                Checks if pair is enabled.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.EnabledSecond``1(System.UInt64)">
            <summary>
                Checks if pair is enabled.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Type">
            <summary>
                Get the entity's type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Table">
            <summary>
                Get the entity's table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Range">
            <summary>
                Get table range for the entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Each(Flecs.NET.Core.Ecs.EachIdCallback)">
            <summary>
                Iterate (component) ids of an entity.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Each(System.UInt64,System.UInt64,Flecs.NET.Core.Ecs.EachIdCallback)">
            <summary>
                Iterate matching pair ids of an entity.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Each(System.UInt64,Flecs.NET.Core.Ecs.EachEntityCallback)">
            <summary>
                Iterate targets for a given relationship.
            </summary>
            <param name="relation"></param>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Each``1(Flecs.NET.Core.Ecs.EachEntityCallback)">
            <summary>
                Iterate targets for a given relationship.
            </summary>
            <param name="func"></param>
            <typeparam name="TFirst"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Children(System.UInt64,Flecs.NET.Core.Ecs.EachEntityCallback)">
            <summary>
                Iterate children for entity.
            </summary>
            <param name="relation"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Children``1(Flecs.NET.Core.Ecs.EachEntityCallback)">
            <summary>
            </summary>
            <param name="callback"></param>
            <typeparam name="TRel"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Children(Flecs.NET.Core.Ecs.EachEntityCallback)">
            <summary>
                Iterate children for entity.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetPtr(System.UInt64)">
            <summary>
                Get pointer to component value.
            </summary>
            <param name="compId"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetPtr(System.UInt64,System.UInt64)">
            <summary>
                Get pointer to component value from pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetPtr``1">
            <summary>
                Get pointer to component value.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetEnumPtr``1">
            <summary>
                Get pointer to component value.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetPtr``1(System.UInt64)">
            <summary>
                Get pointer to component value from pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetPtr``2(``1)">
            <summary>
                Get pointer to component value from pair.
            </summary>
            <param name="secondEnum"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecondEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetFirstPtr``2">
            <summary>
                Get pointer to component value from pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetSecondPtr``2">
            <summary>
                Get pointer to component value from pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetSecondPtr``1(System.UInt64)">
            <summary>
                Get pointer to component value from pair.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Get``1">
            <summary>
                Get managed reference to component value.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetEnum``1">
            <summary>
                Get managed reference to component value.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Get``1(System.UInt64)">
            <summary>
                Get managed reference to component value from pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Get``2(``1)">
            <summary>
                Get managed reference to component value from pair.
            </summary>
            <param name="enumMember"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecondEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetFirst``2">
            <summary>
                Get managed reference to component value from pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetSecond``2">
            <summary>
                Get managed reference to component value from pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetSecond``1(System.UInt64)">
            <summary>
                Get managed reference to component value from pair.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Target(System.UInt64,System.Int32)">
            <summary>
                Get target for a given pair.
            </summary>
            <param name="relation"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Target``1(System.Int32)">
            <summary>
                Get target for a given pair.
            </summary>
            <param name="index"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.TargetFor(System.UInt64,System.UInt64)">
            <summary>
                Get the target of a pair for a given relationship id.
            </summary>
            <param name="relation"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.TargetFor``1(System.UInt64)">
            <summary>
                Get the target of a pair for a given relationship id.
            </summary>
            <param name="relation"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.TargetFor``2(System.UInt64)">
            <summary>
                Get the target of a pair for a given relationship id.
            </summary>
            <param name="relation"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Depth(System.UInt64)">
            <summary>
                Get depth for given relationship.
            </summary>
            <param name="rel"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Depth``1">
            <summary>
                Get depth for given relationship.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Parent">
            <summary>
                Get parent of entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Lookup(System.String,System.Boolean)">
            <summary>
                Lookup an entity by name.
            </summary>
            <param name="path"></param>
            <param name="searchPath"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Has(System.UInt64)">
            <summary>
                Check if entity has the provided entity.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Has(System.UInt64,System.UInt64)">
            <summary>
                Check if entity has the provided pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Has``1">
            <summary>
                Check if entity has the provided component.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Has``1(``0)">
            <summary>
                Check if entity has the provided enum constant.
            </summary>
            <param name="enumMember"></param>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Has``1(System.UInt64)">
            <summary>
                Check if entity has the provided pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Has``2">
            <summary>
                Check if entity has the provided pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Has``2(``1)">
            <summary>
                Check if entity has the provided pair.
            </summary>
            <param name="enumMember"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecondEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.HasSecond``1(System.UInt64)">
            <summary>
                Check if entity has the provided pair.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Owns(System.UInt64)">
            <summary>
                Check if entity owns the provided entity.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Owns(System.UInt64,System.UInt64)">
            <summary>
                Check if entity owns the provided pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Owns``1">
            <summary>
                Check if entity owns the provided component.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Owns``1(System.UInt64)">
            <summary>
                Check if entity owns the provided pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Owns``2">
            <summary>
                Check if entity owns the provided pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Clone(System.Boolean,System.UInt64)">
            <summary>
                Clones the entity.
            </summary>
            <param name="cloneValue"></param>
            <param name="dstId"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Mut(Flecs.NET.Core.World@)">
            <summary>
                Return mutable entity handle for current stage.
            </summary>
            <param name="stage"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Mut(Flecs.NET.Core.Iter@)">
            <summary>
                Return mutable entity handle for current iter.
            </summary>
            <param name="it"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Mut(Flecs.NET.Core.Entity@)">
            <summary>
                Return mutable entity handle for current entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Mut(Flecs.NET.Core.World)">
            <summary>
                Return mutable entity handle for current stage.
            </summary>
            <param name="stage"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Mut(Flecs.NET.Core.Iter)">
            <summary>
                Return mutable entity handle for current iter.
            </summary>
            <param name="it"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Mut(Flecs.NET.Core.Entity)">
            <summary>
                Return mutable entity handle for current entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.ToJson(Flecs.NET.Bindings.Native.ecs_entity_to_json_desc_t*)">
            <summary>
                Serialize entity to JSON.
            </summary>
            <param name="desc"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.DocName">
            <summary>
                Returns the entity's doc name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.DocBrief">
            <summary>
                Returns the entity's doc brief.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.DocDetail">
            <summary>
                Returns the entity's doc detail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.DocLink">
            <summary>
                Returns the entity's doc detail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.DocColor">
            <summary>
                Returns the entity's doc color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.AlertCount(System.UInt64)">
            <summary>
                Return number of alerts for entity.
            </summary>
            <param name="alert"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.ToConstant``1">
            <summary>
                Convert entity to enum constant.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Emit(System.UInt64)">
            <summary>
                Emits an event for this entity.
            </summary>
            <param name="eventId"></param>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Emit(Flecs.NET.Core.Entity)">
            <summary>
                Emits an event for this entity.
            </summary>
            <param name="eventId"></param>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Emit``1">
            <summary>
                Emits an event for this entity.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Emit``1(``0)">
            <summary>
                Emits an event for this entity.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.Entity.IsChildOf(System.UInt64)">
            <summary>
                Short for Has(EcsChildOf, entity).
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.IsChildOf``1">
            <summary>
                Short for Has(EcsChildOf, entity).
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.IsChildOf``1(``0)">
            <summary>
                Short for Has(EcsChildOf, entity).
            </summary>
            <param name="enumMember"></param>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Add(System.UInt64)">
            <summary>
                Add an entity to entity.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Add(System.UInt64,System.UInt64)">
            <summary>
                Add pair to entity.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Add``1">
            <summary>
                Add a component to entity.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Add``1(System.UInt64)">
            <summary>
                Add a pair to entity.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Add``1(``0)">
            <summary>
                Add an enum to entity.
            </summary>
            <param name="enumMember"></param>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Add``2">
            <summary>
                Add a pair to entity.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Add``2(``1)">
            <summary>
                Add a pair to entity.
            </summary>
            <param name="enumMember"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecondEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.AddSecond``1(System.UInt64)">
            <summary>
                Add a pair to entity.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.AddIf(System.Boolean,System.UInt64)">
            <summary>
                Conditionally adds an entity to entity.
            </summary>
            <param name="cond"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.AddIf(System.Boolean,System.UInt64,System.UInt64)">
            <summary>
                Conditionally adds a pair to entity.
            </summary>
            <param name="cond"></param>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.AddIf``1(System.Boolean)">
            <summary>
                Conditionally adds a component to entity.
            </summary>
            <param name="cond"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.AddIf``1(System.Boolean,``0)">
            <summary>
                Conditionally adds an enum to entity.
            </summary>
            <param name="cond"></param>
            <param name="enumMember"></param>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.AddIf``1(System.Boolean,System.UInt64)">
            <summary>
                Conditionally adds a pair to entity.
            </summary>
            <param name="cond"></param>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.AddIf``2(System.Boolean)">
            <summary>
                Conditionally adds a pair to entity.
            </summary>
            <param name="cond"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.IsA(System.UInt64)">
            <summary>
                Shortcut for Add(EcsIsA, entity).
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.IsA``1">
            <summary>
                Shortcut for Add(EcsIsA, entity).
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.ChildOf(System.UInt64)">
            <summary>
                Shortcut for Add(EcsChildOf, entity).
            </summary>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.ChildOf``1">
            <summary>
                Shortcut for Add(EcsChildOf, entity).
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.DependsOn(System.UInt64)">
            <summary>
                Shortcut for Add(EcDependsOn, entity).
            </summary>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.DependsOn``1">
            <summary>
                Shortcut for Add(EcDependsOn, entity).
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SlotOf(System.UInt64)">
            <summary>
                Shortcut for Add(EcsSlotOf, entity).
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SlotOf``1">
            <summary>
                Shortcut for Add(EcsSlotOf, entity).
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Slot">
            <summary>
                Shortcut for Add(EcsSlotOf, Target(EcsChildOf)).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Remove(System.UInt64)">
            <summary>
                Remove an entity from entity.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Remove(System.UInt64,System.UInt64)">
            <summary>
                Remove a pair from entity.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Remove``1">
            <summary>
                Remove a component from entity.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.RemoveEnum``1">
            <summary>
                Remove pair for enum.
                This operation will remove any (Enum, *) pair from the entity.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Remove``1(``0)">
            <summary>
                Remove an enum from entity.
            </summary>
            <param name="enumMember"></param>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Remove``1(System.UInt64)">
            <summary>
                Remove a pair from entity.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Remove``2">
            <summary>
                Remove a pair from entity.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Remove``2(``1)">
            <summary>
                Remove a pair from entity.
            </summary>
            <param name="enumMember"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecondEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.RemoveSecond``1(System.UInt64)">
            <summary>
                Remove a pair from entity.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Override(System.UInt64)">
            <summary>
                Mark id for auto-overriding.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Override(System.UInt64,System.UInt64)">
            <summary>
                Mark a pair for auto-overriding.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Override``1">
            <summary>
                Mark a component or auto-overriding.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Override``1(System.UInt64)">
            <summary>
                Mark a pair for auto-overriding.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Override``2">
            <summary>
                Mark a pair for auto-overriding.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.OverrideSecond``1(System.UInt64)">
            <summary>
                Mark a pair for auto-overriding.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetOverride``1(``0)">
            <summary>
                Set component, mark component for auto-overriding.
            </summary>
            <param name="component"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetOverride``1(System.UInt64,``0)">
            <summary>
                Set pair, mark component for auto-overriding.
            </summary>
            <param name="second"></param>
            <param name="component"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetOverrideFirst``2(``0)">
            <summary>
                Set pair, mark component for auto-overriding.
            </summary>
            <param name="component"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetOverrideSecond``2(``1)">
            <summary>
                Set pair, mark component for auto-overriding.
            </summary>
            <param name="component"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetOverrideSecond``1(System.UInt64,``0)">
            <summary>
                Set pair, mark component for auto-overriding.
            </summary>
            <param name="first"></param>
            <param name="component"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Enable">
            <summary>
                Enable this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Enable(System.UInt64)">
            <summary>
                Enable an id for entity.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Enable(System.UInt64,System.UInt64)">
            <summary>
                Enable pair for entity.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Enable``1">
            <summary>
                Enable component for entity.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Enable``1(System.UInt64)">
            <summary>
                Enable pair for entity.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Enable``2">
            <summary>
                Enable pair for entity.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Disable">
            <summary>
                Disable this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Disable(System.UInt64)">
            <summary>
                Disable an id for entity.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Disable(System.UInt64,System.UInt64)">
            <summary>
                Disable pair for entity.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Disable``1">
            <summary>
                Disable component for entity.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Disable``1(System.UInt64)">
            <summary>
                Disable pair for entity.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Disable``2">
            <summary>
                Disable pair for entity.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetPtr(System.UInt64,System.Int32,System.Void*)">
            <summary>
                Sets data for id.
            </summary>
            <param name="componentId"></param>
            <param name="size"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetPtr(System.UInt64,System.UInt64,System.Void*)">
            <summary>
                Sets data for id.
            </summary>
            <param name="componentId"></param>
            <param name="size"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetPtr(System.UInt64,System.Void*)">
            <summary>
                Sets data for id.
            </summary>
            <param name="componentId"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Set``1(``0)">
            <summary>
                Sets data for component.
            </summary>
            <param name="component"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Set``1(``0@)">
            <summary>
                Sets data for component.
            </summary>
            <param name="component"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Set``1(System.UInt64,``0)">
            <summary>
                Sets data for pair.
            </summary>
            <param name="second"></param>
            <param name="component"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Set``1(System.UInt64,``0@)">
            <summary>
                Sets data for pair.
            </summary>
            <param name="second"></param>
            <param name="component"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Set``2(``1,``0@)">
            <summary>
                Sets data for pair.
            </summary>
            <param name="enumMember"></param>
            <param name="component"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecondEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Set``2(``1,``0)">
            <summary>
                Sets data for pair.
            </summary>
            <param name="enumMember"></param>
            <param name="component"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecondEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetFirst``2(``0)">
            <summary>
                Sets data for pair.
            </summary>
            <param name="component"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetFirst``2(``0@)">
            <summary>
                Sets data for pair.
            </summary>
            <param name="component"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetSecond``2(``1)">
            <summary>
                Sets data for pair.
            </summary>
            <param name="component"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetSecond``2(``1@)">
            <summary>
                Sets data for pair.
            </summary>
            <param name="component"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetSecond``1(System.UInt64,``0)">
            <summary>
                Sets data for pair.
            </summary>
            <param name="first"></param>
            <param name="component"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetSecond``1(System.UInt64,``0@)">
            <summary>
                Sets data for pair.
            </summary>
            <param name="first"></param>
            <param name="component"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.With(System.Action)">
            <summary>
                Entities created in function will have the current entity.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.With(System.UInt64,System.Action)">
            <summary>
                Entities created in function will have (First, this).
            </summary>
            <param name="first"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.With``1(System.Action)">
            <summary>
                Entities created in function will have (TFirst, this).
            </summary>
            <param name="func"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Scope(System.Action)">
            <summary>
                The function will be ran with the scope set to the current entity.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetName(System.String)">
            <summary>
                Set the entity name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetAlias(System.String)">
            <summary>
                Set entity alias.
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetDocName(System.String)">
            <summary>
                Set doc name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetDocBrief(System.String)">
            <summary>
                Set doc brief.
            </summary>
            <param name="brief"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetDocDetail(System.String)">
            <summary>
                Set doc detailed description.
            </summary>
            <param name="detail"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetDocLink(System.String)">
            <summary>
                Set doc link.
            </summary>
            <param name="link"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetDocColor(System.String)">
            <summary>
                Set doc color.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Unit(System.String,System.UInt64,System.UInt64,System.UInt64,System.Int32,System.Int32)">
            <summary>
                Make entity a unit.
            </summary>
            <param name="symbol"></param>
            <param name="prefix"></param>
            <param name="base"></param>
            <param name="over"></param>
            <param name="factor"></param>
            <param name="power"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Unit(System.UInt64,System.UInt64,System.UInt64,System.Int32,System.Int32)">
            <summary>
                Make entity a derived unit.
            </summary>
            <param name="prefix"></param>
            <param name="base"></param>
            <param name="over"></param>
            <param name="factor"></param>
            <param name="power"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.UnitPrefix(System.String,System.Int32,System.Int32)">
            <summary>
                Make unit a prefix.
            </summary>
            <param name="symbol"></param>
            <param name="factor"></param>
            <param name="power"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Quantity(System.UInt64)">
            <summary>
                Add quantity to unit.
            </summary>
            <param name="quantity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Quantity``1">
            <summary>
                Make entity a quantity.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Quantity">
            <summary>
                Make entity a quantity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetJson(System.UInt64,System.String,Flecs.NET.Bindings.Native.ecs_from_json_desc_t*)">
            <summary>
                Set component from JSON.
            </summary>
            <param name="e"></param>
            <param name="json"></param>
            <param name="desc"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetJson(System.UInt64,System.UInt64,System.String,Flecs.NET.Bindings.Native.ecs_from_json_desc_t*)">
            <summary>
                Set pair from JSON.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="json"></param>
            <param name="desc"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetJson``1(System.String,Flecs.NET.Bindings.Native.ecs_from_json_desc_t*)">
            <summary>
                Set component from JSON.
            </summary>
            <param name="json"></param>
            <param name="desc"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetJson``1(System.UInt64,System.String,Flecs.NET.Bindings.Native.ecs_from_json_desc_t*)">
            <summary>
                Set pair from JSON.
            </summary>
            <param name="second"></param>
            <param name="json"></param>
            <param name="desc"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetJson``2(System.String,Flecs.NET.Bindings.Native.ecs_from_json_desc_t*)">
            <summary>
                Set pair from JSON.
            </summary>
            <param name="json"></param>
            <param name="desc"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.SetJsonSecond``1(System.UInt64,System.String,Flecs.NET.Bindings.Native.ecs_from_json_desc_t*)">
            <summary>
                Set pair from JSON.
            </summary>
            <param name="first"></param>
            <param name="json"></param>
            <param name="desc"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Observe(System.UInt64,System.Action)">
            <summary>
                Observe an event on this entity.
            </summary>
            <param name="eventId"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Observe(System.UInt64,Flecs.NET.Core.Ecs.EachEntityCallback)">
            <summary>
                Observe an event on this entity.
            </summary>
            <param name="eventId"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Observe``1(System.Action)">
            <summary>
                Observe an event on this entity.
            </summary>
            <param name="callback"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Observe``1(Flecs.NET.Core.Ecs.EachEntityCallback)">
            <summary>
                Observe an event on this entity.
            </summary>
            <param name="callback"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Observe``1(Flecs.NET.Core.Ecs.EachCallback{``0})">
            <summary>
                Observe an event on this entity.
            </summary>
            <param name="callback"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Observe``1(Flecs.NET.Core.Ecs.EachEntityCallback{``0})">
            <summary>
                Observe an event on this entity.
            </summary>
            <param name="callback"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetMutPtr(System.UInt64)">
            <summary>
                Get mutable component value (untyped).
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetMutPtr(System.UInt64,System.UInt64)">
            <summary>
                Get mutable pointer for a pair (untyped).
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetMutPtr``1">
            <summary>
                Get mutable component value.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetMutEnumPtr``1">
            <summary>
                Get a mutable enum value.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetMutPtr``1(System.UInt64)">
            <summary>
                Get mutable pointer for the first element of a pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetMutPtr``2(``1)">
            <summary>
                Get mutable pointer for a pair.
            </summary>
            <param name="secondEnum"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecondEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetMutFirstPtr``2">
            <summary>
                Get mutable pointer for a pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetMutSecondPtr``2">
            <summary>
                Get mutable pointer for a pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetMutSecondPtr``1(System.UInt64)">
            <summary>
                Get mutable pointer for a pair.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetMut``1">
            <summary>
                Get mutable managed reference for component.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetMut``1(System.UInt64)">
            <summary>
                Get mutable managed reference for the first element of a pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetMutFirst``2">
            <summary>
                Get mutable managed reference for pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetMutSecond``2">
            <summary>
                Get mutable managed reference for pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetMutSecond``1(System.UInt64)">
            <summary>
                Get mutable managed reference for pair.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Modified(System.UInt64)">
            <summary>
                Signal that component was modified.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Modified(System.UInt64,System.UInt64)">
            <summary>
                Signal that pair was modified.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Modified``1">
            <summary>
                Signal that component was modified.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Modified``1(System.UInt64)">
            <summary>
                Signal that first element of pair was modified.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Modified``2">
            <summary>
                Signal that first element of pair was modified.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.Entity.ModifiedSecond``1(System.UInt64)">
            <summary>
                Signal that first element of pair was modified.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetRef``1">
            <summary>
                Get reference to component.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetRef``1(System.UInt64)">
            <summary>
                Get ref to pair component.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetRefFirst``2">
            <summary>
                Get ref to pair component.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetRefSecond``2">
            <summary>
                Get ref to pair component.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetRefSecond``1(System.UInt64)">
            <summary>
                Get ref to pair component.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Flatten(System.UInt64,Flecs.NET.Bindings.Native.ecs_flatten_desc_t*)">
            <summary>
                Recursively flatten relationship.
            </summary>
            <param name="relation"></param>
            <param name="desc"></param>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Clear">
            <summary>
                Clear an entity.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Destruct">
            <summary>
                Delete an entity.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Entity.FromJson(System.String)">
            <summary>
                Deserialize entity to JSON.
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.op_Implicit(Flecs.NET.Core.Entity)~System.UInt64">
            <summary>
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.ToUInt64(Flecs.NET.Core.Entity)">
            <summary>
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Equals(Flecs.NET.Core.Entity)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Entity"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Entity"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Entity"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.op_Equality(Flecs.NET.Core.Entity,Flecs.NET.Core.Entity)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Entity"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.op_Inequality(Flecs.NET.Core.Entity,Flecs.NET.Core.Entity)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Entity"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Entity.ToString">
            <summary>
                Returns the entity's name if it has one, otherwise return its id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.EnumType`1">
            <summary>
                A static class for registering enum types and it's members.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.EnumType`1.Init(Flecs.NET.Bindings.Native.ecs_world_t*,System.UInt64)">
            <summary>
                Inits entities for an enum type and it's members.
            </summary>
            <param name="world"></param>
            <param name="id"></param>
        </member>
        <member name="M:Flecs.NET.Core.EnumType`1.Id(`0,Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Gets an id for an enum member.
            </summary>
            <param name="member"></param>
            <param name="world"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Flecs.NET.Core.EventBuilder">
            <summary>
                Wrapper around ecs_event_desc_t.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.EventBuilder.World">
            <summary>
                A reference to the world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.EventBuilder.Desc">
            <summary>
                A reference to the event description.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.EventBuilder.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.UInt64)">
            <summary>
                Creates an event builder.
            </summary>
            <param name="world"></param>
            <param name="eventId"></param>
        </member>
        <member name="M:Flecs.NET.Core.EventBuilder.Id(System.UInt64)">
            <summary>
                Add (component) id to emit for
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.EventBuilder.Id(System.UInt64,System.UInt64)">
            <summary>
                Add pair to emit for.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.EventBuilder.Id``1">
            <summary>
                Add component to emit for.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.EventBuilder.Id``1(System.UInt64)">
            <summary>
                Add pair to emit for.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.EventBuilder.Id``2">
            <summary>
                Add pair to emit for.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.EventBuilder.Entity(System.UInt64)">
            <summary>
                Set entity for which to emit event
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.EventBuilder.Table(Flecs.NET.Bindings.Native.ecs_table_t*,System.Int32,System.Int32)">
            <summary>
                Set table for which to emit event.
            </summary>
            <param name="t"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.EventBuilder.Ctx(System.Void*)">
            <summary>
                Set event data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.EventBuilder.Ctx``1(``0*)">
            <summary>
                Set event data.
            </summary>
            <param name="data"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.EventBuilder.Emit">
            <summary>
                Emits the event.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.EventBuilder.Equals(Flecs.NET.Core.EventBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.EventBuilder"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.EventBuilder.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.EventBuilder"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.EventBuilder.GetHashCode">
            <summary>
                Gets the hash code of the <see cref="T:Flecs.NET.Core.EventBuilder"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.EventBuilder.op_Equality(Flecs.NET.Core.EventBuilder,Flecs.NET.Core.EventBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.EventBuilder"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.EventBuilder.op_Inequality(Flecs.NET.Core.EventBuilder,Flecs.NET.Core.EventBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.EventBuilder"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Filter">
            <summary>
                A filter allows for uncached, adhoc iteration over ECS data.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Filter.World">
            <summary>
                A reference to the world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Filter.Handle">
            <summary>
                A pointer to the filter.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Filter.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Core.FilterBuilder,System.String)">
            <summary>
                Creates a filter.
            </summary>
            <param name="world"></param>
            <param name="name"></param>
            <param name="filterBuilder"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Filter.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Bindings.Native.ecs_filter_t*)">
            <summary>
                Creates a filter with the specified world and filter pointer.
            </summary>
            <param name="world"></param>
            <param name="filter"></param>
        </member>
        <member name="M:Flecs.NET.Core.Filter.Dispose">
            <summary>
                Cleans up resources.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Filter.Entity">
            <summary>
                Returns the entity associated with the filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Filter.FieldCount">
            <summary>
                Returns the field count of the filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Filter.Str">
            <summary>
                Returns the string representation of the filter query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Filter.Iter">
            <summary>
                Create an iterator object that can be modified before iterating.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Filter.Iter(Flecs.NET.Core.Ecs.IterCallback)">
            <summary>
                Iterates the filter using the provided callback.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.Filter.Each(Flecs.NET.Core.Ecs.EachEntityCallback)">
            <summary>
                Iterates the filter using the provided callback.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.Filter.Each(Flecs.NET.Core.Ecs.EachIndexCallback)">
            <summary>
                Iterates the filter using the provided callback.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.Filter.Equals(Flecs.NET.Core.Filter)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Filter"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Filter.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Filter"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Filter.GetHashCode">
            <summary>
                Gets the hash code of the <see cref="T:Flecs.NET.Core.Filter"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Filter.op_Equality(Flecs.NET.Core.Filter,Flecs.NET.Core.Filter)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Filter"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Filter.op_Inequality(Flecs.NET.Core.Filter,Flecs.NET.Core.Filter)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Filter"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.FilterBuilder">
            <summary>
                A wrapper around ecs_filter_desc_t.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.FilterBuilder.World">
            <summary>
                A reference to the world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.FilterBuilder.Desc">
            <summary>
                A reference to the filter description.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Creates a filter builder for the provided world.
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Dispose">
            <summary>
                Cleans up resources.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Self">
            <summary>
                The self flags indicates the term identifier itself is used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Up(System.UInt64)">
            <summary>
                The up flag indicates that the term identifier may be substituted by
                traversing a relationship upwards. For example: substitute the identifier
                with its parent by traversing the ChildOf relationship.
            </summary>
            <param name="traverse"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Up``1">
            <summary>
                The up flag indicates that the term identifier may be substituted by
                traversing a relationship upwards. For example: substitute the identifier
                with its parent by traversing the ChildOf relationship.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Cascade(System.UInt64)">
            <summary>
                The cascade flag is like up, but returns results in breadth-first order.
                Only supported for Query.
            </summary>
            <param name="traverse"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Cascade``1">
            <summary>
                The cascade flag is like up, but returns results in breadth-first order.
                Only supported for Query.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Descend">
            <summary>
                Use with cascade to iterate results in descending (bottom -> top) order
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Parent">
            <summary>
                The parent flag is short for Up(EcsChildOf).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Trav(System.UInt64,System.UInt32)">
            <summary>
                Specify relationship to traverse, and flags to indicate direction.
            </summary>
            <param name="traverse"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Id(System.UInt64)">
            <summary>
                Specify value of identifier by id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Entity(System.UInt64)">
            <summary>
                Specify value of identifier by id. Almost the same as id(entity), but this
                operation explicitly sets the EcsIsEntity flag. This forces the id to
                be interpreted as entity, whereas not setting the flag would implicitly
                convert ids for builtin variables such as EcsThis to a variable.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Name(System.String)">
            <summary>
                Specify value of identifier by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Var(System.String)">
            <summary>
                Specify identifier is a variable (resolved at query evaluation time).
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Flags(System.UInt32)">
            <summary>
                Override term id flags.
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Src">
            <summary>
                Call prior to setting values for src identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.First">
            <summary>
                Call prior to setting values for first identifier. This is either the
                component identifier, or first element of a pair (in case second is
                populated as well).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Second">
            <summary>
                Call prior to setting values for second identifier. This is the second
                element of a pair. Requires that First() is populated as well.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Src(System.UInt64)">
            <summary>
                Select src identifier, initialize it with entity id.
            </summary>
            <param name="srcId"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Src``1">
            <summary>
                Select src identifier, initialize it with id associated with type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Src(System.String)">
            <summary>
                Select src identifier, initialize it with name. If name starts with a $
                the name is interpreted as a variable.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.First(System.UInt64)">
            <summary>
                Select first identifier, initialize it with entity id.
            </summary>
            <param name="firstId"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.First``1">
            <summary>
                Select first identifier, initialize it with id associated with type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.First(System.String)">
            <summary>
                Select first identifier, initialize it with name. If name starts with a $
                the name is interpreted as a variable.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Second(System.UInt64)">
            <summary>
                Select second identifier, initialize it with entity id.
            </summary>
            <param name="secondId"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Second``1">
            <summary>
                Select second identifier, initialize it with id associated with type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Second(System.String)">
            <summary>
                Select second identifier, initialize it with name. If name starts with a $
                the name is interpreted as a variable.
            </summary>
            <param name="secondName"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Role(System.UInt64)">
            <summary>
                Set role of term.
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.InOut(Flecs.NET.Bindings.Native.ecs_inout_kind_t)">
            <summary>
                Set read/write access of term.
            </summary>
            <param name="inOut"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.InOutStage(Flecs.NET.Bindings.Native.ecs_inout_kind_t)">
            <summary>
                Set read/write access for stage. Use this when a system reads or writes
                components other than the ones provided by the query. This information
                can be used by schedulers to insert sync/merge points between systems
                where deferred operations are flushed.
                Setting this is optional. If not set, the value of the accessed component
                may be out of sync for at most one frame.
            </summary>
            <param name="inOut"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Write">
            <summary>
                Short for InOutStage(EcsOut).
                Use when system uses add, remove or set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Read">
            <summary>
                Short for InOutStage(EcsIn).
                Use when system uses get.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.ReadWrite">
            <summary>
                Short for InOutStage(EcsInOut).
                Use when system uses get_mut.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.In">
            <summary>
                Short for InOut(EcsIn)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Out">
            <summary>
                Short for InOut(EcsOut)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.InOut">
            <summary>
                Short for InOut(EcsInOut)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.InOutNone">
            <summary>
                Short for InOut(EcsInOutNone)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Oper(Flecs.NET.Bindings.Native.ecs_oper_kind_t)">
            <summary>
                Set operator of term.
            </summary>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.And">
            <summary>
                Short for Oper(EcsAnd).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Or">
            <summary>
                Short for Oper(EcsOr).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Not">
            <summary>
                Short for Oper(EcsNot).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Optional">
            <summary>
                Short for Oper(EcsOptional).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.AndFrom">
            <summary>
                Short for Oper(EcsAndFrom).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.OrFrom">
            <summary>
                Short for Oper(EcsOFrom).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.NotFrom">
            <summary>
                Short for Oper(EcsNotFrom).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Singleton">
            <summary>
                Match singleton.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Filter">
            <summary>
                Filter terms are not triggered on by observers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Instanced">
            <summary>
                When true, terms returned by an iterator may either contain 1 or N
                elements, where terms with N elements are owned, and terms with 1 element
                are shared, for example from a parent or base entity. When false, the
                iterator will at most return 1 element when the result contains both
                owned and shared terms.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.FilterFlags(System.UInt32)">
            <summary>
                Set flags for advanced usage
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Expr(System.String)">
            <summary>
                Filter expression. Should not be set at the same time as terms array.
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.With(System.UInt64)">
            <summary>
                Alternative form of Term().
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.With(System.UInt64,System.UInt64)">
            <summary>
                Alternative form of Term().
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.With(System.UInt64,System.String)">
            <summary>
                Alternative form of Term().
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.With(System.String,System.UInt64)">
            <summary>
                Alternative form of Term().
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.With(System.String,System.String)">
            <summary>
                Alternative form of Term().
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.With``1">
            <summary>
                Alternative form of Term().
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.With``1(``0)">
            <summary>
                Alternative form of Term().
            </summary>
            <param name="enumMember"></param>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.With``1(System.UInt64)">
            <summary>
                Alternative form of Term().
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.With``1(System.String)">
            <summary>
                Alternative form of Term().
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.With``2">
            <summary>
                Alternative form of Term().
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.With``2(``1)">
            <summary>
                Alternative form of Term().
            </summary>
            <param name="secondEnum"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecondEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.WithSecond``1(System.UInt64)">
            <summary>
                Alternative form of TermSecond().
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.WithSecond``1(System.String)">
            <summary>
                Alternative form of TermSecond().
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Without(System.UInt64)">
            <summary>
                Alternative form of Term().Not().
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Without(System.UInt64,System.UInt64)">
            <summary>
                Alternative form of Term().Not().
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Without(System.UInt64,System.String)">
            <summary>
                Alternative form of Term().Not().
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Without(System.String,System.UInt64)">
            <summary>
                Alternative form of Term().Not().
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Without(System.String,System.String)">
            <summary>
                Alternative form of Term().Not().
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Without``1">
            <summary>
                Alternative form of Term().Not().
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Without``1(``0)">
            <summary>
                Alternative form of Term().Not().
            </summary>
            <param name="enumMember"></param>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Without``1(System.UInt64)">
            <summary>
                Alternative form of Term().Not().
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Without``1(System.String)">
            <summary>
                Alternative form of Term().Not().
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Without``2">
            <summary>
                Alternative form of Term().Not().
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Without``2(``1)">
            <summary>
                Alternative form of Term().Not().
            </summary>
            <param name="secondEnum"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecondEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.WithoutSecond``1(System.UInt64)">
            <summary>
                Alternative form of TermSecond().Not().
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.WithoutSecond``1(System.String)">
            <summary>
                Alternative form of TermSecond().Not().
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Write(System.UInt64)">
            <summary>
                Alternative form of Term().Write().
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Write(System.UInt64,System.UInt64)">
            <summary>
                Alternative form of Term().Write().
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Write(System.UInt64,System.String)">
            <summary>
                Alternative form of Term().Write().
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Write(System.String,System.UInt64)">
            <summary>
                Alternative form of Term().Write().
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Write(System.String,System.String)">
            <summary>
                Alternative form of Term().Write().
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Write``1">
            <summary>
                Alternative form of Term().Write().
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Write``1(``0)">
            <summary>
                Alternative form of Term().Write().
            </summary>
            <param name="enumMember"></param>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Write``1(System.UInt64)">
            <summary>
                Alternative form of Term().Write().
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Write``1(System.String)">
            <summary>
                Alternative form of Term().Write().
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Write``2">
            <summary>
                Alternative form of Term().Write().
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Write``2(``1)">
            <summary>
                Alternative form of Term().Write().
            </summary>
            <param name="secondEnum"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecondEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.WriteSecond``1(System.UInt64)">
            <summary>
                Alternative form of TermSecond().Write().
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.WriteSecond``1(System.String)">
            <summary>
                Alternative form of TermSecond().Write().
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Read(System.UInt64)">
            <summary>
                Alternative form of Term().Read().
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Read(System.UInt64,System.UInt64)">
            <summary>
                Alternative form of Term().Read().
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Read(System.UInt64,System.String)">
            <summary>
                Alternative form of Term().Read().
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Read(System.String,System.UInt64)">
            <summary>
                Alternative form of Term().Read().
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Read(System.String,System.String)">
            <summary>
                Alternative form of Term().Read().
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Read``1">
            <summary>
                Alternative form of Term().Read().
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Read``1(``0)">
            <summary>
                Alternative form of Term().Read().
            </summary>
            <param name="enumMember"></param>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Read``1(System.UInt64)">
            <summary>
                Alternative form of Term().Read().
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Read``1(System.String)">
            <summary>
                Alternative form of Term().Read().
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Read``2">
            <summary>
                Alternative form of Term().Read().
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Read``2(``1)">
            <summary>
                Alternative form of Term().Read().
            </summary>
            <param name="secondEnum"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecondEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.ReadSecond``1(System.UInt64)">
            <summary>
                Alternative form of TermSecond().Read().
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.ReadSecond``1(System.String)">
            <summary>
                Alternative form of TermSecond().Read().
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.ScopeOpen">
            <summary>
                Alternative form of With(EcsScopeOpen).Entity(0)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.ScopeClose">
            <summary>
                Alternative form of With(EcsScopeClose).Entity(0)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.IncrementTerm">
            <summary>
                Increments to the next term.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.TermAt(System.Int32)">
            <summary>
                Sets the current term to the one at the provided index.
            </summary>
            <param name="termIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Arg(System.Int32)">
            <summary>
                Alternative form for TermAt().
            </summary>
            <param name="termIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Term(System.UInt64)">
            <summary>
                Increments to the next term with the provided id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Term(System.String)">
            <summary>
                Increments to the next term with the provided name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Term(System.UInt64,System.UInt64)">
            <summary>
                Increments to the next term with the provided pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Term(System.UInt64,System.String)">
            <summary>
                Increments to the next term with the provided pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Term(System.String,System.UInt64)">
            <summary>
                Increments to the next term with the provided pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Term(System.String,System.String)">
            <summary>
                Increments to the next term with the provided pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Term``1">
            <summary>
                Increments to the next term with the provided type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Term``1(``0)">
            <summary>
                Increments to the next term with the provided enum.
            </summary>
            <param name="enumMember"></param>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Term``1(System.UInt64)">
            <summary>
                Increments to the next term with the provided pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Term``1(System.String)">
            <summary>
                Increments to the next term with the provided pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Term``2">
            <summary>
                Increments to the next term with the provided pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Term``2(``1)">
            <summary>
                Increments to the next term with the provided pair.
            </summary>
            <param name="secondEnum"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecondEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.TermSecond``1(System.UInt64)">
            <summary>
                Increments to the next term with the provided pair.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.TermSecond``1(System.String)">
            <summary>
                Increments to the next term with the provided pair.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Equals(Flecs.NET.Core.FilterBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.FilterBuilder"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.FilterBuilder"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.GetHashCode">
            <summary>
                Returns the hash code for the <see cref="T:Flecs.NET.Core.EventBuilder"/>.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.op_Equality(Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.FilterBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.FilterBuilder"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.FilterBuilder.op_Inequality(Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.FilterBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.FilterBuilder"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.FlecsInternal">
            <summary>
                A static class for holding flecs internals.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.FlecsInternal.IsOsApiOverridden">
            <summary>
                Tests whether or not the os api is initialized.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.FlecsInternal.ResetCount">
            <summary>
                Current reset count.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.FlecsInternal.OverrideOsAbort">
            <summary>
                Override the default os api abort function to log C# stack traces.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.FlecsInternal.Reset">
            <summary>
                Resets all type ids.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.Id">
            <summary>
                Class that wraps around a flecs::id_t.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Id.World">
            <summary>
                A reference to the world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Id.Value">
            <summary>
                A reference to the id value.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Id.#ctor(System.UInt64)">
            <summary>
                Creates an id with the provided id value.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Flecs.NET.Core.Id.#ctor(System.UInt64,System.UInt64)">
            <summary>
                Creates an id with the provided pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="M:Flecs.NET.Core.Id.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.UInt64,System.UInt64)">
            <summary>
                Creates an id with the provided world and pair.
            </summary>
            <param name="world"></param>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="M:Flecs.NET.Core.Id.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.UInt64)">
            <summary>
                Creates an id with the provided world and id value.
            </summary>
            <param name="world"></param>
            <param name="id"></param>
        </member>
        <member name="M:Flecs.NET.Core.Id.#ctor(Flecs.NET.Core.Id,Flecs.NET.Core.Id)">
            <summary>
                Creates an id with the provided pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="M:Flecs.NET.Core.Id.#ctor(Flecs.NET.Core.Entity,Flecs.NET.Core.Entity)">
            <summary>
                Creates an id with the provided pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="M:Flecs.NET.Core.Id.IsPair">
            <summary>
                Test if id is pair. (has first, second)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.IsWildCard">
            <summary>
                Test if id is a wildcard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.IsEntity">
            <summary>
                Test if id is an entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.Entity">
            <summary>
                Return id as entity. (only allowed when id is valid entity)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.AddFlags(System.UInt64)">
            <summary>
                Return id with role added
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.RemoveFlags(System.UInt64)">
            <summary>
                Return id with role removed.
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.RemoveFlags">
            <summary>
                Return id without role.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.RemoveGeneration">
            <summary>
                Return id without generation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.TypeId">
            <summary>
                Return component type of id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.HasFlags(System.UInt64)">
            <summary>
                Test if id has specified flags.
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.HasFlags">
            <summary>
                Test if id has flags.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.Flags">
            <summary>
                Return id flags set on id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.HasRelation(System.UInt64)">
            <summary>
                Test if id has specified first.
            </summary>
            <param name="first"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.First">
            <summary>
                Get first element from a pair.
                If the id is not a pair, this operation will fail. When the id has a
                world, the operation will ensure that the returned id has the correct
                generation count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.Second">
            <summary>
                Get second element from a pair.
                If the id is not a pair, this operation will fail. When the id has a
                world, the operation will ensure that the returned id has the correct
                generation count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.Str">
            <summary>
                Convert id to string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.FlagsStr">
            <summary>
                Convert role of id to string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.CsWorld">
            <summary>
                Returns the C# world.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.op_Implicit(Flecs.NET.Core.Id)~System.UInt64">
            <summary>
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.op_Implicit(System.UInt64)~Flecs.NET.Core.Id">
            <summary>
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.FromUInt64(System.UInt64)">
            <summary>
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.ToUInt64(Flecs.NET.Core.Id)">
            <summary>
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.Equals(Flecs.NET.Core.Id)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Id"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Id"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Id"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.op_Equality(Flecs.NET.Core.Id,Flecs.NET.Core.Id)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Id"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.op_Inequality(Flecs.NET.Core.Id,Flecs.NET.Core.Id)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Id"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Id.ToString">
            <summary>
                Returns the string representation of the Id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.IFlecsModule">
            <summary>
                Interface for flecs modules.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.IFlecsModule.InitModule(Flecs.NET.Core.World@)">
            <summary>
                Register entities, components, and systems.
            </summary>
            <param name="world"></param>
        </member>
        <member name="T:Flecs.NET.Core.Invoker">
            <summary>
                A static class for holding callback invokers.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Invoker.Iter(Flecs.NET.Bindings.Native.ecs_iter_t*,Flecs.NET.Core.Ecs.IterCallback)">
            <summary>
                Invokes an iter callback using a delegate.
            </summary>
            <param name="iter"></param>
            <param name="callback"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Invoker.Each(Flecs.NET.Bindings.Native.ecs_iter_t*,Flecs.NET.Core.Ecs.EachEntityCallback)">
            <summary>
                Invokes an each callback using a delegate.
            </summary>
            <param name="iter"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Flecs.NET.Core.Invoker.Each(Flecs.NET.Bindings.Native.ecs_iter_t*,Flecs.NET.Core.Ecs.EachIndexCallback)">
            <summary>
                Invokes an each callback using a delegate.
            </summary>
            <param name="iter"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Flecs.NET.Core.Invoker.Observe(Flecs.NET.Bindings.Native.ecs_iter_t*,Flecs.NET.Core.Ecs.EachEntityCallback)">
            <summary>
                Invokes an entity observer using a delegate.
            </summary>
            <param name="iter"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Flecs.NET.Core.Invoker.Observe``1(Flecs.NET.Bindings.Native.ecs_iter_t*,Flecs.NET.Core.Ecs.EachCallback{``0})">
            <summary>
                Invokes an entity observer using a delegate.
            </summary>
            <param name="iter"></param>
            <param name="callback"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.Invoker.Observe``1(Flecs.NET.Bindings.Native.ecs_iter_t*,Flecs.NET.Core.Ecs.EachEntityCallback{``0})">
            <summary>
                Invokes an entity observer using a delegate.
            </summary>
            <param name="iter"></param>
            <param name="callback"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Flecs.NET.Core.Iter">
            <summary>
                Class for iterating over query results.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Iter.Handle">
            <summary>
                Reference to handle.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Iter.Begin">
            <summary>
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Iter.End">
            <summary>
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Iter.#ctor(Flecs.NET.Bindings.Native.ecs_iter_t*)">
            <summary>
                Creates an iter wrapper using the provided handle.
            </summary>
            <param name="iter"></param>
        </member>
        <member name="M:Flecs.NET.Core.Iter.System">
            <summary>
                Returns entity id of system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Event">
            <summary>
                Returns entity id of event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.EventId">
            <summary>
                Returns the entity id of the event id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.World">
            <summary>
                Returns staged C# world.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Count">
            <summary>
                Returns count of iter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.DeltaTime">
            <summary>
                Returns the delta time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.DeltaSystemTime">
            <summary>
                Returns the delta system time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Type">
            <summary>
                Returns the type of the iterated table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Table">
            <summary>
                Returns table of the iter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Range">
            <summary>
                Returns table range of the iter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.CtxPtr">
            <summary>
                Returns context pointer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.CtxPtr``1">
            <summary>
                Returns context pointer.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Ctx``1">
            <summary>
                Returns context ref.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.ParamPtr">
            <summary>
                Returns param pointer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.ParamPtr``1">
            <summary>
                Returns param pointer.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Param``1">
            <summary>
                Returns param ref.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Entity(System.Int32)">
            <summary>
                Obtain mutable handle to entity being iterated over.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.IsSelf(System.Int32)">
            <summary>
                Returns whether field is matched on self.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.IsSet(System.Int32)">
            <summary>
                Returns whether field is set.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.IsReadonly(System.Int32)">
            <summary>
                Returns whether field is readonly.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.FieldCount">
            <summary>
                Number of fields in iterator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Size(System.Int32)">
            <summary>
                Size of field data type.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Src(System.Int32)">
            <summary>
                Obtain field source (0 if This).
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Id(System.Int32)">
            <summary>
                Obtain id matched for field.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Pair(System.Int32)">
            <summary>
                Obtain pair id matched for field.
                This operation will fail if the id is not a pair.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.ColumnIndex(System.Int32)">
            <summary>
                Obtain column index for field.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Str">
            <summary>
                Convert current iterator result to string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Field``1(System.Int32)">
            <summary>
                Get access to field data.
            </summary>
            <param name="index"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Single``1(System.Int32)">
            <summary>
                Get managed ref to the first element in a field.
            </summary>
            <param name="index"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Entities">
            <summary>
                Get access to entity ids.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.TableCount">
            <summary>
                Obtain the total number of tables the iterator will iterate over.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Changed">
            <summary>
                Check if the current table has changed since the last iteration.
                Can only be used when iterating queries and/or systems.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Skip">
            <summary>
                Skip current table.
                This indicates to the query that the data in the current table is not
                modified. By default, iterating a table with a query will mark the
                iterated components as dirty if they are annotated with InOut or Out.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Iter.GroupId">
            <summary>
                Return group id for current table (grouped queries only)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.GetVar(System.Int32)">
            <summary>
                Get value of variable by id.
            </summary>
            <param name="varId"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.GetVar(System.String)">
            <summary>
                Get value of variable by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Gets an enumerator for iter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.GetEnumerator">
            <summary>
                Gets an enumerator for iter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Equals(Flecs.NET.Core.Iter)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Iter"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Iter.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Iter"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Iter.GetHashCode">
            <summary>
                Returns the hash code of te <see cref="T:Flecs.NET.Core.Iter"/>.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Iter.op_Equality(Flecs.NET.Core.Iter,Flecs.NET.Core.Iter)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Iter"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Iter.op_Inequality(Flecs.NET.Core.Iter,Flecs.NET.Core.Iter)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Iter"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.IterEnumerator">
            <summary>
                Enumerator for iters.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.IterEnumerator.Length">
            <summary>
                Length of the iter.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.IterEnumerator.Current">
            <summary>
                Current index of the iter.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.IterEnumerator.System#Collections#IEnumerator#Current">
            <summary>
                Current index of the iter.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.IterEnumerator.#ctor(System.Int32)">
            <summary>
                Create a new iter with the provided length.
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:Flecs.NET.Core.IterEnumerator.MoveNext">
            <summary>
                Moves to the next index of the iter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.IterEnumerator.Reset">
            <summary>
                Resets the index of the enumerator.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.IterEnumerator.Dispose">
            <summary>
                Disposes of resources.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.IterIterable">
            <summary>
                An iterator object that can be modified before iterating.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.IterIterable.#ctor(Flecs.NET.Bindings.Native.ecs_iter_t,System.IntPtr,System.IntPtr)">
            <summary>
                Creates an iter iterable.
            </summary>
            <param name="iter"></param>
            <param name="next"></param>
            <param name="nextEach"></param>
        </member>
        <member name="M:Flecs.NET.Core.IterIterable.SetVar(System.Int32,System.UInt64)">
            <summary>
                Set var value.
            </summary>
            <param name="varId"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.IterIterable.SetVar(System.String,System.UInt64)">
            <summary>
                Set var value.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.IterIterable.ToJson(Flecs.NET.Bindings.Native.ecs_iter_to_json_desc_t*)">
            <summary>
                Serialize iterator to JSON.
            </summary>
            <param name="desc"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.IterIterable.Count">
            <summary>
                Returns total number of entities in result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.IterIterable.IsTrue">
            <summary>
                Returns true if iterator yields at least once result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.IterIterable.First">
            <summary>
                Return first matching entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.IterIterable.SetGroup(System.UInt64)">
            <summary>
                Limit results to tables with specified group id (grouped queries only)
            </summary>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.IterIterable.SetGroup``1">
            <summary>
                Limit results to tables with specified group id (grouped queries only)
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.IterIterable.Iter(Flecs.NET.Core.Ecs.IterCallback)">
            <summary>
                Iterates using the provided callback.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.IterIterable.Each(Flecs.NET.Core.Ecs.EachEntityCallback)">
            <summary>
                Iterates using the provided callback.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.IterIterable.Each(Flecs.NET.Core.Ecs.EachIndexCallback)">
            <summary>
                Iterates using the provided callback.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.IterIterable.Equals(Flecs.NET.Core.IterIterable)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.IterIterable"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.IterIterable.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.IterIterable"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.IterIterable.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.IterIterable"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.IterIterable.op_Equality(Flecs.NET.Core.IterIterable,Flecs.NET.Core.IterIterable)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.IterIterable"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.IterIterable.op_Inequality(Flecs.NET.Core.IterIterable,Flecs.NET.Core.IterIterable)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.IterIterable"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.MetricBuilder">
            <summary>
                Metric builder interface.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.MetricBuilder.World">
            <summary>
                The world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.MetricBuilder.Desc">
            <summary>
                A reference to the desc struct.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.UInt64)">
            <summary>
                Creates a metric builder using the provided entity.
            </summary>
            <param name="world"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.Dispose">
            <summary>
                Disposes resources.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.Member(System.UInt64)">
            <summary>
                Set member.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.Member(System.String)">
            <summary>
                Set member.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.Member``1(System.String)">
            <summary>
                Set member.
            </summary>
            <param name="name"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.DotMember(System.String)">
            <summary>
                Set dot member.
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.DotMember``1(System.String)">
            <summary>
                Set dot member.
            </summary>
            <param name="expr"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.Id(System.UInt64)">
            <summary>
                Set id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.Id(System.UInt64,System.UInt64)">
            <summary>
                Set id.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.Id``1">
            <summary>
                Set id.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.Id``1(System.UInt64)">
            <summary>
                Set id.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.Id``2">
            <summary>
                Set id.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.IdSecond``1(System.UInt64)">
            <summary>
                Set id.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.Targets(System.Boolean)">
            <summary>
                Set target.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.Kind(System.UInt64)">
            <summary>
                Set kind.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.Kind``1">
            <summary>
                Set kind.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.Brief(System.String)">
            <summary>
                Set doc brief.
            </summary>
            <param name="brief"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.Equals(Flecs.NET.Core.MetricBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.MetricBuilder"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.MetricBuilder"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.MetricBuilder"/>.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.op_Equality(Flecs.NET.Core.MetricBuilder,Flecs.NET.Core.MetricBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.MetricBuilder"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.MetricBuilder.op_Inequality(Flecs.NET.Core.MetricBuilder,Flecs.NET.Core.MetricBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.MetricBuilder"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Module">
            <summary>
                Static class for importing modules.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Module.Import``1(Flecs.NET.Core.World)">
            <summary>
                Imports a module.
            </summary>
            <param name="world"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Module.DoImport``1(Flecs.NET.Core.World,System.String)">
            <summary>
                Imports a module.
            </summary>
            <param name="world"></param>
            <param name="symbol"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Observer">
            <summary>
                A wrapper around observer.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Observer.Entity">
            <summary>
                A reference to the entity.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Observer.Id">
            <summary>
                A reference to the entity.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Observer.World">
            <summary>
                A reference to the world.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Observer.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.ObserverBuilder,System.Action,System.String)">
            <summary>
                Creates an observer for the provided world.
            </summary>
            <param name="world"></param>
            <param name="filterBuilder"></param>
            <param name="observerBuilder"></param>
            <param name="callback"></param>
            <param name="name"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Observer.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.ObserverBuilder,Flecs.NET.Core.Ecs.IterCallback,System.String)">
            <summary>
                Creates an observer for the provided world.
            </summary>
            <param name="world"></param>
            <param name="filterBuilder"></param>
            <param name="observerBuilder"></param>
            <param name="callback"></param>
            <param name="name"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Observer.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.ObserverBuilder,Flecs.NET.Core.Ecs.EachEntityCallback,System.String)">
            <summary>
                Creates an observer for the provided world.
            </summary>
            <param name="world"></param>
            <param name="filterBuilder"></param>
            <param name="observerBuilder"></param>
            <param name="callback"></param>
            <param name="name"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Observer.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.ObserverBuilder,Flecs.NET.Core.Ecs.EachIndexCallback,System.String)">
            <summary>
                Creates an observer for the provided world.
            </summary>
            <param name="world"></param>
            <param name="filterBuilder"></param>
            <param name="observerBuilder"></param>
            <param name="callback"></param>
            <param name="name"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Observer.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.UInt64)">
            <summary>
                Gets an observer from the provided world an entity.
            </summary>
            <param name="world"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Flecs.NET.Core.Observer.Destruct">
            <summary>
                Destructs the observer.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Observer.Ctx(System.Void*)">
            <summary>
                Sets the observer context.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Flecs.NET.Core.Observer.Ctx">
            <summary>
                Gets the observer context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Observer.Ctx``1">
            <summary>
                Gets the observer context.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Observer.Filter">
            <summary>
                Returns the filter for the observer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Observer.ToUInt64">
            <summary>
                Converts a <see cref="T:Flecs.NET.Core.Observer"/> to a <see cref="T:System.UInt64"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Observer.op_Implicit(Flecs.NET.Core.Observer)~System.UInt64">
            <summary>
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Observer.Equals(Flecs.NET.Core.Observer)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Observer"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Observer.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Observer"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Observer.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Observer"/>.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Observer.op_Equality(Flecs.NET.Core.Observer,Flecs.NET.Core.Observer)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Observer"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Observer.op_Inequality(Flecs.NET.Core.Observer,Flecs.NET.Core.Observer)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Observer"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Observer.ToString">
            <summary>
                Returns the entity's name if it has one, otherwise return its id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.ObserverBuilder">
            <summary>
                A wrapper around ecs_observer_desc_t.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.ObserverBuilder.World">
            <summary>
                A reference to the world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.ObserverBuilder.Desc">
            <summary>
                A reference to the observer description.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.ObserverBuilder.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Creates an observer builder for the provided world.
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Flecs.NET.Core.ObserverBuilder.Dispose">
            <summary>
                Disposes the observer builder.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.ObserverBuilder.Event(System.UInt64)">
            <summary>
                Specify the event(s) for when the observer should run.
            </summary>
            <param name="event"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.ObserverBuilder.Event``1">
            <summary>
                Specify the event(s) for when the observer should run.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.ObserverBuilder.YieldExisting(System.Boolean)">
            <summary>
                Invoke observer for anything that matches its filter on creation.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.ObserverBuilder.Ctx(System.Void*)">
            <summary>
                Set observer context.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.ObserverBuilder.Run(Flecs.NET.Core.Ecs.IterAction)">
            <summary>
                Set observer run callback.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.ObserverBuilder.Equals(Flecs.NET.Core.ObserverBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.ObserverBuilder"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.ObserverBuilder.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.ObserverBuilder"/> instance are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.ObserverBuilder.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.ObserverBuilder"/>.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.ObserverBuilder.op_Equality(Flecs.NET.Core.ObserverBuilder,Flecs.NET.Core.ObserverBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.ObserverBuilder"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.ObserverBuilder.op_Inequality(Flecs.NET.Core.ObserverBuilder,Flecs.NET.Core.ObserverBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.ObserverBuilder"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Pipeline">
            <summary>
                A wrapper around pipeline.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Pipeline.Entity">
            <summary>
                A reference to the entity.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Pipeline.Id">
            <summary>
                A reference to the entity.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Pipeline.World">
            <summary>
                A reference to the world.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Pipeline.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.QueryBuilder,System.UInt64)">
            <summary>
                Creates a pipeline.
            </summary>
            <param name="world"></param>
            <param name="filterBuilder"></param>
            <param name="queryBuilder"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Flecs.NET.Core.Pipeline.ToString">
            <summary>
                Returns the entity's name if it has one, otherwise return its id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Pipeline.Equals(Flecs.NET.Core.Pipeline)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Pipeline"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Pipeline.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Pipeline"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Pipeline.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Pipeline"/>.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Pipeline.op_Equality(Flecs.NET.Core.Pipeline,Flecs.NET.Core.Pipeline)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Pipeline"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Pipeline.op_Inequality(Flecs.NET.Core.Pipeline,Flecs.NET.Core.Pipeline)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Pipeline"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Query">
            <summary>
                A wrapper around ecs_query_t.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Query.World">
            <summary>
                A reference to the world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Query.Handle">
            <summary>
                A reference to the handle.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Query.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.QueryBuilder,System.String)">
            <summary>
                Creates a query for the provided world.
            </summary>
            <param name="world"></param>
            <param name="name"></param>
            <param name="filterBuilder"></param>
            <param name="queryBuilder"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Query.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Bindings.Native.ecs_query_t*)">
            <summary>
                Creates a query from a world and handle.
            </summary>
            <param name="world"></param>
            <param name="query"></param>
        </member>
        <member name="M:Flecs.NET.Core.Query.Dispose">
            <summary>
                Disposes query.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Query.Destruct">
            <summary>
                Destructs query and cleans up resources.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Query.Changed">
            <summary>
                Returns whether the query data changed since the last iteration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Query.Orphaned">
            <summary>
                Returns whether query is orphaned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Query.GroupInfo(System.UInt64)">
            <summary>
                Get info for group.
            </summary>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Query.GroupCtx(System.UInt64)">
            <summary>
                Get context for group.
            </summary>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Query.Filter">
            <summary>
                Returns filter for query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Query.FieldCount">
            <summary>
                Returns the field count of the query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Query.Str">
            <summary>
                Returns the filter string of the query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Query.Entity">
            <summary>
                Returns the entity associated with the query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Query.Iter">
            <summary>
                Create an iterator object that can be modified before iterating.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Query.Iter(Flecs.NET.Core.Ecs.IterCallback)">
            <summary>
                Iterates the query.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.Query.Each(Flecs.NET.Core.Ecs.EachEntityCallback)">
            <summary>
                Iterates the query using the provided callback.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.Query.Each(Flecs.NET.Core.Ecs.EachIndexCallback)">
            <summary>
                Iterates the query using the provided callback.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.Query.Equals(Flecs.NET.Core.Query)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Query"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Query.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Query"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Query.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Query"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Query.op_Equality(Flecs.NET.Core.Query,Flecs.NET.Core.Query)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Query"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Query.op_Inequality(Flecs.NET.Core.Query,Flecs.NET.Core.Query)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Query"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.QueryBuilder">
            <summary>
                Wrapper around ecs_query_desc_t.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.QueryBuilder.World">
            <summary>
                Reference to the world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.QueryBuilder.Desc">
            <summary>
                Reference to the query description.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Creates a query builder for the provided world.
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.Dispose">
            <summary>
                Disposes the query builder.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.OrderBy``1(Flecs.NET.Core.Ecs.OrderByAction)">
            <summary>
                Sort the output of a query.
            </summary>
            <param name="compare"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.OrderBy(System.UInt64,Flecs.NET.Core.Ecs.OrderByAction)">
            <summary>
                Sort the output of a query.
            </summary>
            <param name="component"></param>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.GroupBy``1(Flecs.NET.Core.Ecs.GroupByAction)">
            <summary>
                Group and sort matched tables.
            </summary>
            <param name="groupByAction"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.GroupBy(System.UInt64,Flecs.NET.Core.Ecs.GroupByAction)">
            <summary>
                Group and sort matched tables.
            </summary>
            <param name="component"></param>
            <param name="groupByAction"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.GroupBy``1">
            <summary>
                Group and sort matched tables.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.GroupBy(System.UInt64)">
            <summary>
                Group and sort matched tables.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.GroupbyCtx(System.Void*,Flecs.NET.Core.Ecs.ContextFree)">
            <summary>
                Specify context to be passed to group_by function.
            </summary>
            <param name="ctx"></param>
            <param name="contextFree"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.GroupbyCtx(System.Void*)">
            <summary>
                Specify context to be passed to group_by function.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.OnGroupCreate(Flecs.NET.Core.Ecs.GroupCreateAction)">
            <summary>
                Specify on_group_create action.
            </summary>
            <param name="onGroupCreate"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.OnGroupDelete(Flecs.NET.Core.Ecs.GroupDeleteAction)">
            <summary>
                Specify on_group_delete action.
            </summary>
            <param name="onGroupDelete"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.Observable(Flecs.NET.Core.Query)">
            <summary>
                Specify parent query (creates subquery)
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.Observable(Flecs.NET.Core.Query@)">
            <summary>
                Specify parent query (creates subquery)
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.Equals(Flecs.NET.Core.QueryBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.QueryBuilder"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.QueryBuilder"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.QueryBuilder"/>.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.op_Equality(Flecs.NET.Core.QueryBuilder,Flecs.NET.Core.QueryBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.QueryBuilder"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.QueryBuilder.op_Inequality(Flecs.NET.Core.QueryBuilder,Flecs.NET.Core.QueryBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.QueryBuilder"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Ref`1">
            <summary>
                Reference to a component from a specific entity.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Flecs.NET.Core.Ref`1.World">
            <summary>
                A reference to the world.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Ref`1.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.UInt64,System.UInt64)">
            <summary>
                Creates a ref.
            </summary>
            <param name="world"></param>
            <param name="entity"></param>
            <param name="id"></param>
        </member>
        <member name="M:Flecs.NET.Core.Ref`1.GetPtr">
            <summary>
                Gets a pointer to the ref component.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Ref`1.Get">
            <summary>
                Gets a reference to the ref component.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ref`1.Entity">
            <summary>
                Returns the entity associated with the ref.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ref`1.Equals(Flecs.NET.Core.Ref{`0})">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ref`1"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ref`1.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ref`1"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ref`1.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Ref`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ref`1.op_Equality(Flecs.NET.Core.Ref{`0},Flecs.NET.Core.Ref{`0})">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ref`1"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Ref`1.op_Inequality(Flecs.NET.Core.Ref{`0},Flecs.NET.Core.Ref{`0})">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Ref`1"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Routine">
            <summary>
                Wrapper around system.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Routine.Entity">
            <summary>
                A reference to the entity.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Routine.Id">
            <summary>
                A reference to the entity.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Routine.World">
            <summary>
                A reference to the world.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Routine.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.QueryBuilder,Flecs.NET.Core.RoutineBuilder,System.Action,System.String)">
            <summary>
                Creates a routine for the provided world.
            </summary>
            <param name="world"></param>
            <param name="filterBuilder"></param>
            <param name="queryBuilder"></param>
            <param name="routineBuilder"></param>
            <param name="callback"></param>
            <param name="name"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Routine.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.QueryBuilder,Flecs.NET.Core.RoutineBuilder,Flecs.NET.Core.Ecs.IterCallback,System.String)">
            <summary>
                Creates a routine for the provided world.
            </summary>
            <param name="world"></param>
            <param name="filterBuilder"></param>
            <param name="queryBuilder"></param>
            <param name="routineBuilder"></param>
            <param name="callback"></param>
            <param name="name"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Routine.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.QueryBuilder,Flecs.NET.Core.RoutineBuilder,Flecs.NET.Core.Ecs.EachEntityCallback,System.String)">
            <summary>
                Creates a routine for the provided world.
            </summary>
            <param name="world"></param>
            <param name="filterBuilder"></param>
            <param name="queryBuilder"></param>
            <param name="routineBuilder"></param>
            <param name="callback"></param>
            <param name="name"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Routine.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.QueryBuilder,Flecs.NET.Core.RoutineBuilder,Flecs.NET.Core.Ecs.EachIndexCallback,System.String)">
            <summary>
                Creates a routine for the provided world.
            </summary>
            <param name="world"></param>
            <param name="filterBuilder"></param>
            <param name="queryBuilder"></param>
            <param name="routineBuilder"></param>
            <param name="callback"></param>
            <param name="name"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Routine.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.UInt64)">
            <summary>
                Creates a routine for the provided world.
            </summary>
            <param name="world"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Flecs.NET.Core.Routine.Destruct">
            <summary>
                Destructs the routine.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Routine.Ctx(System.Void*)">
            <summary>
                Sets the context for the routine.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Flecs.NET.Core.Routine.Ctx">
            <summary>
                Returns the context for the routine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Routine.Query">
            <summary>
                Returns the query for the routine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Routine.Run(System.Single,System.Int32,System.Int32)">
            <summary>
                Run the routine.
            </summary>
            <param name="deltaTime"></param>
            <param name="offset"></param>
            <param name="limit"></param>
        </member>
        <member name="M:Flecs.NET.Core.Routine.RunWithParam(System.Single,System.Void*,System.Int32,System.Int32)">
            <summary>
                Run the routine with a param.
            </summary>
            <param name="deltaTime"></param>
            <param name="param"></param>
            <param name="offset"></param>
            <param name="limit"></param>
        </member>
        <member name="M:Flecs.NET.Core.Routine.RunWorker(System.Int32,System.Int32,System.Single,System.Int32,System.Int32)">
            <summary>
                Run the routine.
            </summary>
            <param name="stageCurrent"></param>
            <param name="stageCount"></param>
            <param name="deltaTime"></param>
            <param name="offset"></param>
            <param name="limit"></param>
        </member>
        <member name="M:Flecs.NET.Core.Routine.RunWorkerWithParam(System.Int32,System.Int32,System.Single,System.Void*,System.Int32,System.Int32)">
            <summary>
                Run the routine with a param.
            </summary>
            <param name="stageCurrent"></param>
            <param name="stageCount"></param>
            <param name="deltaTime"></param>
            <param name="param"></param>
            <param name="offset"></param>
            <param name="limit"></param>
        </member>
        <member name="M:Flecs.NET.Core.Routine.Interval(System.Single)">
            <summary>
                Sets the interval for the routine.
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:Flecs.NET.Core.Routine.Interval">
            <summary>
                Returns the interval for the routine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Routine.Timeout(System.Single)">
            <summary>
                Sets the timeout for the routine.
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:Flecs.NET.Core.Routine.Timeout">
            <summary>
                Gets the timeout for the routine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Routine.Rate(System.Int32)">
            <summary>
                Sets the rate for the routine.
            </summary>
            <param name="rate"></param>
        </member>
        <member name="M:Flecs.NET.Core.Routine.Start">
            <summary>
                Starts the timer.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Routine.StopTimer">
            <summary>
                Stops the timer.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Routine.SetTickSource(System.UInt64)">
            <summary>
                Sets the external tick source.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Flecs.NET.Core.Routine.SetTickSource(Flecs.NET.Core.Timer)">
            <summary>
                Sets the external tick source.
            </summary>
            <param name="timer"></param>
        </member>
        <member name="M:Flecs.NET.Core.Routine.ToString">
            <summary>
                Returns the entity's name if it has one, otherwise return its id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Routine.Equals(Flecs.NET.Core.Routine)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Routine"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Routine.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Routine"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Routine.GetHashCode">
            <summary>
                Return the hash code of the <see cref="T:Flecs.NET.Core.Routine"/>.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Routine.op_Equality(Flecs.NET.Core.Routine,Flecs.NET.Core.Routine)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Routine"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Routine.op_Inequality(Flecs.NET.Core.Routine,Flecs.NET.Core.Routine)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Routine"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.RoutineBuilder">
            <summary>
                A wrapper around ecs_system_desc_t.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.RoutineBuilder.World">
            <summary>
                A reference to the world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.RoutineBuilder.Desc">
            <summary>
                A reference to the routine description.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.RoutineBuilder.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Creates a routine builder for the provided world.
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Flecs.NET.Core.RoutineBuilder.Dispose">
            <summary>
                Disposes the routine builder.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.RoutineBuilder.Kind(System.UInt64)">
            <summary>
                Specify in which phase the system should run.
            </summary>
            <param name="phase"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.RoutineBuilder.Kind``1">
            <summary>
                Specify in which phase the system should run.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.RoutineBuilder.MultiThreaded(System.Boolean)">
            <summary>
                Specify whether system can run on multiple threads.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.RoutineBuilder.NoReadonly(System.Boolean)">
            <summary>
                Specify whether system should be ran in staged context.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.RoutineBuilder.Interval(System.Single)">
            <summary>
                Set system interval.
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.RoutineBuilder.Rate(System.UInt64,System.Int32)">
            <summary>
                Set system rate.
            </summary>
            <param name="tickSource"></param>
            <param name="rate"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.RoutineBuilder.Rate(System.Int32)">
            <summary>
                Set system rate.
            </summary>
            <param name="rate"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.RoutineBuilder.TickSource(System.UInt64)">
            <summary>
                Set tick source.
            </summary>
            <param name="tickSource"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.RoutineBuilder.Ctx(System.Void*)">
            <summary>
                Set system context.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.RoutineBuilder.Run(Flecs.NET.Core.Ecs.IterAction)">
            <summary>
                Set system run callback.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.RoutineBuilder.Equals(Flecs.NET.Core.RoutineBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.RoutineBuilder"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.RoutineBuilder.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.RoutineBuilder"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.RoutineBuilder.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.RoutineBuilder"/>.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.RoutineBuilder.op_Equality(Flecs.NET.Core.RoutineBuilder,Flecs.NET.Core.RoutineBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.RoutineBuilder"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.RoutineBuilder.op_Inequality(Flecs.NET.Core.RoutineBuilder,Flecs.NET.Core.RoutineBuilder)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.RoutineBuilder"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Rule">
            <summary>
                A wrapper for ecs_rule_t.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Rule.World">
            <summary>
                A reference to the world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Rule.Handle">
            <summary>
                A reference to the handle.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Rule.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Core.FilterBuilder,System.String)">
            <summary>
                Creates a rule for the provided world.
            </summary>
            <param name="world"></param>
            <param name="name"></param>
            <param name="filterBuilder"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Flecs.NET.Core.Rule.Dispose">
            <summary>
                Disposes the rule.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Rule.Destruct">
            <summary>
                Destructs the rule.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Rule.IsValid">
            <summary>
                Tests if the rule is not null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Rule.Entity">
            <summary>
                Returns the entity associated with the rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Rule.Filter">
            <summary>
                Returns the filter for the rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Rule.Str">
            <summary>
                Converts rule to a string expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Rule.RuleStr">
            <summary>
                Converts rule to a string that can be used to aid in debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Rule.FindVar(System.String)">
            <summary>
                Searches for a variable by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Rule.Iter">
            <summary>
                Create an iterator object that can be modified before iterating.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Rule.Iter(Flecs.NET.Core.Ecs.IterCallback)">
            <summary>
                Iterates the rule using the provided callback.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.Rule.Each(Flecs.NET.Core.Ecs.EachEntityCallback)">
            <summary>
                Iterates the rule using the provided callback.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.Rule.Each(Flecs.NET.Core.Ecs.EachIndexCallback)">
            <summary>
                Iterates the rule using the provided callback.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.Rule.Equals(Flecs.NET.Core.Rule)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Rule"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Rule.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Rule"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Rule.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Rule"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Rule.op_Equality(Flecs.NET.Core.Rule,Flecs.NET.Core.Rule)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Rule"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Rule.op_Inequality(Flecs.NET.Core.Rule,Flecs.NET.Core.Rule)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.RoutineBuilder"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.ScopedWorld">
            <summary>
                Scoped world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.ScopedWorld.World">
            <summary>
                A reference to the world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.ScopedWorld.PrevScope">
            <summary>
                A reference to the previous scope entity.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.ScopedWorld.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.UInt64)">
            <summary>
                Creates a scoped world in the scope of an entity.
            </summary>
            <param name="world"></param>
            <param name="scope"></param>
        </member>
        <member name="M:Flecs.NET.Core.ScopedWorld.Dispose">
            <summary>
                Disposes the scoped world.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.ScopedWorld.Equals(Flecs.NET.Core.ScopedWorld)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.ScopedWorld"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.ScopedWorld.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.ScopedWorld"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.ScopedWorld.GetHashCode">
            <summary>
                Returns the hash code for the <see cref="T:Flecs.NET.Core.ScopedWorld"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.ScopedWorld.op_Equality(Flecs.NET.Core.ScopedWorld,Flecs.NET.Core.ScopedWorld)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.ScopedWorld"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.ScopedWorld.op_Inequality(Flecs.NET.Core.ScopedWorld,Flecs.NET.Core.ScopedWorld)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.ScopedWorld"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Snapshot">
            <summary>
                A snapshot stores the state of a world in a particular point in time.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Snapshot.World">
            <summary>
                A reference to the world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Snapshot.Handle">
            <summary>
                A reference to the handle.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Snapshot.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Creates a snapshot for the provided world.
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Flecs.NET.Core.Snapshot.Take">
            <summary>
                Create a snapshot.
                This operation makes a copy of the current state of the world.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Snapshot.Take(Flecs.NET.Core.Filter@)">
            <summary>
                Create a filtered snapshot.
                This operation is the same as ecs_snapshot_take, but accepts an iterator so
                an application can control what is stored by the snapshot.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Flecs.NET.Core.Snapshot.Restore">
            <summary>
                Restore a snapshot.
                This operation restores the world to the state it was in when the specified
                snapshot was taken. A snapshot can only be used once for restoring, as its
                data replaces the data that is currently in the world.
                This operation also resets the last issued entity handle, so any calls to
                ecs_new may return entity ids that have been issued before restoring the
                snapshot.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Snapshot.Dispose">
            <summary>
                Disposes of the snapshot.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Snapshot.Equals(Flecs.NET.Core.Snapshot)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Snapshot"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Snapshot.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Snapshot"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Snapshot.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Snapshot"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Snapshot.op_Equality(Flecs.NET.Core.Snapshot,Flecs.NET.Core.Snapshot)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Snapshot"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Snapshot.op_Inequality(Flecs.NET.Core.Snapshot,Flecs.NET.Core.Snapshot)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Snapshot"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Table">
            <summary>
                A table is where entities and components are stored.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Table.World">
            <summary>
                A reference to the world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Table.Handle">
            <summary>
                A reference to the handle.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Table.Offset">
            <summary>
                The offset from the start of the table.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Table.Count">
            <summary>
                The number of column indexes in the table range.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Table.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Bindings.Native.ecs_table_t*)">
            <summary>
                Creates a table from the provided world and handle.
            </summary>
            <param name="world"></param>
            <param name="table"></param>
        </member>
        <member name="M:Flecs.NET.Core.Table.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Bindings.Native.ecs_table_t*,System.Int32,System.Int32)">
            <summary>
                Creates a table range form the provided world and handle.
            </summary>
            <param name="world"></param>
            <param name="table"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Flecs.NET.Core.Table.Str">
            <summary>
                Convert table type to string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.Types">
            <summary>
                Get table type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.TypeIndex(System.UInt64)">
            <summary>
                Find type index for (component) id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.TypeIndex(System.UInt64,System.UInt64)">
            <summary>
                Find type index for pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.TypeIndex``1">
            <summary>
                Find type index for type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.TypeIndex``1(System.UInt64)">
            <summary>
                Find type index for pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.TypeIndex``2">
            <summary>
                Find type index for pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.TypeIndexSecond``1(System.UInt64)">
            <summary>
                Find type index for pair.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.ColumnIndex(System.UInt64)">
            <summary>
                Find column index for (component) id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.ColumnIndex(System.UInt64,System.UInt64)">
            <summary>
                Find column index for pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.ColumnIndex``1">
            <summary>
                Find column index for type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.ColumnIndex``1(System.UInt64)">
            <summary>
                Find column index for pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.ColumnIndex``2">
            <summary>
                Find column index for pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.ColumnIndexSecond``1(System.UInt64)">
            <summary>
                Find column index for pair.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.Has(System.UInt64)">
            <summary>
                Test if table has (component) id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.Has(System.UInt64,System.UInt64)">
            <summary>
                Test if table has the pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.Has``1">
            <summary>
                Test if table has the type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.Has``1(System.UInt64)">
            <summary>
                Test if table has the pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.Has``2">
            <summary>
                Test if table has the pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.HasSecond``1(System.UInt64)">
            <summary>
                Test if table has the pair.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.GetColumn(System.Int32)">
            <summary>
                Get pointer to component array by column index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.GetPtr(System.UInt64)">
            <summary>
                Get pointer to component array by component.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.GetPtr(System.UInt64,System.UInt64)">
            <summary>
                Get pointer to component array by component.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.Get``1">
            <summary>
                Get managed column to component array by component.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.GetFirst``2">
            <summary>
                Get managed column to component array by pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.GetSecond``2">
            <summary>
                Get managed column to component array by pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.GetSecond``1(System.UInt64)">
            <summary>
                Get managed column to component array by pair.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.ColumnSize(System.Int32)">
            <summary>
                Get column size.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.Depth(System.UInt64)">
            <summary>
                Get depth for given relationship.
            </summary>
            <param name="rel"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.Depth``1">
            <summary>
                Get depth for given relationship.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.ToString">
            <summary>
                Returns a string representation of the table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.Equals(Flecs.NET.Core.Table)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Table"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Table"/> instance equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Table"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.op_Equality(Flecs.NET.Core.Table,Flecs.NET.Core.Table)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Table"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Table.op_Inequality(Flecs.NET.Core.Table,Flecs.NET.Core.Table)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Table"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Timer">
            <summary>
                Timer struct.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Timer.Entity">
            <summary>
                A reference to the entity.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Timer.#ctor(System.UInt64)">
            <summary>
                Creates a timer from the entity id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Flecs.NET.Core.Timer.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Creates a timer for the provided world.
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Flecs.NET.Core.Timer.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.UInt64)">
            <summary>
                Creates a timer from the provided world and id.
            </summary>
            <param name="world"></param>
            <param name="id"></param>
        </member>
        <member name="M:Flecs.NET.Core.Timer.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.String)">
            <summary>
                Creates a timer from the provided world and entity name.
            </summary>
            <param name="world"></param>
            <param name="name"></param>
        </member>
        <member name="M:Flecs.NET.Core.Timer.Interval(System.Single)">
            <summary>
                Sets the interval.
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Timer.Interval">
            <summary>
                Gets the interval.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Timer.Timeout(System.Single)">
            <summary>
                Sets the timeout.
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Timer.Timeout">
            <summary>
                Gets the timeout.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Timer.Rate(System.Int32,System.UInt64)">
            <summary>
                Sets the rate.
            </summary>
            <param name="rate"></param>
            <param name="tickSource"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Timer.Start">
            <summary>
                Starts the timer.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Timer.Stop">
            <summary>
                Stops the timer.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Timer.ToString">
            <summary>
                Returns the entity's name if it has one, otherwise return its id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Timer.Equals(Flecs.NET.Core.Timer)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Timer"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Timer.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Timer"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Timer.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Timer"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Timer.op_Equality(Flecs.NET.Core.Timer,Flecs.NET.Core.Timer)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Timer"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Timer.op_Inequality(Flecs.NET.Core.Timer,Flecs.NET.Core.Timer)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Timer"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Type`1">
            <summary>
                Static class that registers and stores information about types.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Flecs.NET.Core.Type`1.RawId">
            <summary>
                The raw id of the type.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Type`1.Size">
            <summary>
                The size of the type.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Type`1.Alignment">
            <summary>
                The alignment of the type.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Type`1.ResetCount">
            <summary>
                The reset count of the type.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Type`1.IsAlias">
            <summary>
                Whether or not the type is an alias.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Type`1.AllowTag">
            <summary>
                Whether or not the type can be registered as a tag.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Type`1.TypeName">
            <summary>
                The type name of the type.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Type`1.SymbolName">
            <summary>
                The symbol name of the type.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Type`1.TypeHooks">
            <summary>
                Registered type hooks.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Type`1.SetTypeHooks(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Core.TypeHooks{`0})">
            <summary>
                Sets type hooks for the type.
            </summary>
            <param name="world"></param>
            <param name="typeHooks"></param>
        </member>
        <member name="M:Flecs.NET.Core.Type`1.IsRegistered(Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Tests if the type is registered.
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Type`1.Init(System.UInt64,System.Boolean)">
            <summary>
                Inits a type.
            </summary>
            <param name="entity"></param>
            <param name="allowTag"></param>
        </member>
        <member name="M:Flecs.NET.Core.Type`1.IdExplicit(Flecs.NET.Bindings.Native.ecs_world_t*,System.String,System.Boolean,System.UInt64,System.Boolean,System.Boolean*)">
            <summary>
                Registers a type and returns it's id.
            </summary>
            <param name="world"></param>
            <param name="name"></param>
            <param name="allowTag"></param>
            <param name="id"></param>
            <param name="isComponent"></param>
            <param name="existing"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Type`1.Id(Flecs.NET.Bindings.Native.ecs_world_t*,System.String,System.Boolean)">
            <summary>
                Registers a type and returns it's id.
            </summary>
            <param name="world"></param>
            <param name="name"></param>
            <param name="allowTag"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Type`1.RegisterLifeCycleActions(Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Registers type hooks.
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Flecs.NET.Core.Type`1.GetSize">
            <summary>
                Gets the size of a type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Type`1.GetAlignment">
            <summary>
                Gets the alignment of a type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Type`1.GetTypeName">
            <summary>
                Gets the type name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Type`1.GetSymbolName">
            <summary>
                Gets the symbol name of a type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Type`1.SetSymbolName(System.String)">
            <summary>
                Sets the type's symbol name.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Type`1.Reset">
            <summary>
                Resets a types information.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Type`1.AlignOf">
            <summary>
                Calculates the alignment of a type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.TypeHooks`1">
            <summary>
                Class containing type hook delegates and context.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.TypeHooks`1.Ctor">
            <summary>
                Ctor callback delegate.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.TypeHooks`1.Dtor">
            <summary>
                Dtor callback delegate.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.TypeHooks`1.Move">
            <summary>
                Move callback delegate.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.TypeHooks`1.Copy">
            <summary>
                Copy callback delegate.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.TypeHooks`1.OnAdd">
            <summary>
                On add callback delegate.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.TypeHooks`1.OnSet">
            <summary>
                On set callback delegate.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.TypeHooks`1.OnRemove">
            <summary>
                On remove callback delegate.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.TypeHooks`1.ContextFree">
            <summary>
                Context free callback delegate.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.TypeHooks`1.Context">
            <summary>
                Context pointer.
            </summary>
        </member>
        <member name="T:Flecs.NET.Core.TypeInfo">
            <summary>
                A wrapper around ecs_type_info_t.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.TypeInfo.Handle">
            <summary>
                A reference to the handle.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.TypeInfo.#ctor(Flecs.NET.Bindings.Native.ecs_type_info_t*)">
            <summary>
                Creates a type info from the provided handle.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:Flecs.NET.Core.TypeInfo.Equals(Flecs.NET.Core.TypeInfo)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.TypeInfo"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.TypeInfo.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.TypeInfo"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.TypeInfo.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.TypeInfo"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.TypeInfo.op_Equality(Flecs.NET.Core.TypeInfo,Flecs.NET.Core.TypeInfo)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.TypeInfo"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.TypeInfo.op_Inequality(Flecs.NET.Core.TypeInfo,Flecs.NET.Core.TypeInfo)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.TypeInfo"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.Types">
            <summary>
                A wrapper around ecs_type_t.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Types.World">
            <summary>
                A reference to the world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.Types.Handle">
            <summary>
                A reference to the handle.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.Types.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Bindings.Native.ecs_type_t*)">
            <summary>
                Creates a types wrapper around the provided world and handle.
            </summary>
            <param name="world"></param>
            <param name="type"></param>
        </member>
        <member name="M:Flecs.NET.Core.Types.Str">
            <summary>
                Convert type to comma-separated string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Types.Count">
            <summary>
                Return number of ids in type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Types.Array">
            <summary>
                Return pointer to array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Types.Get(System.Int32)">
            <summary>
                Get id at specified index in type.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Types.op_Implicit(Flecs.NET.Core.Types)~Flecs.NET.Bindings.Native.ecs_type_t*">
            <summary>
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Types.To(Flecs.NET.Core.Types)">
            <summary>
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Types.Equals(Flecs.NET.Core.Types)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Types"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Types.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Types"/> instances are equals.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Types.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.Types"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Types.op_Equality(Flecs.NET.Core.Types,Flecs.NET.Core.Types)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Types"/> are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Types.op_Inequality(Flecs.NET.Core.Types,Flecs.NET.Core.Types)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.Types"/> are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.Types.ToString">
            <summary>
                Returns comma separated string of type names.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.UntypedComponent">
            <summary>
                An untyped component.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.UntypedComponent.Id">
            <summary>
                Reference to id.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.UntypedComponent.Entity">
            <summary>
                Reference to entity.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.UntypedComponent.World">
            <summary>
                Reference to world pointer.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.#ctor(System.UInt64)">
            <summary>
                Constructs component from entity id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Constructs component from new id using the provided world.
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.UInt64)">
            <summary>
                Constructs component with the provided world and entity id.
            </summary>
            <param name="world"></param>
            <param name="id"></param>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.String)">
            <summary>
                Constructs component wit hthe provided world and entity name.
            </summary>
            <param name="world"></param>
            <param name="name"></param>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.Member(System.UInt64,System.UInt64,System.String,System.Int32,System.Int32)">
            <summary>
                Add member with unit.
            </summary>
            <param name="typeId"></param>
            <param name="unit"></param>
            <param name="name"></param>
            <param name="count"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.Member(System.UInt64,System.String,System.Int32,System.Int32)">
            <summary>
                Add member.
            </summary>
            <param name="typeId"></param>
            <param name="name"></param>
            <param name="count"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.Member``1(System.String,System.Int32,System.Int32)">
            <summary>
                Add member.
            </summary>
            <param name="name"></param>
            <param name="count"></param>
            <param name="offset"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.Member``1(System.UInt64,System.String,System.Int32,System.Int32)">
            <summary>
                Add member with unit.
            </summary>
            <param name="unit"></param>
            <param name="name"></param>
            <param name="count"></param>
            <param name="offset"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.Member``2(System.String,System.Int32,System.Int32)">
            <summary>
                Add member with unit.
            </summary>
            <param name="name"></param>
            <param name="count"></param>
            <param name="offset"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TUnit"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.Constant(System.String,System.Int32)">
            <summary>
                Add constant.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.Bit(System.String,System.UInt32)">
            <summary>
                Add bitmask constant.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.Range(System.Double,System.Double)">
            <summary>
                Add member value range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.WarningRange(System.Double,System.Double)">
            <summary>
                Add member warning range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.ErrorRange(System.Double,System.Double)">
            <summary>
                Add member error range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.Metric``1(System.UInt64,System.String,System.String)">
            <summary>
                Register member as metric.
            </summary>
            <param name="parent"></param>
            <param name="brief"></param>
            <param name="name"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.Equals(Flecs.NET.Core.UntypedComponent)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.UntypedComponent"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.UntypedComponent"/> instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.UntypedComponent"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.op_Equality(Flecs.NET.Core.UntypedComponent,Flecs.NET.Core.UntypedComponent)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.UntypedComponent"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.op_Inequality(Flecs.NET.Core.UntypedComponent,Flecs.NET.Core.UntypedComponent)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.UntypedComponent"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.UntypedComponent.ToString">
            <summary>
                Returns the entity's name if it has one, otherwise return its id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Core.World">
            <summary>
                The world is the container of all ECS data and systems. If the world is deleted, all data in the world will be
                deleted as well.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.World.Handle">
            <summary>
                The handle to the C world.
            </summary>
        </member>
        <member name="P:Flecs.NET.Core.World.Owned">
            <summary>
                Represents whether or not the world is owned.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.World.#ctor(Flecs.NET.Bindings.Native.ecs_world_t*,System.Boolean,System.Boolean)">
            <summary>
                Constructs a world from an <see cref="T:Flecs.NET.Bindings.Native.ecs_world_t"/> pointer.
            </summary>
            <param name="handle">The world handle.</param>
            <param name="owned">The owned boolean.</param>
            <param name="overrideOsAbort"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.Create(System.Boolean)">
            <summary>
                Creates a flecs world that is owned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Create(Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Creates a flecs world from an <see cref="T:Flecs.NET.Bindings.Native.ecs_world_t"/> pointer that is not owned.
            </summary>
            <param name="world">A C world.</param>
            <returns>A newly created world.</returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Create(System.String[])">
            <summary>
                Creates world from command line arguments.
            </summary>
            <param name="args">Command line arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Dispose">
            <summary>
                Calls <see cref="M:Flecs.NET.Bindings.Native.ecs_fini(Flecs.NET.Bindings.Native.ecs_world_t*)"/> and cleans up resources.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.World.Reset">
            <summary>
                Deletes and creates a new world.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.World.Quit">
            <summary>
                Signals that the application should quit. The next call to <see cref="M:Flecs.NET.Core.World.Progress(System.Single)"/> returns false.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.World.AtFini(Flecs.NET.Core.Ecs.FiniAction,System.Void*)">
            <summary>
                Register action to be executed when world is destroyed.
            </summary>
            <param name="action"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.ShouldQuit">
            <summary>
                Test if Quit() has been called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.FrameBegin(System.Single)">
            <summary>
                Begin frame.
            </summary>
            <param name="deltaTime"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.FrameEnd">
            <summary>
                End frame.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.World.ReadonlyBegin">
            <summary>
                Begin staging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.ReadonlyEnd">
            <summary>
                End staging.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.World.DeferBegin">
            <summary>
                Defer operations until end end of frame, or until DeferEnd() is called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.DeferEnd">
            <summary>
                End block of operations to defer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.IsDeferred">
            <summary>
                Test whether deferring is enabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.SetStageCount(System.Int32)">
            <summary>
                Configure world to have N stages.
            </summary>
            <param name="stages"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.GetStageCount">
            <summary>
                Get number of configured stages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetStageId">
            <summary>
                Get current stage id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.IsStage">
            <summary>
                Test if is a stage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.SetAutoMerge(System.Boolean)">
            <summary>
                Enable/disable auto merging for world or stage.
            </summary>
            <param name="autoMerge"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.Merge">
            <summary>
                Merge world or stage.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.World.GetStage(System.Int32)">
            <summary>
                Get stage-specific world pointer.
            </summary>
            <param name="stageId"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.AsyncStage">
            <summary>
                Create asynchronous stage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetWorld">
            <summary>
                Get actual world.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.IsReadOnly">
            <summary>
                Test whether the current world object is readonly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.SetCtx(System.Void*,Flecs.NET.Core.Ecs.ContextFree)">
            <summary>
                Set world context.
            </summary>
            <param name="ctx"></param>
            <param name="ctxFree"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.GetCtx">
            <summary>
                Get world context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Dim(System.Int32)">
            <summary>
                Preallocate memory for number of entities.
            </summary>
            <param name="entityCount"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.SetEntityRange(System.UInt64,System.UInt64)">
            <summary>
                Set entity range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.EnableRangeCheck(System.Boolean)">
            <summary>
                Enforce that operations cannot modify entities outside of range.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.SetScope(System.UInt64)">
            <summary>
                Set current scope.
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetScope">
            <summary>
                Get current scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.SetLookupPath(System.UInt64*)">
            <summary>
                Set search path.
            </summary>
            <param name="searchPath"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Lookup(System.String,System.Boolean)">
            <summary>
                Lookup entity by name.
            </summary>
            <param name="name"></param>
            <param name="searchPath"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Set``1(``0@)">
            <summary>
                Set singleton component.
            </summary>
            <param name="component"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Set``1(System.UInt64,``0@)">
            <summary>
                Set singleton pair.
            </summary>
            <param name="second"></param>
            <param name="component"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.SetFirst``2(``0@)">
            <summary>
                Set singleton pair.
            </summary>
            <param name="component"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.SetSecond``2(``1@)">
            <summary>
                Set singleton pair.
            </summary>
            <param name="component"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Set``1(``0)">
            <summary>
                Set singleton component.
            </summary>
            <param name="component"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Set``1(System.UInt64,``0)">
            <summary>
                Set singleton pair.
            </summary>
            <param name="second"></param>
            <param name="component"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.SetFirst``2(``0)">
            <summary>
                Set singleton pair.
            </summary>
            <param name="component"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.SetSecond``2(``1)">
            <summary>
                Set singleton pair.
            </summary>
            <param name="component"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetMutPtr``1">
            <summary>
                Get mut pointer to singleton component.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetMutPtr``1(System.UInt64)">
            <summary>
                Get mut pointer to singleton pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetMutFirstPtr``2">
            <summary>
                Get mut pointer to singleton pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetMutSecondPtr``2">
            <summary>
                Get mut pointer to singleton pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetMut``1">
            <summary>
                Get managed mut reference to singleton component.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetMut``1(System.UInt64)">
            <summary>
                Get managed mut reference to singleton pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetMutFirst``2">
            <summary>
                Get managed mut reference to singleton pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetMutSecond``2">
            <summary>
                Get managed mut reference to singleton pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Modified``1">
            <summary>
                Mark singleton component as modified.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.Modified``1(System.UInt64)">
            <summary>
                Mark singleton pair as modified.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.Modified``2">
            <summary>
                Mark singleton pair as modified.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.GetRef``1">
            <summary>
                Gets ref to singleton component.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetRef``1(System.UInt64)">
            <summary>
                Gets ref to singleton pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetRefFirst``2">
            <summary>
                Gets ref to singleton pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetRefSecond``2">
            <summary>
                Gets ref to singleton pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetPtr``1">
            <summary>
                Gets pointer to singleton component.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetPtr``1(System.UInt64)">
            <summary>
                Gets pointer to singleton pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetFirstPtr``2">
            <summary>
                Gets pointer to singleton pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetSecondPtr``2">
            <summary>
                Gets pointer to singleton pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Get``1">
            <summary>
                Gets managed reference to singleton component.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Get``1(System.UInt64)">
            <summary>
                Gets managed reference to singleton pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetFirst``2">
            <summary>
                Gets managed reference to singleton pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetSecond``2">
            <summary>
                Gets managed reference to singleton pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Has(System.UInt64,System.UInt64)">
            <summary>
                Test if world has pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Has``1">
            <summary>
                Test if world has singleton component.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Has``1(System.UInt64)">
            <summary>
                Test if world has singleton pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Has``2">
            <summary>
                Test if world has singleton pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Add(System.UInt64,System.UInt64)">
            <summary>
                Add singleton pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.Add``1">
            <summary>
                Add singleton component.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.Add``1(System.UInt64)">
            <summary>
                Add singleton pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.Add``2">
            <summary>
                Add singleton pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.Remove(System.UInt64,System.UInt64)">
            <summary>
                Remove singleton pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.Remove``1">
            <summary>
                Remove singleton component.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.Remove``1(System.UInt64)">
            <summary>
                Remove singleton pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.Remove``2">
            <summary>
                Remove singleton pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.Children(Flecs.NET.Core.Ecs.EachEntityCallback)">
            <summary>
                Iterate entities in root of world
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.Singleton``1">
            <summary>
                Get singleton entity for type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Target``1(System.Int32)">
            <summary>
                Get target for a given pair from a singleton entity.
            </summary>
            <param name="index"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Target``1(System.UInt64,System.Int32)">
            <summary>
                Get target for a given pair from a singleton entity.
            </summary>
            <param name="first"></param>
            <param name="index"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Target(System.UInt64,System.Int32)">
            <summary>
                Get target for a given pair from a singleton entity.
            </summary>
            <param name="first"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Use``1(System.String)">
            <summary>
                Create alias for component.
            </summary>
            <param name="alias"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Use(System.String,System.String)">
            <summary>
                Create alias for component.
            </summary>
            <param name="name"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Use(System.UInt64,System.String)">
            <summary>
                Create alias for component.
            </summary>
            <param name="entity"></param>
            <param name="alias"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.Count(System.UInt64)">
            <summary>
                Count entities matching a component.
            </summary>
            <param name="componentId"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Count(System.UInt64,System.UInt64)">
            <summary>
                Count entities matching a pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Count``1">
            <summary>
                Count entities matching a component.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Count``1(System.UInt64)">
            <summary>
                Count entities matching a pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Count``2">
            <summary>
                Count entities matching a pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.With(System.UInt64,System.Action)">
            <summary>
                All entities created in function are created with id.
            </summary>
            <param name="withId">Id to be added to the created entities.</param>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.With(System.UInt64,System.UInt64,System.Action)">
            <summary>
                All entities created in function are created with pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.With``1(System.Action)">
            <summary>
                All entities created in function are created with type.
            </summary>
            <param name="func"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.With``1(``0,System.Action)">
            <summary>
                All entities created in function are created with enum.
            </summary>
            <param name="enum"></param>
            <param name="func"></param>
            <typeparam name="TEnum"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.With``1(System.UInt64,System.Action)">
            <summary>
                All entities created in function are created with pair.
            </summary>
            <param name="second"></param>
            <param name="func"></param>
            <typeparam name="TFirst"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.With``2(``1,System.Action)">
            <summary>
                All entities created in function are created with pair.
            </summary>
            <param name="secondEnum"></param>
            <param name="func"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecondEnum"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.With``2(System.Action)">
            <summary>
                All entities created in function are created with pair.
            </summary>
            <param name="func"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.WithSecond``1(System.UInt64,System.Action)">
            <summary>
                All entities created in function are created with pair.
            </summary>
            <param name="first"></param>
            <param name="func"></param>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.Scope(System.UInt64,System.Action)">
            <summary>
                All entities created in function are created in scope. All operations
                called in function (such as lookup) are relative to scope.
            </summary>
            <param name="parent"></param>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.Scope``1(System.Action)">
            <summary>
                Same as scope(parent, func), but with T as parent.
            </summary>
            <param name="func"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.Scope(System.UInt64)">
            <summary>
                Use provided scope for operations ran on returned world.
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Scope``1">
            <summary>
                Use provided scope for operations ran on returned world.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Scope(System.String)">
            <summary>
                Use provided scope for operations ran on returned world.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.DeleteWith(System.UInt64)">
            <summary>
                Delete all entities with specified id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.DeleteWith(System.UInt64,System.UInt64)">
            <summary>
                Delete all entities with specified pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.DeleteWith``1">
            <summary>
                Delete all entities with specified component.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.DeleteWith``1(``0)">
            <summary>
                Delete all entities with specified enum.
            </summary>
            <param name="enum"></param>
            <typeparam name="TEnum"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.DeleteWith``1(System.UInt64)">
            <summary>
                Delete all entities with specified pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.DeleteWith``2">
            <summary>
                Delete all entities with specified pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.DeleteWith``2(``1)">
            <summary>
                Delete all entities with specified pair.
            </summary>
            <param name="secondEnum"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecondEnum"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.DeleteWithSecond``1(System.UInt64)">
            <summary>
                Delete all entities with specified pair.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.RemoveAll(System.UInt64)">
            <summary>
                Remove all instances of specified id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.RemoveAll(System.UInt64,System.UInt64)">
            <summary>
                Remove all instances of specified pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.RemoveAll``1">
            <summary>
                Remove all instances of specified component.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.RemoveAll``1(``0)">
            <summary>
                Remove all instances of specified enum.
            </summary>
            <param name="enum"></param>
            <typeparam name="TEnum"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.RemoveAll``1(System.UInt64)">
            <summary>
                Remove all instances of specified pair.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.RemoveAll``2">
            <summary>
                Remove all instances of specified pair.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.RemoveAll``2(``1)">
            <summary>
                Remove all instances of specified pair.
            </summary>
            <param name="secondEnum"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecondEnum"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.RemoveAllSecond``1(System.UInt64)">
            <summary>
                Remove all instances of specified pair.
            </summary>
            <param name="first"></param>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.Defer(System.Action)">
            <summary>
                Defer all operations called in function. If the world is already in
                deferred mode, do nothing.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.DeferSuspend">
            <summary>
                Suspend deferring operations.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.World.DeferResume">
            <summary>
                Resume deferring operations.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.World.Exists(System.UInt64)">
            <summary>
                Check if entity id exists in the world.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.IsAlive(System.UInt64)">
            <summary>
                Check if entity id exists in the world.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.IsValid(System.UInt64)">
            <summary>
                Check if entity id is valid.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetAlive(System.UInt64)">
            <summary>
                Get alive entity for id.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Ensure(System.UInt64)">
            <summary>
                Ensures that entity with provided generation is alive.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.RunPostFrame(Flecs.NET.Core.Ecs.FiniAction,System.Void*)">
            <summary>
                Run callback after completing frame.
            </summary>
            <param name="action"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.GetInfo">
            <summary>
                Get the world info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.DeltaTime">
            <summary>
                Get delta time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Id(System.UInt64)">
            <summary>
                Get id from id value.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Id(System.UInt64,System.UInt64)">
            <summary>
                Get pair from id values.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Id``1">
            <summary>
                Get id from a type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Id``1(``0)">
            <summary>
                Get id from an enum.
            </summary>
            <param name="enum"></param>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Id``1(System.UInt64)">
            <summary>
                Get pair id.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Id``2">
            <summary>
                Get pair id.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Id``2(``1)">
            <summary>
                Get pair id.
            </summary>
            <param name="secondEnum"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecondEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Pair(System.UInt64,System.UInt64)">
            <summary>
                Get pair id.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Pair``1(System.UInt64)">
            <summary>
                Get pair id.
            </summary>
            <param name="second"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Pair``2">
            <summary>
                Get pair id.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Component``1">
            <summary>
                Find or register component.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Component``1(System.String)">
            <summary>
                Get component with name.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Entity">
            <summary>
                Create an entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Entity(System.UInt64)">
            <summary>
                Create an entity from id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Entity(System.String)">
            <summary>
                Create an entity from name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Entity``1">
            <summary>
                Create an entity from type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Entity``1(System.String)">
            <summary>
                Create an entity that's associated with a type.
            </summary>
            <param name="name"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Entity``1(``0)">
            <summary>
                Convert enum constant to entity.
            </summary>
            <param name="enumMember"></param>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Prefab">
            <summary>
                Create a prefab.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Prefab(System.String)">
            <summary>
                Create a prefab with the provided name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Prefab``1">
            <summary>
                Create a prefab that's associated with a type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Prefab``1(System.String)">
            <summary>
                Create a prefab that's associated with a type.
            </summary>
            <param name="name"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Event(System.UInt64)">
            <summary>
                Create a new event.
            </summary>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Event``1">
            <summary>
                Create a new event.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Each(System.UInt64,Flecs.NET.Core.Ecs.EachEntityCallback)">
            <summary>
                Iterate over all entities with the provided (component) id.
            </summary>
            <param name="id"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.Each(System.UInt64,System.UInt64,Flecs.NET.Core.Ecs.EachEntityCallback)">
            <summary>
                Iterate over all entities with the provided pair.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.Each``1(System.UInt64,Flecs.NET.Core.Ecs.EachEntityCallback{``0})">
            <summary>
                Iterate over all entities with the provided pair.
            </summary>
            <param name="second"></param>
            <param name="callback"></param>
            <typeparam name="TFirst"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.Each``2(Flecs.NET.Core.Ecs.EachEntityCallback)">
            <summary>
                Iterate over all entities with the provided pair.
            </summary>
            <param name="callback"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.EachFirst``2(Flecs.NET.Core.Ecs.EachEntityCallback{``0})">
            <summary>
                Iterate over all entities with the provided pair.
            </summary>
            <param name="callback"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.EachSecond``2(Flecs.NET.Core.Ecs.EachEntityCallback{``1})">
            <summary>
                Iterate over all entities with the provided pair.
            </summary>
            <param name="callback"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.Module``1(System.String)">
            <summary>
                Define a module.
            </summary>
            <param name="name"></param>
            <typeparam name="TModule"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Import``1">
            <summary>
                Import a module.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.SetPipeline(System.UInt64)">
            <summary>
                Set pipeline.
            </summary>
            <param name="pipeline"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.SetPipeline``1">
            <summary>
                Set pipeline.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.GetPipeline">
            <summary>
                Get pipeline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Progress(System.Single)">
            <summary>
                Progress world one tick.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.RunPipeline(System.UInt64,System.Single)">
            <summary>
                Run pipeline.
            </summary>
            <param name="pipeline"></param>
            <param name="deltaTime"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.RunPipeline``1(System.Single)">
            <summary>
                Run pipeline.
            </summary>
            <param name="deltaTime"></param>
            <typeparam name="TPipeline"></typeparam>
        </member>
        <member name="M:Flecs.NET.Core.World.SetTimeScale(System.Single)">
            <summary>
                Set timescale.
            </summary>
            <param name="scale"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.SetTargetFps(System.Single)">
            <summary>
                Set target FPS.
            </summary>
            <param name="targetFps"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.ResetClock">
            <summary>
                Reset simulation clock.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.World.SetThreads(System.Int32)">
            <summary>
                Set number of threads.
            </summary>
            <param name="threads"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.GetThreads">
            <summary>
                Set number of threads.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.SetTaskThreads(System.Int32)">
            <summary>
                Set number of task threads.
            </summary>
            <param name="taskThreads"></param>
        </member>
        <member name="M:Flecs.NET.Core.World.UsingTaskThreads">
            <summary>
                Returns true if task thread use has been requested.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Snapshot">
            <summary>
                Create a snapshot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Timer">
            <summary>
                Create a timer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Timer(System.UInt64)">
            <summary>
                Create a timer.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Timer(System.String)">
            <summary>
                Create a timer.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.RandomizeTimers">
            <summary>
                Enable randomization of initial time values for timers.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.World.PlecsFromStr(System.String,System.String)">
            <summary>
                Load plecs string.
            </summary>
            <param name="name"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.PlecsFromFile(System.String)">
            <summary>
                Load plecs from file.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.ToExpr(System.UInt64,System.Void*)">
            <summary>
                Convert value to string.
            </summary>
            <param name="id"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.ToExpr``1(``0*)">
            <summary>
                Convert value to string
            </summary>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Cursor(System.UInt64,System.Void*)">
            <summary>
                Return meta cursor to value.
            </summary>
            <param name="id"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Cursor``1(System.Void*)">
            <summary>
                Return meta cursor to value.
            </summary>
            <param name="data"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Primitive(Flecs.NET.Bindings.Native.ecs_primitive_kind_t)">
            <summary>
                Create primitive type.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Array(System.UInt64,System.Int32)">
            <summary>
                Create array type.
            </summary>
            <param name="elemId"></param>
            <param name="arrayCount"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Array``1(System.Int32)">
            <summary>
                Create array type.
            </summary>
            <param name="arrayCount"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Vector(System.UInt64)">
            <summary>
                Create vector type.
            </summary>
            <param name="elemId"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Vector``1">
            <summary>
                Create vector type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.ToJson(System.UInt64,System.Void*)">
            <summary>
                Serialize untyped value to JSON.
            </summary>
            <param name="id"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.ToJson``1(``0*)">
            <summary>
                Serialize value to JSON.
            </summary>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.ToJson">
            <summary>
                Serialize world to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.FromJson(System.UInt64,System.Void*,System.String,Flecs.NET.Bindings.Native.ecs_from_json_desc_t*)">
            <summary>
                Deserialize value from JSON.
            </summary>
            <param name="id"></param>
            <param name="value"></param>
            <param name="json"></param>
            <param name="desc"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.FromJson``1(``0*,System.String,Flecs.NET.Bindings.Native.ecs_from_json_desc_t*)">
            <summary>
                Deserialize value from JSON.
            </summary>
            <param name="value"></param>
            <param name="json"></param>
            <param name="desc"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.FromJson(System.String,Flecs.NET.Bindings.Native.ecs_from_json_desc_t*)">
            <summary>
                Deserialize value from JSON.
            </summary>
            <param name="json"></param>
            <param name="desc"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.App">
            <summary>
                Create app builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Metric(System.UInt64)">
            <summary>
                Create metric builder.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.FilterBuilder">
            <summary>
                Create filter builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.QueryBuilder">
            <summary>
                Create query builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.ObserverBuilder">
            <summary>
                Create observer builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.RoutineBuilder">
            <summary>
                Create routine builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Filter(Flecs.NET.Core.FilterBuilder,System.String)">
            <summary>
                Create filter.
            </summary>
            <param name="filter"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Rule(Flecs.NET.Core.FilterBuilder,System.String)">
            <summary>
                Create rule.
            </summary>
            <param name="filter"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Query(Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.QueryBuilder,System.String)">
            <summary>
                Create query.
            </summary>
            <param name="filter"></param>
            <param name="query"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Pipeline(Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.QueryBuilder,System.UInt64)">
            <summary>
                Creates a pipeline.
            </summary>
            <param name="filter"></param>
            <param name="query"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Pipeline``1(Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.QueryBuilder)">
            <summary>
                Creates a pipeline.
            </summary>
            <param name="filter"></param>
            <param name="query"></param>
            <typeparam name="TPipeline"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Observer(Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.ObserverBuilder,System.Action,System.String)">
            <summary>
                Create an observer.
            </summary>
            <param name="filter"></param>
            <param name="observer"></param>
            <param name="callback"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Observer(Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.ObserverBuilder,Flecs.NET.Core.Ecs.IterCallback,System.String)">
            <summary>
                Create an observer.
            </summary>
            <param name="filter"></param>
            <param name="observer"></param>
            <param name="callback"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Observer(Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.ObserverBuilder,Flecs.NET.Core.Ecs.EachEntityCallback,System.String)">
            <summary>
                Create an observer.
            </summary>
            <param name="filter"></param>
            <param name="observer"></param>
            <param name="callback"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Observer(Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.ObserverBuilder,Flecs.NET.Core.Ecs.EachIndexCallback,System.String)">
            <summary>
                Create an observer.
            </summary>
            <param name="filter"></param>
            <param name="observer"></param>
            <param name="callback"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Observer(System.UInt64)">
            <summary>
                Create an observer.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Routine(Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.QueryBuilder,Flecs.NET.Core.RoutineBuilder,System.Action,System.String)">
            <summary>
                Create routine.
            </summary>
            <param name="filter"></param>
            <param name="query"></param>
            <param name="routine"></param>
            <param name="callback"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Routine(Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.QueryBuilder,Flecs.NET.Core.RoutineBuilder,Flecs.NET.Core.Ecs.IterCallback,System.String)">
            <summary>
                Create routine.
            </summary>
            <param name="filter"></param>
            <param name="query"></param>
            <param name="routine"></param>
            <param name="callback"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Routine(Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.QueryBuilder,Flecs.NET.Core.RoutineBuilder,Flecs.NET.Core.Ecs.EachEntityCallback,System.String)">
            <summary>
                Create routine.
            </summary>
            <param name="filter"></param>
            <param name="query"></param>
            <param name="routine"></param>
            <param name="callback"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Routine(Flecs.NET.Core.FilterBuilder,Flecs.NET.Core.QueryBuilder,Flecs.NET.Core.RoutineBuilder,Flecs.NET.Core.Ecs.EachIndexCallback,System.String)">
            <summary>
                Create routine.
            </summary>
            <param name="filter"></param>
            <param name="query"></param>
            <param name="routine"></param>
            <param name="callback"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Routine(System.UInt64)">
            <summary>
                Create routine.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.InitBuiltinComponents">
            <summary>
                Initializes built-in components.
            </summary>
        </member>
        <member name="M:Flecs.NET.Core.World.op_Implicit(Flecs.NET.Core.World)~Flecs.NET.Bindings.Native.ecs_world_t*">
            <summary>
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.To">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Equals(Flecs.NET.Core.World)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.World"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.World"/> instances are eqaul.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Core.World"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.op_Equality(Flecs.NET.Core.World,Flecs.NET.Core.World)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.World"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Core.World.op_Inequality(Flecs.NET.Core.World,Flecs.NET.Core.World)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Core.World"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Resources.NativeHandle`1">
            <summary>
                A handle for storing references to managed objects from inside an unmanaged struct.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Flecs.NET.Resources.NativeHandle`1.Target">
            <summary>
                Represents the object that the native handle references.
            </summary>
        </member>
        <member name="M:Flecs.NET.Resources.NativeHandle`1.Dispose">
            <summary>
                Frees the native handle.
            </summary>
        </member>
        <member name="M:Flecs.NET.Resources.NativeHandle`1.Alloc">
            <summary>
                Allocates a native handle that references nothing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Resources.NativeHandle`1.Alloc(`0)">
            <summary>
                Allocates a native handle that references the provided object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Resources.NativeHandle`1.Equals(Flecs.NET.Resources.NativeHandle{`0})">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Resources.NativeHandle`1"/> instances are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Resources.NativeHandle`1.Equals(System.Object)">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Resources.NativeHandle`1"/> instance are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Resources.NativeHandle`1.GetHashCode">
            <summary>
                Returns the hash code of the <see cref="T:Flecs.NET.Resources.NativeHandle`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Resources.NativeHandle`1.op_Equality(Flecs.NET.Resources.NativeHandle{`0},Flecs.NET.Resources.NativeHandle{`0})">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Resources.NativeHandle`1"/> instances are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Resources.NativeHandle`1.op_Inequality(Flecs.NET.Resources.NativeHandle{`0},Flecs.NET.Resources.NativeHandle{`0})">
            <summary>
                Checks if two <see cref="T:Flecs.NET.Resources.NativeHandle`1"/> instances are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Utilities.Macros">
            <summary>
                Helper macros for working with flecs.
            </summary>
        </member>
        <member name="F:Flecs.NET.Utilities.Macros.False">
            <summary>
                False.
            </summary>
        </member>
        <member name="F:Flecs.NET.Utilities.Macros.True">
            <summary>
                True.
            </summary>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.Bool(System.Boolean)">
            <summary>
                Converts a managed boolean to a byte.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.AreSameReadOnlyRefs``1(``0@,``0@)">
            <summary>
                Tests if 2 readonly refs point to the same object.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.IsNullReadOnlyRef``1(``0@)">
            <summary>
                Tests if a readonly ref is null.
            </summary>
            <param name="obj"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.OsFree(System.IntPtr)">
            <summary>
                Calls the os api free function.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.OsFree(System.Void*)">
            <summary>
                Calls the os api free function.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.EntityLow(System.UInt64)">
            <summary>
                Gets the low 32 bits of an entity.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.EntityHi(System.UInt64)">
            <summary>
                Gets the high 32 bits of an entity.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.EntityCombine(System.UInt64,System.UInt64)">
            <summary>
                Combines 2 entity ids together.
            </summary>
            <param name="low"></param>
            <param name="hi"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.Pair(System.UInt64,System.UInt64)">
            <summary>
                Creates a pair out of 2 entities.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.Pair``2(Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Creates a pair out of 2 types.
            </summary>
            <param name="world"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.Pair``1(System.UInt64,Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Creates a pair out of a type and an entity.
            </summary>
            <param name="second"></param>
            <param name="world"></param>
            <typeparam name="TFirst"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.PairSecond``1(System.UInt64,Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Creates a pair out of a type and an entity.
            </summary>
            <param name="first"></param>
            <param name="world"></param>
            <typeparam name="TSecond"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.PairFirst(System.UInt64)">
            <summary>
                Returns the first part of a pair.
            </summary>
            <param name="pair"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.PairFirst(Flecs.NET.Bindings.Native.ecs_world_t*,System.UInt64)">
            <summary>
                Returns the first part of a pair.
            </summary>
            <param name="world"></param>
            <param name="pair"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.PairSecond(System.UInt64)">
            <summary>
                Returns the second part of a pair.
            </summary>
            <param name="pair"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.PairSecond(Flecs.NET.Bindings.Native.ecs_world_t*,System.UInt64)">
            <summary>
                Returns the second part of a pair.
            </summary>
            <param name="world"></param>
            <param name="pair"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.IsPair(System.UInt64)">
            <summary>
                Tests whether an id is a pair.
            </summary>
            <param name="pair"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.DependsOn(System.UInt64)">
            <summary>
                Creates a dependson relationship with the provided entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.EntityHasIdFlag(System.UInt64,System.UInt64)">
            <summary>
                Checks if an entity has a flag.
            </summary>
            <param name="entity"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.RecordToRow(System.UInt32)">
            <summary>
                Gets record to row.
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.PolyIs(System.Void*,System.Int32)">
            <summary>
                Test if pointer is of specified type.
            </summary>
            <param name="poly"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.IsStageOrWorld(Flecs.NET.Bindings.Native.ecs_world_t*)">
            <summary>
                Test if pointer is a stage or world.
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.TableLock(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Bindings.Native.ecs_table_t*)">
            <summary>
                Locks a table.
            </summary>
            <param name="world"></param>
            <param name="table"></param>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.TableUnlock(Flecs.NET.Bindings.Native.ecs_world_t*,Flecs.NET.Bindings.Native.ecs_table_t*)">
            <summary>
                Unlocks a table.
            </summary>
            <param name="world"></param>
            <param name="table"></param>
        </member>
        <member name="M:Flecs.NET.Utilities.Macros.TermIter(Flecs.NET.Bindings.Native.ecs_world_t*,System.UInt64)">
            <summary>
                Get an iter for all entities with the provided id.
            </summary>
            <param name="world"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Utilities.Managed">
            <summary>
                Static class for working with managed memory in flecs.
            </summary>
        </member>
        <member name="M:Flecs.NET.Utilities.Managed.ManagedSize``1">
            <summary>
                Gets the managed size of a type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Utilities.Memory">
            <summary>
                Static class for allocating and freeing memory.
            </summary>
        </member>
        <member name="M:Flecs.NET.Utilities.Memory.Alloc``1(System.Int32)">
            <summary>
                Allocates memory for type.
            </summary>
            <param name="count"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Memory.AllocZeroed``1(System.Int32)">
            <summary>
                Allocates zeroed memory for type.
            </summary>
            <param name="count"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Memory.Realloc``1(``0*,System.Int32)">
            <summary>
                Reallocate memory for type.
            </summary>
            <param name="data"></param>
            <param name="count"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Memory.Free(System.Void*)">
            <summary>
                Free memory.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Flecs.NET.Utilities.Memory.Alloc(System.Int32)">
            <summary>
                Allocate specified amount of bytes.
            </summary>
            <param name="byteCount"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Memory.AllocZeroed(System.Int32)">
            <summary>
                Allocate zeroed specified amount of bytes.
            </summary>
            <param name="byteCount"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Memory.Realloc(System.Void*,System.Int32)">
            <summary>
                Reallocate specified amount of bytes.
            </summary>
            <param name="data"></param>
            <param name="byteCount"></param>
            <returns></returns>
        </member>
        <member name="T:Flecs.NET.Utilities.Utils">
            <summary>
                Static class for simple utility functions.
            </summary>
        </member>
        <member name="M:Flecs.NET.Utilities.Utils.StringEqual(System.Byte*,System.Byte*)">
            <summary>
                Checks if 2 native strings are equal.
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:Flecs.NET.Utilities.Utils.NextPowOf2(System.Int32)">
            <summary>
                Gets the next power of 2 for the provided number.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
    </members>
</doc>
